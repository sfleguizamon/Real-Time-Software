
uCOSII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b450  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b810  0800b810  00020278  2**0
                  CONTENTS
  4 .ARM          00000000  0800b810  0800b810  00020278  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b810  0800b810  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b810  0800b810  0001b810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b814  0800b814  0001b814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800b818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c40  20000278  0800ba90  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003eb8  0800ba90  00023eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c5a2  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000599e  00000000  00000000  0004c843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  000521e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00053988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f35e  00000000  00000000  00054e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d0d7  00000000  00000000  000741de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098b9b  00000000  00000000  000912b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129e50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d04  00000000  00000000  00129ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000278 	.word	0x20000278
 8000128:	00000000 	.word	0x00000000
 800012c:	0800b544 	.word	0x0800b544

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000027c 	.word	0x2000027c
 8000148:	0800b544 	.word	0x0800b544

0800014c <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 800014c:	b672      	cpsid	i
        BX      LR
 800014e:	4770      	bx	lr

08000150 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000150:	b662      	cpsie	i
        BX      LR
 8000152:	4770      	bx	lr

08000154 <CPU_SR_Save>:
@                       CPSIE i
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000154:	b672      	cpsid	i
        PUSH   {R1}
 8000156:	b402      	push	{r1}
        MRS     R1, BASEPRI
 8000158:	f3ef 8111 	mrs	r1, BASEPRI
        MSR     BASEPRI, R0
 800015c:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000160:	f3bf 8f4f 	dsb	sy
        ISB
 8000164:	f3bf 8f6f 	isb	sy
        MOV     R0, R1
 8000168:	4608      	mov	r0, r1
        POP    {R1}
 800016a:	bc02      	pop	{r1}
        CPSIE   I
 800016c:	b662      	cpsie	i
        BX      LR
 800016e:	4770      	bx	lr

08000170 <CPU_SR_Restore>:


.thumb_func
CPU_SR_Restore:
        CPSID   I                               @ Cortex-M7 errata notice. See Note #2
 8000170:	b672      	cpsid	i
        MSR     BASEPRI, R0
 8000172:	f380 8811 	msr	BASEPRI, r0
        DSB
 8000176:	f3bf 8f4f 	dsb	sy
        ISB
 800017a:	f3bf 8f6f 	isb	sy
        CPSIE   I
 800017e:	b662      	cpsie	i
        BX      LR
 8000180:	4770      	bx	lr

08000182 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 8000182:	bf30      	wfi
        BX      LR
 8000184:	4770      	bx	lr

08000186 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 8000186:	bf20      	wfe
        BX      LR
 8000188:	4770      	bx	lr

0800018a <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 800018a:	fab0 f080 	clz	r0, r0
        BX      LR
 800018e:	4770      	bx	lr

08000190 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000190:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000194:	fab0 f080 	clz	r0, r0
        BX      LR
 8000198:	4770      	bx	lr

0800019a <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800019a:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800019e:	4770      	bx	lr

080001a0 <OS_CPU_SR_Save>:
@                      CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_SR_Save:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001a0:	b672      	cpsid	i
    PUSH   {R1}
 80001a2:	b402      	push	{r1}
    MRS     R1, BASEPRI
 80001a4:	f3ef 8111 	mrs	r1, BASEPRI
    MSR     BASEPRI, R0
 80001a8:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001ac:	f3bf 8f4f 	dsb	sy
    ISB
 80001b0:	f3bf 8f6f 	isb	sy
    MOV     R0, R1
 80001b4:	4608      	mov	r0, r1
    POP    {R1}
 80001b6:	bc02      	pop	{r1}
    CPSIE   I
 80001b8:	b662      	cpsie	i
    BX      LR
 80001ba:	4770      	bx	lr

080001bc <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    CPSID   I                                   @ Cortex-M7 errata notice. See Note #2
 80001bc:	b672      	cpsid	i
    MSR     BASEPRI, R0
 80001be:	f380 8811 	msr	BASEPRI, r0
    DSB
 80001c2:	f3bf 8f4f 	dsb	sy
    ISB
 80001c6:	f3bf 8f6f 	isb	sy
    CPSIE   I
 80001ca:	b662      	cpsie	i
    BX      LR
 80001cc:	4770      	bx	lr

080001ce <OSStartHighRdy>:
@              i) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 80001ce:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 80001d0:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 80001d4:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 80001d8:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 80001dc:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 80001e0:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001e2:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001e4:	f380 8809 	msr	PSP, r0

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001e8:	f241 705c 	movw	r0, #5980	; 0x175c
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 80001ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 80001f0:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 80001f2:	f381 8808 	msr	MSP, r1

    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 80001f6:	f007 f8bb 	bl	8007370 <OSTaskSwHook>

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001fa:	4832      	ldr	r0, [pc, #200]	; (80002c4 <OS_CPU_PendSVHandler+0x6c>)
    MOVS    R1, #1
 80001fc:	2101      	movs	r1, #1
    STRB    R1, [R0]
 80001fe:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000200:	f641 6084 	movw	r0, #7812	; 0x1e84
    MOVT    R0, #:upper16:OSPrioCur
 8000204:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000208:	f641 31b2 	movw	r1, #7090	; 0x1bb2
    MOVT    R1, #:upper16:OSPrioHighRdy
 800020c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000210:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000212:	7002      	strb	r2, [r0, #0]

    MOVW    R0, #:lower16:OSTCBCur                              @ OSTCBCur  = OSTCBHighRdy;
 8000214:	f242 309c 	movw	r0, #9116	; 0x239c
    MOVT    R0, #:upper16:OSTCBCur
 8000218:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdy
 800021c:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdy
 8000220:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000224:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000226:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 8000228:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800022a:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 800022e:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000232:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000236:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800023a:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11, LR}                                  @ Restore r4-11, lr from new process stack
 800023e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 8000242:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 8000244:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 8000248:	bc06      	pop	{r1, r2}
    CPSIE    I
 800024a:	b662      	cpsie	i
    BX       R1
 800024c:	4708      	bx	r1

0800024e <OSCtxSw>:
@********************************************************************************************************

.thumb_func
OSCtxSw:
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800024e:	481e      	ldr	r0, [pc, #120]	; (80002c8 <OS_CPU_PendSVHandler+0x70>)
    LDR     R1, =NVIC_PENDSVSET
 8000250:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000254:	6001      	str	r1, [r0, #0]
    BX      LR
 8000256:	4770      	bx	lr

08000258 <OS_CPU_PendSVHandler>:
@                  CPSIE i
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Cortex-M7 errata notice. See Note #5
 8000258:	b672      	cpsid	i
    MOVW    R2, #:lower16:OS_KA_BASEPRI_Boundary                @ Set BASEPRI priority level required for exception preemption
 800025a:	f241 7260 	movw	r2, #5984	; 0x1760
    MOVT    R2, #:upper16:OS_KA_BASEPRI_Boundary
 800025e:	f2c2 0200 	movt	r2, #8192	; 0x2000
    LDR     R1, [R2]
 8000262:	6811      	ldr	r1, [r2, #0]
    MSR     BASEPRI, R1
 8000264:	f381 8811 	msr	BASEPRI, r1
    DSB
 8000268:	f3bf 8f4f 	dsb	sy
    ISB
 800026c:	f3bf 8f6f 	isb	sy
    CPSIE   I
 8000270:	b662      	cpsie	i

    MRS     R0, PSP                                             @ PSP is process stack pointer
 8000272:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11, R14}                                  @ Save remaining regs r4-11, R14 on process stack
 8000276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    MOVW    R5, #:lower16:OSTCBCur                              @ OSTCBCur->OSTCBStkPtr = SP;
 800027a:	f242 359c 	movw	r5, #9116	; 0x239c
    MOVT    R5, #:upper16:OSTCBCur
 800027e:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R1, [R5]
 8000282:	6829      	ldr	r1, [r5, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 8000284:	6008      	str	r0, [r1, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 8000286:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook() for FPU Push & Pop
 8000288:	f007 f872 	bl	8007370 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 800028c:	f641 6084 	movw	r0, #7812	; 0x1e84
    MOVT    R0, #:upper16:OSPrioCur
 8000290:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 8000294:	f641 31b2 	movw	r1, #7090	; 0x1bb2
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000298:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 800029c:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 800029e:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdy                          @ OSTCBCur  = OSTCBHighRdy;
 80002a0:	f242 1180 	movw	r1, #8576	; 0x2180
    MOVT    R1, #:upper16:OSTCBHighRdy
 80002a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002a8:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002aa:	602a      	str	r2, [r5, #0]

    ORR     LR,  R4, #0x04                                      @ Ensure exception return uses process stack
 80002ac:	f044 0e04 	orr.w	lr, r4, #4
    LDR     R0,  [R2]                                           @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 80002b0:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11, R14}                                  @ Restore r4-11, R14 from new process stack
 80002b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 80002b6:	f380 8809 	msr	PSP, r0

    MOV     R2, #0                                              @ Restore BASEPRI priority level to 0
 80002ba:	f04f 0200 	mov.w	r2, #0
    MSR     BASEPRI, R2
 80002be:	f382 8811 	msr	BASEPRI, r2
    BX      LR                                                  @ Exception return will restore remaining context
 80002c2:	4770      	bx	lr
    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80002c4:	20001ba9 	.word	0x20001ba9
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002c8:	e000ed04 	.word	0xe000ed04

080002cc <DICfgMode>:
* Notes       : Edge detection is only available if the configuration constant DI_EDGE_EN is set to 1.
*********************************************************************************************************
*/

void  DICfgMode (INT8U n, INT8U mode)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	460a      	mov	r2, r1
 80002d6:	71fb      	strb	r3, [r7, #7]
 80002d8:	4613      	mov	r3, r2
 80002da:	71bb      	strb	r3, [r7, #6]
  CPU_SR   cpu_sr; 
  
   if (n < DIO_MAX_DI) {
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d80d      	bhi.n	80002fe <DICfgMode+0x32>
        OS_ENTER_CRITICAL();
 80002e2:	2040      	movs	r0, #64	; 0x40
 80002e4:	f7ff ff5c 	bl	80001a0 <OS_CPU_SR_Save>
 80002e8:	60f8      	str	r0, [r7, #12]
        DITbl[n].DIModeSel = mode;
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <DICfgMode+0x3c>)
 80002ee:	011b      	lsls	r3, r3, #4
 80002f0:	4413      	add	r3, r2
 80002f2:	3306      	adds	r3, #6
 80002f4:	79ba      	ldrb	r2, [r7, #6]
 80002f6:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 80002f8:	68f8      	ldr	r0, [r7, #12]
 80002fa:	f7ff ff5f 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 80002fe:	bf00      	nop
 8000300:	3710      	adds	r7, #16
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	200012d0 	.word	0x200012d0

0800030c <DIGet>:
*               > 0   if edges have been detected
*********************************************************************************************************
*/

INT16U  DIGet (INT8U n)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
    INT16U  val;
    CPU_SR  cpu_sr; 


    if (n < DIO_MAX_DI) {
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	2b07      	cmp	r3, #7
 800031a:	d80f      	bhi.n	800033c <DIGet+0x30>
        OS_ENTER_CRITICAL();
 800031c:	2040      	movs	r0, #64	; 0x40
 800031e:	f7ff ff3f 	bl	80001a0 <OS_CPU_SR_Save>
 8000322:	60f8      	str	r0, [r7, #12]
        val = DITbl[n].DIVal;                              /* Get state of DI channel                  */
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4a08      	ldr	r2, [pc, #32]	; (8000348 <DIGet+0x3c>)
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	4413      	add	r3, r2
 800032c:	3302      	adds	r3, #2
 800032e:	881b      	ldrh	r3, [r3, #0]
 8000330:	817b      	strh	r3, [r7, #10]
        OS_EXIT_CRITICAL();
 8000332:	68f8      	ldr	r0, [r7, #12]
 8000334:	f7ff ff42 	bl	80001bc <OS_CPU_SR_Restore>
        return (val);
 8000338:	897b      	ldrh	r3, [r7, #10]
 800033a:	e000      	b.n	800033e <DIGet+0x32>
    } else {
        return (0);                                        /* Return negated for invalid channel       */
 800033c:	2300      	movs	r3, #0
    }
}
 800033e:	4618      	mov	r0, r3
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	200012d0 	.word	0x200012d0

0800034c <DIIsTrig>:
*********************************************************************************************************
*/

#if DI_EDGE_EN
static  void  DIIsTrig (DIO_DI *pdi)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    BOOLEAN  trig;


    trig = FALSE;
 8000354:	2300      	movs	r3, #0
 8000356:	73fb      	strb	r3, [r7, #15]
    switch (pdi->DIModeSel) {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	799b      	ldrb	r3, [r3, #6]
 800035c:	2b06      	cmp	r3, #6
 800035e:	d01c      	beq.n	800039a <DIIsTrig+0x4e>
 8000360:	2b06      	cmp	r3, #6
 8000362:	dc32      	bgt.n	80003ca <DIIsTrig+0x7e>
 8000364:	2b04      	cmp	r3, #4
 8000366:	d002      	beq.n	800036e <DIIsTrig+0x22>
 8000368:	2b05      	cmp	r3, #5
 800036a:	d00b      	beq.n	8000384 <DIIsTrig+0x38>
 800036c:	e02d      	b.n	80003ca <DIIsTrig+0x7e>
        case DI_MODE_EDGE_LOW_GOING:                       /* Negative going edge                      */
             if (pdi->DIPrev == 1 && pdi->DIIn == 0) {
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	791b      	ldrb	r3, [r3, #4]
 8000372:	2b01      	cmp	r3, #1
 8000374:	d124      	bne.n	80003c0 <DIIsTrig+0x74>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d120      	bne.n	80003c0 <DIIsTrig+0x74>
                 trig = TRUE;
 800037e:	2301      	movs	r3, #1
 8000380:	73fb      	strb	r3, [r7, #15]
             }
             break;
 8000382:	e01d      	b.n	80003c0 <DIIsTrig+0x74>

        case DI_MODE_EDGE_HIGH_GOING:                      /* Positive going edge                      */
             if (pdi->DIPrev == 0 && pdi->DIIn == 1) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	791b      	ldrb	r3, [r3, #4]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d11b      	bne.n	80003c4 <DIIsTrig+0x78>
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b01      	cmp	r3, #1
 8000392:	d117      	bne.n	80003c4 <DIIsTrig+0x78>
                 trig = TRUE;
 8000394:	2301      	movs	r3, #1
 8000396:	73fb      	strb	r3, [r7, #15]
             }
             break;
 8000398:	e014      	b.n	80003c4 <DIIsTrig+0x78>

        case DI_MODE_EDGE_BOTH:                            /* Both positive and negative going         */
             if ((pdi->DIPrev == 1 && pdi->DIIn == 0) ||
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	791b      	ldrb	r3, [r3, #4]
 800039e:	2b01      	cmp	r3, #1
 80003a0:	d103      	bne.n	80003aa <DIIsTrig+0x5e>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d007      	beq.n	80003ba <DIIsTrig+0x6e>
                 (pdi->DIPrev == 0 && pdi->DIIn == 1)) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	791b      	ldrb	r3, [r3, #4]
             if ((pdi->DIPrev == 1 && pdi->DIIn == 0) ||
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d10a      	bne.n	80003c8 <DIIsTrig+0x7c>
                 (pdi->DIPrev == 0 && pdi->DIIn == 1)) {
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d106      	bne.n	80003c8 <DIIsTrig+0x7c>
                 trig = TRUE;
 80003ba:	2301      	movs	r3, #1
 80003bc:	73fb      	strb	r3, [r7, #15]
             }
             break;
 80003be:	e003      	b.n	80003c8 <DIIsTrig+0x7c>
             break;
 80003c0:	bf00      	nop
 80003c2:	e002      	b.n	80003ca <DIIsTrig+0x7e>
             break;
 80003c4:	bf00      	nop
 80003c6:	e000      	b.n	80003ca <DIIsTrig+0x7e>
             break;
 80003c8:	bf00      	nop
    }
    if (trig == TRUE) {                                    /* See if edge detected                     */
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d113      	bne.n	80003f8 <DIIsTrig+0xac>
        if (pdi->DITrigFnct != NULL) {                     /* Yes, see used defined a function         */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d005      	beq.n	80003e4 <DIIsTrig+0x98>
            (*pdi->DITrigFnct)(pdi->DITrigFnctArg);        /* Yes, execute the user function           */
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	687a      	ldr	r2, [r7, #4]
 80003de:	68d2      	ldr	r2, [r2, #12]
 80003e0:	4610      	mov	r0, r2
 80003e2:	4798      	blx	r3
        }
        if (pdi->DIVal < 255) {                            /* Increment number of edges counted        */
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	885b      	ldrh	r3, [r3, #2]
 80003e8:	2bfe      	cmp	r3, #254	; 0xfe
 80003ea:	d805      	bhi.n	80003f8 <DIIsTrig+0xac>
            pdi->DIVal++;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	885b      	ldrh	r3, [r3, #2]
 80003f0:	3301      	adds	r3, #1
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	805a      	strh	r2, [r3, #2]
        }
    }
    pdi->DIPrev = pdi->DIIn;                               /* Memorize previous input state            */
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781a      	ldrb	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	711a      	strb	r2, [r3, #4]
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <DIUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIUpdate (void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
    INT8U    i;
    DIO_DI  *pdi;


    pdi = &DITbl[0];
 800040e:	4b3f      	ldr	r3, [pc, #252]	; (800050c <DIUpdate+0x104>)
 8000410:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000412:	2300      	movs	r3, #0
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	e070      	b.n	80004fa <DIUpdate+0xf2>
        if (pdi->DIBypassEn == FALSE) {          /* See if discrete input channel is bypassed          */
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	795b      	ldrb	r3, [r3, #5]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d165      	bne.n	80004ec <DIUpdate+0xe4>
            switch (pdi->DIModeSel) {            /* No, process channel                                */
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	799b      	ldrb	r3, [r3, #6]
 8000424:	2b08      	cmp	r3, #8
 8000426:	d862      	bhi.n	80004ee <DIUpdate+0xe6>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <DIUpdate+0x28>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	08000455 	.word	0x08000455
 8000434:	0800045d 	.word	0x0800045d
 8000438:	08000465 	.word	0x08000465
 800043c:	08000471 	.word	0x08000471
 8000440:	08000489 	.word	0x08000489
 8000444:	08000489 	.word	0x08000489
 8000448:	08000489 	.word	0x08000489
 800044c:	08000491 	.word	0x08000491
 8000450:	080004bf 	.word	0x080004bf
                case DI_MODE_LOW:                /* Input is forced low                                */
                     pdi->DIVal = 0;
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	2200      	movs	r2, #0
 8000458:	805a      	strh	r2, [r3, #2]
                     break;
 800045a:	e048      	b.n	80004ee <DIUpdate+0xe6>

                case DI_MODE_HIGH:               /* Input is forced high                               */
                     pdi->DIVal = 1;
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	2201      	movs	r2, #1
 8000460:	805a      	strh	r2, [r3, #2]
                     break;
 8000462:	e044      	b.n	80004ee <DIUpdate+0xe6>

                case DI_MODE_DIRECT:                  /* Input is based on state of physical input     */
                     pdi->DIVal = (INT8U)pdi->DIIn;   /* Obtain the state of the sensor                */
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	b29a      	uxth	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	805a      	strh	r2, [r3, #2]
                     break;
 800046e:	e03e      	b.n	80004ee <DIUpdate+0xe6>

                case DI_MODE_INV:                /* Input is based on the complement state of input    */
                     pdi->DIVal = (INT8U)(pdi->DIIn ? 0 : 1);
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b00      	cmp	r3, #0
 8000476:	bf0c      	ite	eq
 8000478:	2301      	moveq	r3, #1
 800047a:	2300      	movne	r3, #0
 800047c:	b2db      	uxtb	r3, r3
 800047e:	b2db      	uxtb	r3, r3
 8000480:	b29a      	uxth	r2, r3
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	805a      	strh	r2, [r3, #2]
                     break;
 8000486:	e032      	b.n	80004ee <DIUpdate+0xe6>

#if DI_EDGE_EN
                case DI_MODE_EDGE_LOW_GOING:
                case DI_MODE_EDGE_HIGH_GOING:
                case DI_MODE_EDGE_BOTH:
                     DIIsTrig(pdi);              /* Handle edge triggered mode                         */
 8000488:	6838      	ldr	r0, [r7, #0]
 800048a:	f7ff ff5f 	bl	800034c <DIIsTrig>
                     break;
 800048e:	e02e      	b.n	80004ee <DIUpdate+0xe6>
#endif
/*$PAGE*/
                case DI_MODE_TOGGLE_LOW_GOING:
                     if (pdi->DIPrev == 1 && pdi->DIIn == 0) {
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d10d      	bne.n	80004b4 <DIUpdate+0xac>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d109      	bne.n	80004b4 <DIUpdate+0xac>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	885b      	ldrh	r3, [r3, #2]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	bf0c      	ite	eq
 80004a8:	2301      	moveq	r3, #1
 80004aa:	2300      	movne	r3, #0
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	b29a      	uxth	r2, r3
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	781a      	ldrb	r2, [r3, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	711a      	strb	r2, [r3, #4]
                     break;
 80004bc:	e017      	b.n	80004ee <DIUpdate+0xe6>

                case DI_MODE_TOGGLE_HIGH_GOING:
                     if (pdi->DIPrev == 0 && pdi->DIIn == 1) {
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d10d      	bne.n	80004e2 <DIUpdate+0xda>
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d109      	bne.n	80004e2 <DIUpdate+0xda>
                         pdi->DIVal = pdi->DIVal ? 0 : 1;
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	885b      	ldrh	r3, [r3, #2]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	bf0c      	ite	eq
 80004d6:	2301      	moveq	r3, #1
 80004d8:	2300      	movne	r3, #0
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	b29a      	uxth	r2, r3
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	805a      	strh	r2, [r3, #2]
                     }
                     pdi->DIPrev = pdi->DIIn;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	781a      	ldrb	r2, [r3, #0]
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	711a      	strb	r2, [r3, #4]
                     break;
 80004ea:	e000      	b.n	80004ee <DIUpdate+0xe6>
            }
        }
 80004ec:	bf00      	nop
        pdi++;                                   /* Point to next DIO_DO element                       */
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	3310      	adds	r3, #16
 80004f2:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DI; i++) {
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	3301      	adds	r3, #1
 80004f8:	71fb      	strb	r3, [r7, #7]
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b07      	cmp	r3, #7
 80004fe:	d98b      	bls.n	8000418 <DIUpdate+0x10>
    }
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200012d0 	.word	0x200012d0

08000510 <DIOInit>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIOInit (void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	; 0x28
 8000514:	af06      	add	r7, sp, #24
    INT8U    i;
    DIO_DI  *pdi;
    DIO_DO  *pdo;


    pdi = &DITbl[0];
 8000516:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <DIOInit+0xd0>)
 8000518:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e014      	b.n	800054a <DIOInit+0x3a>
        pdi->DIVal         = 0;
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	2200      	movs	r2, #0
 8000524:	805a      	strh	r2, [r3, #2]
        pdi->DIBypassEn    = FALSE;
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	2200      	movs	r2, #0
 800052a:	715a      	strb	r2, [r3, #5]
        pdi->DIModeSel     = DI_MODE_DIRECT;     /* Set the default mode to direct input               */
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	2202      	movs	r2, #2
 8000530:	719a      	strb	r2, [r3, #6]
#if DI_EDGE_EN
        pdi->DITrigFnct    = (void *)0;          /* No function to execute when transition detected    */
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
        pdi->DITrigFnctArg = (void *)0;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
#endif
        pdi++;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	3310      	adds	r3, #16
 8000542:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < DIO_MAX_DI; i++) {
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	3301      	adds	r3, #1
 8000548:	73fb      	strb	r3, [r7, #15]
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	2b07      	cmp	r3, #7
 800054e:	d9e7      	bls.n	8000520 <DIOInit+0x10>
    }
    pdo = &DOTbl[0];
 8000550:	4b24      	ldr	r3, [pc, #144]	; (80005e4 <DIOInit+0xd4>)
 8000552:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	73fb      	strb	r3, [r7, #15]
 8000558:	e01d      	b.n	8000596 <DIOInit+0x86>
        pdo->DOOut        = 0;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
        pdo->DOBypassEn   = FALSE;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2200      	movs	r2, #0
 8000564:	70da      	strb	r2, [r3, #3]
        pdo->DOModeSel    = DO_MODE_DIRECT;      /* Set the default mode to direct output              */
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2202      	movs	r2, #2
 800056a:	711a      	strb	r2, [r3, #4]
        pdo->DOInv        = FALSE;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2200      	movs	r2, #0
 8000570:	719a      	strb	r2, [r3, #6]
#if DO_BLINK_MODE_EN
        pdo->DOBlinkEnSel = DO_BLINK_EN_NORMAL;  /* Blinking is enabled by direct user request         */
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2201      	movs	r2, #1
 8000576:	715a      	strb	r2, [r3, #5]
        pdo->DOA          = 1;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2201      	movs	r2, #1
 800057c:	71da      	strb	r2, [r3, #7]
        pdo->DOB          = 2;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2202      	movs	r2, #2
 8000582:	721a      	strb	r2, [r3, #8]
        pdo->DOBCtr       = 2;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2202      	movs	r2, #2
 8000588:	725a      	strb	r2, [r3, #9]
#endif
        pdo++;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	330a      	adds	r3, #10
 800058e:	607b      	str	r3, [r7, #4]
    for (i = 0; i < DIO_MAX_DO; i++) {
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	3301      	adds	r3, #1
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	2b23      	cmp	r3, #35	; 0x23
 800059a:	d9de      	bls.n	800055a <DIOInit+0x4a>
    }
#if DO_BLINK_MODE_EN
    DOSyncCtrMax = 100;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <DIOInit+0xd8>)
 800059e:	2264      	movs	r2, #100	; 0x64
 80005a0:	701a      	strb	r2, [r3, #0]
#endif
    DIOInitIO();
 80005a2:	f000 f96f 	bl	8000884 <DIOInitIO>

    err = OSTaskCreateExt((void (*)(void *)) DIOTask,  /* Create the start task.                               */
 80005a6:	2303      	movs	r3, #3
 80005a8:	9304      	str	r3, [sp, #16]
 80005aa:	2300      	movs	r3, #0
 80005ac:	9303      	str	r3, [sp, #12]
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	9302      	str	r3, [sp, #8]
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <DIOInit+0xdc>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	230f      	movs	r3, #15
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	230f      	movs	r3, #15
 80005be:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <DIOInit+0xe0>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	480c      	ldr	r0, [pc, #48]	; (80005f4 <DIOInit+0xe4>)
 80005c4:	f008 f994 	bl	80088f0 <OSTaskCreateExt>
 80005c8:	4603      	mov	r3, r0
 80005ca:	70fb      	strb	r3, [r7, #3]
                          (OS_STK        * ) &DIOTaskStk[0],
                          (INT32U          ) DIO_TASK_STK_SIZE,
                          (void          * )0,
                          (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));
    
    OSTaskNameSet(DIO_TASK_PRIO, (CPU_INT08U *)"DIO Task", &err);    
 80005cc:	1cfb      	adds	r3, r7, #3
 80005ce:	461a      	mov	r2, r3
 80005d0:	4909      	ldr	r1, [pc, #36]	; (80005f8 <DIOInit+0xe8>)
 80005d2:	200f      	movs	r0, #15
 80005d4:	f008 faf0 	bl	8008bb8 <OSTaskNameSet>
    
//    OSTaskCreate(DIOTask, (void *)0, &DIOTaskStk[DIO_TASK_STK_SIZE], DIO_TASK_PRIO);
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	200012d0 	.word	0x200012d0
 80005e4:	20001350 	.word	0x20001350
 80005e8:	200012cd 	.word	0x200012cd
 80005ec:	20000294 	.word	0x20000294
 80005f0:	20000690 	.word	0x20000690
 80005f4:	080005fd 	.word	0x080005fd
 80005f8:	0800b55c 	.word	0x0800b55c

080005fc <DIOTask>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DIOTask (void *data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    data = data;                                      /* Avoid compiler warning (uC/OS requirement)    */
    for (;;) {
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 8000604:	2064      	movs	r0, #100	; 0x64
 8000606:	f008 fccf 	bl	8008fa8 <OSTimeDly>
        DIRd();                                       /* Read physical inputs and map to DI channels   */
 800060a:	f000 f941 	bl	8000890 <DIRd>
        DIUpdate();                                   /* Update all DI channels                        */
 800060e:	f7ff fefb 	bl	8000408 <DIUpdate>
        DOUpdate();                                   /* Update all DO channels                        */
 8000612:	f000 f8a9 	bl	8000768 <DOUpdate>
        DOWr();                                       /* Map DO channels to physical outputs           */
 8000616:	f000 f969 	bl	80008ec <DOWr>
        OSTimeDly(DIO_TASK_DLY_TICKS);                /* Delay between execution of DIO manager        */
 800061a:	e7f3      	b.n	8000604 <DIOTask+0x8>

0800061c <DOCfgBlink>:
*********************************************************************************************************
*/

#if  DO_BLINK_MODE_EN
void  DOCfgBlink (INT8U n, INT8U mode, INT8U a, INT8U b)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4604      	mov	r4, r0
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4623      	mov	r3, r4
 800062c:	71fb      	strb	r3, [r7, #7]
 800062e:	4603      	mov	r3, r0
 8000630:	71bb      	strb	r3, [r7, #6]
 8000632:	460b      	mov	r3, r1
 8000634:	717b      	strb	r3, [r7, #5]
 8000636:	4613      	mov	r3, r2
 8000638:	713b      	strb	r3, [r7, #4]
    DIO_DO  *pdo;
    CPU_SR   cpu_sr;

    if (n < DIO_MAX_DO) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b23      	cmp	r3, #35	; 0x23
 800063e:	d81a      	bhi.n	8000676 <DOCfgBlink+0x5a>
        pdo               = &DOTbl[n];
 8000640:	79fa      	ldrb	r2, [r7, #7]
 8000642:	4613      	mov	r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <DOCfgBlink+0x64>)
 800064c:	4413      	add	r3, r2
 800064e:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 8000650:	2040      	movs	r0, #64	; 0x40
 8000652:	f7ff fda5 	bl	80001a0 <OS_CPU_SR_Save>
 8000656:	60b8      	str	r0, [r7, #8]
        pdo->DOBlinkEnSel = mode;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	79ba      	ldrb	r2, [r7, #6]
 800065c:	715a      	strb	r2, [r3, #5]
        pdo->DOA          = a;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	797a      	ldrb	r2, [r7, #5]
 8000662:	71da      	strb	r2, [r3, #7]
        pdo->DOB          = b;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	793a      	ldrb	r2, [r7, #4]
 8000668:	721a      	strb	r2, [r3, #8]
        pdo->DOBCtr       = 0;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2200      	movs	r2, #0
 800066e:	725a      	strb	r2, [r3, #9]
        OS_EXIT_CRITICAL();
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f7ff fda3 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	bf00      	nop
 8000680:	20001350 	.word	0x20001350

08000684 <DOCfgMode>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOCfgMode (INT8U n, INT8U mode, BOOLEAN inv)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
 800068e:	460b      	mov	r3, r1
 8000690:	71bb      	strb	r3, [r7, #6]
 8000692:	4613      	mov	r3, r2
 8000694:	717b      	strb	r3, [r7, #5]
    DIO_DO  *pdo;
    CPU_SR  cpu_sr; 
    
    if (n < DIO_MAX_DO) {
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b23      	cmp	r3, #35	; 0x23
 800069a:	d814      	bhi.n	80006c6 <DOCfgMode+0x42>
        pdo            = &DOTbl[n];
 800069c:	79fa      	ldrb	r2, [r7, #7]
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <DOCfgMode+0x4c>)
 80006a8:	4413      	add	r3, r2
 80006aa:	60fb      	str	r3, [r7, #12]
        OS_ENTER_CRITICAL();
 80006ac:	2040      	movs	r0, #64	; 0x40
 80006ae:	f7ff fd77 	bl	80001a0 <OS_CPU_SR_Save>
 80006b2:	60b8      	str	r0, [r7, #8]
        pdo->DOModeSel = mode;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	711a      	strb	r2, [r3, #4]
        pdo->DOInv     = inv;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	797a      	ldrb	r2, [r7, #5]
 80006be:	719a      	strb	r2, [r3, #6]
        OS_EXIT_CRITICAL();
 80006c0:	68b8      	ldr	r0, [r7, #8]
 80006c2:	f7ff fd7b 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20001350 	.word	0x20001350

080006d4 <DOIsBlinkEn>:
*********************************************************************************************************
*/

#if DO_BLINK_MODE_EN
static  BOOLEAN  DOIsBlinkEn (DIO_DO *pdo)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
    BOOLEAN  en;


    en = FALSE;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
    switch (pdo->DOBlinkEnSel) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	795b      	ldrb	r3, [r3, #5]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d00d      	beq.n	8000704 <DOIsBlinkEn+0x30>
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	dc14      	bgt.n	8000716 <DOIsBlinkEn+0x42>
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <DOIsBlinkEn+0x22>
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d003      	beq.n	80006fc <DOIsBlinkEn+0x28>
 80006f4:	e00f      	b.n	8000716 <DOIsBlinkEn+0x42>
        case DO_BLINK_EN:                   /* Blink is always enabled                                 */
             en = TRUE;
 80006f6:	2301      	movs	r3, #1
 80006f8:	73fb      	strb	r3, [r7, #15]
             break;
 80006fa:	e00c      	b.n	8000716 <DOIsBlinkEn+0x42>

        case DO_BLINK_EN_NORMAL:            /* Blink depends on user request's state                   */
             en = pdo->DOBypass;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	789b      	ldrb	r3, [r3, #2]
 8000700:	73fb      	strb	r3, [r7, #15]
             break;
 8000702:	e008      	b.n	8000716 <DOIsBlinkEn+0x42>

        case DO_BLINK_EN_INV:               /* Blink depends on the complemented user request's state  */
             en = pdo->DOBypass ? FALSE : TRUE;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	789b      	ldrb	r3, [r3, #2]
 8000708:	2b00      	cmp	r3, #0
 800070a:	bf0c      	ite	eq
 800070c:	2301      	moveq	r3, #1
 800070e:	2300      	movne	r3, #0
 8000710:	b2db      	uxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]
             break;
 8000714:	bf00      	nop
    }
    return (en);
 8000716:	7bfb      	ldrb	r3, [r7, #15]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
	...

08000724 <DOSet>:
* Notes       : The actual output will be complemented if 'DIInv' is set to TRUE.
*********************************************************************************************************
*/

void  DOSet (INT8U n, BOOLEAN state)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	460a      	mov	r2, r1
 800072e:	71fb      	strb	r3, [r7, #7]
 8000730:	4613      	mov	r3, r2
 8000732:	71bb      	strb	r3, [r7, #6]
  CPU_SR   cpu_sr; 
  
    if (n < DIO_MAX_DO) {
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	2b23      	cmp	r3, #35	; 0x23
 8000738:	d810      	bhi.n	800075c <DOSet+0x38>
        OS_ENTER_CRITICAL();
 800073a:	2040      	movs	r0, #64	; 0x40
 800073c:	f7ff fd30 	bl	80001a0 <OS_CPU_SR_Save>
 8000740:	60f8      	str	r0, [r7, #12]
        DOTbl[n].DOCtrl = state;
 8000742:	79fa      	ldrb	r2, [r7, #7]
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <DOSet+0x40>)
 8000746:	4613      	mov	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	440b      	add	r3, r1
 8000750:	3301      	adds	r3, #1
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff fd30 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 800075c:	bf00      	nop
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20001350 	.word	0x20001350

08000768 <DOUpdate>:
* Returns     : None.
*********************************************************************************************************
*/

static  void  DOUpdate (void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
    INT8U     i;
    BOOLEAN   out;
    DIO_DO   *pdo;


    pdo = &DOTbl[0];
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <DOUpdate+0x110>)
 8000770:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]
 8000776:	e068      	b.n	800084a <DOUpdate+0xe2>
        if (pdo->DOBypassEn == FALSE) {          /* See if DO channel is enabled                       */
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	78db      	ldrb	r3, [r3, #3]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d103      	bne.n	8000788 <DOUpdate+0x20>
            pdo->DOBypass = pdo->DOCtrl;         /* Obtain control state from application              */
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	785a      	ldrb	r2, [r3, #1]
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	709a      	strb	r2, [r3, #2]
        }
        out = FALSE;                             /* Assume that the output will be low unless changed  */
 8000788:	2300      	movs	r3, #0
 800078a:	71bb      	strb	r3, [r7, #6]
        switch (pdo->DOModeSel) {
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	2b04      	cmp	r3, #4
 8000792:	d843      	bhi.n	800081c <DOUpdate+0xb4>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <DOUpdate+0x34>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	0800081d 	.word	0x0800081d
 80007a0:	080007b1 	.word	0x080007b1
 80007a4:	080007b7 	.word	0x080007b7
 80007a8:	080007bf 	.word	0x080007bf
 80007ac:	080007dd 	.word	0x080007dd
            case DO_MODE_LOW:                    /* Output will in fact be low                         */
                 break;

            case DO_MODE_HIGH:                   /* Output will be high                                */
                 out = TRUE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	71bb      	strb	r3, [r7, #6]
                 break;
 80007b4:	e032      	b.n	800081c <DOUpdate+0xb4>

            case DO_MODE_DIRECT:                 /* Output is based on state of user supplied state    */
                 out = pdo->DOBypass;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	71bb      	strb	r3, [r7, #6]
                 break;
 80007bc:	e02e      	b.n	800081c <DOUpdate+0xb4>
/*$PAGE*/
#if DO_BLINK_MODE_EN
            case DO_MODE_BLINK_SYNC:                       /* Sync. Blink mode                         */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 80007be:	6838      	ldr	r0, [r7, #0]
 80007c0:	f7ff ff88 	bl	80006d4 <DOIsBlinkEn>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d027      	beq.n	800081a <DOUpdate+0xb2>
                     if (pdo->DOA >= DOSyncCtr) {          /* ... yes, High when below threshold       */
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	79da      	ldrb	r2, [r3, #7]
 80007ce:	4b2b      	ldr	r3, [pc, #172]	; (800087c <DOUpdate+0x114>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d321      	bcc.n	800081a <DOUpdate+0xb2>
                         out = TRUE;
 80007d6:	2301      	movs	r3, #1
 80007d8:	71bb      	strb	r3, [r7, #6]
                     }
                 }
                 break;
 80007da:	e01e      	b.n	800081a <DOUpdate+0xb2>

            case DO_MODE_BLINK_ASYNC:                      /* Async. Blink mode                        */
                 if (DOIsBlinkEn(pdo)) {                   /* See if Blink is enabled ...              */
 80007dc:	6838      	ldr	r0, [r7, #0]
 80007de:	f7ff ff79 	bl	80006d4 <DOIsBlinkEn>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <DOUpdate+0x90>
                     if (pdo->DOA >= pdo->DOBCtr) {        /* ... yes, High when below threshold       */
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	79da      	ldrb	r2, [r3, #7]
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d301      	bcc.n	80007f8 <DOUpdate+0x90>
                         out = TRUE;
 80007f4:	2301      	movs	r3, #1
 80007f6:	71bb      	strb	r3, [r7, #6]
                     }
                 }
                 if (pdo->DOBCtr < pdo->DOB) {             /* Update the threshold counter             */
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	7a5a      	ldrb	r2, [r3, #9]
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	7a1b      	ldrb	r3, [r3, #8]
 8000800:	429a      	cmp	r2, r3
 8000802:	d206      	bcs.n	8000812 <DOUpdate+0xaa>
                     pdo->DOBCtr++;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	7a5b      	ldrb	r3, [r3, #9]
 8000808:	3301      	adds	r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	725a      	strb	r2, [r3, #9]
                 } else {
                     pdo->DOBCtr = 0;
                 }
                 break;
 8000810:	e004      	b.n	800081c <DOUpdate+0xb4>
                     pdo->DOBCtr = 0;
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	725a      	strb	r2, [r3, #9]
                 break;
 8000818:	e000      	b.n	800081c <DOUpdate+0xb4>
                 break;
 800081a:	bf00      	nop
#endif
        }
        if (pdo->DOInv == TRUE) {                          /* See if output needs to be inverted ...   */
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d109      	bne.n	8000838 <DOUpdate+0xd0>
            pdo->DOOut = out ? FALSE : TRUE;               /* ... yes, complement output               */
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
 8000830:	461a      	mov	r2, r3
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e002      	b.n	800083e <DOUpdate+0xd6>
        } else {
            pdo->DOOut = out;                              /* ... no,  no inversion!                   */
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	701a      	strb	r2, [r3, #0]
        }
        pdo++;                                             /* Point to next DIO_DO element             */
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	330a      	adds	r3, #10
 8000842:	603b      	str	r3, [r7, #0]
    for (i = 0; i < DIO_MAX_DO; i++) {           /* Process all discrete output channels               */
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	3301      	adds	r3, #1
 8000848:	71fb      	strb	r3, [r7, #7]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b23      	cmp	r3, #35	; 0x23
 800084e:	d993      	bls.n	8000778 <DOUpdate+0x10>
    }
#if DO_BLINK_MODE_EN
    if (DOSyncCtr < DOSyncCtrMax) {                        /* Update the synchronous free running ctr  */
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <DOUpdate+0x114>)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <DOUpdate+0x118>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	429a      	cmp	r2, r3
 800085a:	d206      	bcs.n	800086a <DOUpdate+0x102>
        DOSyncCtr++;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <DOUpdate+0x114>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <DOUpdate+0x114>)
 8000866:	701a      	strb	r2, [r3, #0]
    } else {
        DOSyncCtr = 0;
    }
#endif
}
 8000868:	e002      	b.n	8000870 <DOUpdate+0x108>
        DOSyncCtr = 0;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <DOUpdate+0x114>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20001350 	.word	0x20001350
 800087c:	200012cc 	.word	0x200012cc
 8000880:	200012cd 	.word	0x200012cd

08000884 <DIOInitIO>:
*                   Port C = OUT  (not used)
*********************************************************************************************************
*/

void  DIOInitIO (void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
//    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
//
//    gpio_init.GPIO_Pin  = DEF_BIT_12 | DEF_BIT_13 | DEF_BIT_14 | DEF_BIT_15;
//    gpio_init.GPIO_Mode = GPIO_Mode_IN_FLOATING;
//    GPIO_Init(GPIOB, &gpio_init);
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <DIRd>:
* Returns     : None.
*********************************************************************************************************
*/

void  DIRd (void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
    INT16U    in;
    INT16U    msk;

/************************************** BLUEPILL SPECIFIC CONFIGS ***************************************/
    /* PORT A */
    pdi = &DITbl[0];                                       /* Point at beginning of discrete inputs    */
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <DIRd+0x54>)
 8000898:	60fb      	str	r3, [r7, #12]
    msk = 0x01;                                            /* Set mask to extract bit 0                */
 800089a:	2301      	movs	r3, #1
 800089c:	813b      	strh	r3, [r7, #8]
    in = GPIOA->IDR;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <DIRd+0x58>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	80fb      	strh	r3, [r7, #6]
    for (i = 0; i < 16; i++) {                              /* Map all 8 bits to first 8 DI channels    */
 80008a4:	2300      	movs	r3, #0
 80008a6:	72fb      	strb	r3, [r7, #11]
 80008a8:	e013      	b.n	80008d2 <DIRd+0x42>
        pdi->DIIn   = (BOOLEAN)((in & msk) ? 1 : 0);
 80008aa:	88fa      	ldrh	r2, [r7, #6]
 80008ac:	893b      	ldrh	r3, [r7, #8]
 80008ae:	4013      	ands	r3, r2
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <DIRd+0x2a>
 80008b6:	2201      	movs	r2, #1
 80008b8:	e000      	b.n	80008bc <DIRd+0x2c>
 80008ba:	2200      	movs	r2, #0
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	701a      	strb	r2, [r3, #0]
        msk       <<= 1;
 80008c0:	893b      	ldrh	r3, [r7, #8]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	813b      	strh	r3, [r7, #8]
        pdi++;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	3310      	adds	r3, #16
 80008ca:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 16; i++) {                              /* Map all 8 bits to first 8 DI channels    */
 80008cc:	7afb      	ldrb	r3, [r7, #11]
 80008ce:	3301      	adds	r3, #1
 80008d0:	72fb      	strb	r3, [r7, #11]
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d9e8      	bls.n	80008aa <DIRd+0x1a>

    /* PORT B */

    /* PORT C */

}
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	200012d0 	.word	0x200012d0
 80008e8:	40010800 	.word	0x40010800

080008ec <DOWr>:
* Returns     : None.
*********************************************************************************************************
*/

void  DOWr (void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
    INT8U    i;
    INT16U    out;
    INT16U    msk;


    pdo = &DOTbl[32];                        /* Point at first discrete output channel                  */
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <DOWr+0x54>)
 80008f4:	60fb      	str	r3, [r7, #12]
    msk = 0x2000;                             /* First DO will be mapped to bit 0                        */
 80008f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fa:	80fb      	strh	r3, [r7, #6]
    out = 0x00;                             /* Local 8 bit port image                                  */
 80008fc:	2300      	movs	r3, #0
 80008fe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < 3; i++) {               /* Map first 8 DO to 8 bit port image                      */
 8000900:	2300      	movs	r3, #0
 8000902:	72fb      	strb	r3, [r7, #11]
 8000904:	e010      	b.n	8000928 <DOWr+0x3c>
        if (pdo->DOOut == TRUE) {
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d103      	bne.n	8000916 <DOWr+0x2a>
            out |= msk;
 800090e:	893a      	ldrh	r2, [r7, #8]
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	4313      	orrs	r3, r2
 8000914:	813b      	strh	r3, [r7, #8]
        }
        msk <<= 1;
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	80fb      	strh	r3, [r7, #6]
        pdo++;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	330a      	adds	r3, #10
 8000920:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 3; i++) {               /* Map first 8 DO to 8 bit port image                      */
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	3301      	adds	r3, #1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	7afb      	ldrb	r3, [r7, #11]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d9eb      	bls.n	8000906 <DOWr+0x1a>
    }
    
//    GPIO_Write(GPIOC, (INT16U) out);
    GPIOC->ODR = (INT16U) out;
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <DOWr+0x58>)
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	60d3      	str	r3, [r2, #12]
    
//    outp(0x0300, out);                      /* Output port image to physical port                      */
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20001490 	.word	0x20001490
 8000944:	40011000 	.word	0x40011000

08000948 <Kbchecktask>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Kbchecktask (void *p_arg)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	(void)p_arg ;
	int16_t data[4];
	BOOLEAN output_mode = 0 ;
 8000950:	2300      	movs	r3, #0
 8000952:	75fb      	strb	r3, [r7, #23]
	BOOLEAN frequency_meter_en = 0 ;
 8000954:	2300      	movs	r3, #0
 8000956:	75bb      	strb	r3, [r7, #22]
	uint8_t enabled_seq = 0 ;
 8000958:	2300      	movs	r3, #0
 800095a:	757b      	strb	r3, [r7, #21]
	uint16_t sin_freq = 50;
 800095c:	2332      	movs	r3, #50	; 0x32
 800095e:	827b      	strh	r3, [r7, #18]
	uint16_t prescaler = 562;
 8000960:	f240 2332 	movw	r3, #562	; 0x232
 8000964:	823b      	strh	r3, [r7, #16]

	while (DEF_TRUE){

		/* Checking keyboard related inputs and applying configurations selected by the user */

		if(DIGet(DIO_PA0)){										/* Enable sine generation or low freq sequences */
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fcd0 	bl	800030c <DIGet>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d030      	beq.n	80009d4 <Kbchecktask+0x8c>
			output_mode = ~output_mode ;
 8000972:	7dfb      	ldrb	r3, [r7, #23]
 8000974:	43db      	mvns	r3, r3
 8000976:	75fb      	strb	r3, [r7, #23]
			if(output_mode){
 8000978:	7dfb      	ldrb	r3, [r7, #23]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00e      	beq.n	800099c <Kbchecktask+0x54>
				HAL_TIM_Base_Start_IT(&htim4);
 800097e:	485f      	ldr	r0, [pc, #380]	; (8000afc <Kbchecktask+0x1b4>)
 8000980:	f003 f94c 	bl	8003c1c <HAL_TIM_Base_Start_IT>
				DOSet(DIO_PC13, FALSE);
 8000984:	2100      	movs	r1, #0
 8000986:	2020      	movs	r0, #32
 8000988:	f7ff fecc 	bl	8000724 <DOSet>
				DOSet(DIO_PC14, FALSE);
 800098c:	2100      	movs	r1, #0
 800098e:	2021      	movs	r0, #33	; 0x21
 8000990:	f7ff fec8 	bl	8000724 <DOSet>
				DOSet(DIO_PC15, FALSE);
 8000994:	2100      	movs	r1, #0
 8000996:	2022      	movs	r0, #34	; 0x22
 8000998:	f7ff fec4 	bl	8000724 <DOSet>
			}
			if(!output_mode){
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d118      	bne.n	80009d4 <Kbchecktask+0x8c>
				HAL_TIM_Base_Stop_IT(&htim4);
 80009a2:	4856      	ldr	r0, [pc, #344]	; (8000afc <Kbchecktask+0x1b4>)
 80009a4:	f003 f98c 	bl	8003cc0 <HAL_TIM_Base_Stop_IT>
				switch(enabled_seq){
 80009a8:	7d7b      	ldrb	r3, [r7, #21]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d00e      	beq.n	80009cc <Kbchecktask+0x84>
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	dc11      	bgt.n	80009d6 <Kbchecktask+0x8e>
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <Kbchecktask+0x74>
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d004      	beq.n	80009c4 <Kbchecktask+0x7c>
 80009ba:	e00c      	b.n	80009d6 <Kbchecktask+0x8e>
					case 0:
						OSTaskResume(APP_CFG_SEQ1TASK_PRIO) ;
 80009bc:	2005      	movs	r0, #5
 80009be:	f008 f955 	bl	8008c6c <OSTaskResume>
						break ;
 80009c2:	e008      	b.n	80009d6 <Kbchecktask+0x8e>
					case 1:
						OSTaskResume(APP_CFG_SEQ2TASK_PRIO) ;
 80009c4:	2006      	movs	r0, #6
 80009c6:	f008 f951 	bl	8008c6c <OSTaskResume>
						break ;
 80009ca:	e004      	b.n	80009d6 <Kbchecktask+0x8e>
					case 2:
						OSTaskResume(APP_CFG_SEQ3TASK_PRIO) ;
 80009cc:	2007      	movs	r0, #7
 80009ce:	f008 f94d 	bl	8008c6c <OSTaskResume>
						break ;
 80009d2:	e000      	b.n	80009d6 <Kbchecktask+0x8e>
				}
			}
 80009d4:	bf00      	nop
		}

		if(DIGet(DIO_PA1) && !output_mode){						/* Selects between 3 defined low freq sequences */
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff fc98 	bl	800030c <DIGet>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d020      	beq.n	8000a24 <Kbchecktask+0xdc>
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d11d      	bne.n	8000a24 <Kbchecktask+0xdc>
			enabled_seq++ ;
 80009e8:	7d7b      	ldrb	r3, [r7, #21]
 80009ea:	3301      	adds	r3, #1
 80009ec:	757b      	strb	r3, [r7, #21]
			if(enabled_seq>2) enabled_seq = 0 ;
 80009ee:	7d7b      	ldrb	r3, [r7, #21]
 80009f0:	2b02      	cmp	r3, #2
 80009f2:	d901      	bls.n	80009f8 <Kbchecktask+0xb0>
 80009f4:	2300      	movs	r3, #0
 80009f6:	757b      	strb	r3, [r7, #21]
			switch(enabled_seq){
 80009f8:	7d7b      	ldrb	r3, [r7, #21]
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d00e      	beq.n	8000a1c <Kbchecktask+0xd4>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	dc11      	bgt.n	8000a26 <Kbchecktask+0xde>
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <Kbchecktask+0xc4>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d004      	beq.n	8000a14 <Kbchecktask+0xcc>
 8000a0a:	e00c      	b.n	8000a26 <Kbchecktask+0xde>
				case 0:
					OSTaskResume(APP_CFG_SEQ1TASK_PRIO) ;
 8000a0c:	2005      	movs	r0, #5
 8000a0e:	f008 f92d 	bl	8008c6c <OSTaskResume>
					break ;
 8000a12:	e008      	b.n	8000a26 <Kbchecktask+0xde>
				case 1:
					OSTaskResume(APP_CFG_SEQ2TASK_PRIO) ;
 8000a14:	2006      	movs	r0, #6
 8000a16:	f008 f929 	bl	8008c6c <OSTaskResume>
					break ;
 8000a1a:	e004      	b.n	8000a26 <Kbchecktask+0xde>
				case 2:
					OSTaskResume(APP_CFG_SEQ3TASK_PRIO) ;
 8000a1c:	2007      	movs	r0, #7
 8000a1e:	f008 f925 	bl	8008c6c <OSTaskResume>
					break ;
 8000a22:	e000      	b.n	8000a26 <Kbchecktask+0xde>
			}
		}
 8000a24:	bf00      	nop

		if(DIGet(DIO_PA2) && output_mode){						/* Increases sine frequency by changing timer prescaler */
 8000a26:	2002      	movs	r0, #2
 8000a28:	f7ff fc70 	bl	800030c <DIGet>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d013      	beq.n	8000a5a <Kbchecktask+0x112>
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d010      	beq.n	8000a5a <Kbchecktask+0x112>
			if(sin_freq < 500) sin_freq += 50;
 8000a38:	8a7b      	ldrh	r3, [r7, #18]
 8000a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a3e:	d202      	bcs.n	8000a46 <Kbchecktask+0xfe>
 8000a40:	8a7b      	ldrh	r3, [r7, #18]
 8000a42:	3332      	adds	r3, #50	; 0x32
 8000a44:	827b      	strh	r3, [r7, #18]
			/* Prescaler = 72MHz/(256*10*sinfreq)
			 * 72MHz -> timer frequency
			 * 256 -> number of signal steps
			 * 10 -> Timer counter period
			 * */
			prescaler = 28125/sin_freq;
 8000a46:	8a7b      	ldrh	r3, [r7, #18]
 8000a48:	f646 52dd 	movw	r2, #28125	; 0x6ddd
 8000a4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a50:	823b      	strh	r3, [r7, #16]
			__HAL_TIM_SET_PRESCALER(&htim4, prescaler);
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <Kbchecktask+0x1b4>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	8a3a      	ldrh	r2, [r7, #16]
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if(DIGet(DIO_PA3) && output_mode){						/* Decreases sine frequency by changing timer prescaler */
 8000a5a:	2003      	movs	r0, #3
 8000a5c:	f7ff fc56 	bl	800030c <DIGet>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d012      	beq.n	8000a8c <Kbchecktask+0x144>
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d00f      	beq.n	8000a8c <Kbchecktask+0x144>
			if(sin_freq>50) sin_freq -= 50;
 8000a6c:	8a7b      	ldrh	r3, [r7, #18]
 8000a6e:	2b32      	cmp	r3, #50	; 0x32
 8000a70:	d902      	bls.n	8000a78 <Kbchecktask+0x130>
 8000a72:	8a7b      	ldrh	r3, [r7, #18]
 8000a74:	3b32      	subs	r3, #50	; 0x32
 8000a76:	827b      	strh	r3, [r7, #18]
			prescaler = 28125/sin_freq;
 8000a78:	8a7b      	ldrh	r3, [r7, #18]
 8000a7a:	f646 52dd 	movw	r2, #28125	; 0x6ddd
 8000a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000a82:	823b      	strh	r3, [r7, #16]
			__HAL_TIM_SET_PRESCALER(&htim4, prescaler);
 8000a84:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <Kbchecktask+0x1b4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	8a3a      	ldrh	r2, [r7, #16]
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if(DIGet(DIO_PA4)){										/* Enable/disables frequency meter */
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f7ff fc3d 	bl	800030c <DIGet>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d016      	beq.n	8000ac6 <Kbchecktask+0x17e>
			frequency_meter_en = ~frequency_meter_en ;
 8000a98:	7dbb      	ldrb	r3, [r7, #22]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	75bb      	strb	r3, [r7, #22]
			if(frequency_meter_en){
 8000a9e:	7dbb      	ldrb	r3, [r7, #22]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d006      	beq.n	8000ab2 <Kbchecktask+0x16a>
				HAL_TIM_Base_Start_IT(&htim3);
 8000aa4:	4816      	ldr	r0, [pc, #88]	; (8000b00 <Kbchecktask+0x1b8>)
 8000aa6:	f003 f8b9 	bl	8003c1c <HAL_TIM_Base_Start_IT>
				HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <Kbchecktask+0x1b8>)
 8000aae:	f003 f985 	bl	8003dbc <HAL_TIM_IC_Start_IT>
			}
			if(!frequency_meter_en){
 8000ab2:	7dbb      	ldrb	r3, [r7, #22]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d106      	bne.n	8000ac6 <Kbchecktask+0x17e>
				HAL_TIM_Base_Stop_IT(&htim3);
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <Kbchecktask+0x1b8>)
 8000aba:	f003 f901 	bl	8003cc0 <HAL_TIM_Base_Stop_IT>
				HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000abe:	2100      	movs	r1, #0
 8000ac0:	480f      	ldr	r0, [pc, #60]	; (8000b00 <Kbchecktask+0x1b8>)
 8000ac2:	f003 fa81 	bl	8003fc8 <HAL_TIM_IC_Stop_IT>
			}
		}

		/* Sending info to displaytask */
		data[0] = output_mode;
 8000ac6:	7dfb      	ldrb	r3, [r7, #23]
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	813b      	strh	r3, [r7, #8]
		data[1] = frequency_meter_en;
 8000acc:	7dbb      	ldrb	r3, [r7, #22]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	817b      	strh	r3, [r7, #10]
		data[2] = enabled_seq;
 8000ad2:	7d7b      	ldrb	r3, [r7, #21]
 8000ad4:	b21b      	sxth	r3, r3
 8000ad6:	81bb      	strh	r3, [r7, #12]
		data[3] = sin_freq;
 8000ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000adc:	81fb      	strh	r3, [r7, #14]

		OSMboxPostOpt(statusMbox, (void *) &data, OS_POST_OPT_NONE);
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <Kbchecktask+0x1bc>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f007 fd19 	bl	8008520 <OSMboxPostOpt>

		OSTimeDlyHMSM(0u, 0u, 0u, 150u) ;
 8000aee:	2396      	movs	r3, #150	; 0x96
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	f008 faab 	bl	8009050 <OSTimeDlyHMSM>
		if(DIGet(DIO_PA0)){										/* Enable sine generation or low freq sequences */
 8000afa:	e734      	b.n	8000966 <Kbchecktask+0x1e>
 8000afc:	200014b8 	.word	0x200014b8
 8000b00:	20001500 	.word	0x20001500
 8000b04:	20001548 	.word	0x20001548

08000b08 <Seq1Task>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Seq1Task (void *p_arg)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	(void)p_arg;
	while (DEF_TRUE){
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000b10:	20ff      	movs	r0, #255	; 0xff
 8000b12:	f008 f995 	bl	8008e40 <OSTaskSuspend>
		DOCfgBlink(DIO_PC13, DO_BLINK_EN_NORMAL, 1, 2);
 8000b16:	2302      	movs	r3, #2
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	2020      	movs	r0, #32
 8000b1e:	f7ff fd7d 	bl	800061c <DOCfgBlink>
		DOCfgBlink(DIO_PC14, DO_BLINK_EN_NORMAL, 2, 4);
 8000b22:	2304      	movs	r3, #4
 8000b24:	2202      	movs	r2, #2
 8000b26:	2101      	movs	r1, #1
 8000b28:	2021      	movs	r0, #33	; 0x21
 8000b2a:	f7ff fd77 	bl	800061c <DOCfgBlink>
		DOSet(DIO_PC13, TRUE);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2020      	movs	r0, #32
 8000b32:	f7ff fdf7 	bl	8000724 <DOSet>
		DOSet(DIO_PC14, TRUE);
 8000b36:	2101      	movs	r1, #1
 8000b38:	2021      	movs	r0, #33	; 0x21
 8000b3a:	f7ff fdf3 	bl	8000724 <DOSet>
		DOSet(DIO_PC15, FALSE);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2022      	movs	r0, #34	; 0x22
 8000b42:	f7ff fdef 	bl	8000724 <DOSet>
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000b46:	e7e3      	b.n	8000b10 <Seq1Task+0x8>

08000b48 <Seq2Task>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Seq2Task (void *p_arg)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	(void)p_arg;
	while (DEF_TRUE){
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000b50:	20ff      	movs	r0, #255	; 0xff
 8000b52:	f008 f975 	bl	8008e40 <OSTaskSuspend>
		DOCfgBlink(DIO_PC13, DO_BLINK_EN_NORMAL, 1, 2);
 8000b56:	2302      	movs	r3, #2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2020      	movs	r0, #32
 8000b5e:	f7ff fd5d 	bl	800061c <DOCfgBlink>
		DOCfgBlink(DIO_PC14, DO_BLINK_EN_NORMAL, 2, 4);
 8000b62:	2304      	movs	r3, #4
 8000b64:	2202      	movs	r2, #2
 8000b66:	2101      	movs	r1, #1
 8000b68:	2021      	movs	r0, #33	; 0x21
 8000b6a:	f7ff fd57 	bl	800061c <DOCfgBlink>
		DOCfgBlink(DIO_PC15, DO_BLINK_EN_NORMAL, 3, 4);
 8000b6e:	2304      	movs	r3, #4
 8000b70:	2203      	movs	r2, #3
 8000b72:	2101      	movs	r1, #1
 8000b74:	2022      	movs	r0, #34	; 0x22
 8000b76:	f7ff fd51 	bl	800061c <DOCfgBlink>
		DOSet(DIO_PC13, TRUE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2020      	movs	r0, #32
 8000b7e:	f7ff fdd1 	bl	8000724 <DOSet>
		DOSet(DIO_PC14, TRUE);
 8000b82:	2101      	movs	r1, #1
 8000b84:	2021      	movs	r0, #33	; 0x21
 8000b86:	f7ff fdcd 	bl	8000724 <DOSet>
		DOSet(DIO_PC15, TRUE);
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	2022      	movs	r0, #34	; 0x22
 8000b8e:	f7ff fdc9 	bl	8000724 <DOSet>
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000b92:	e7dd      	b.n	8000b50 <Seq2Task+0x8>

08000b94 <Seq3Task>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Seq3Task (void *p_arg)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	(void)p_arg;
	while (DEF_TRUE){
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000b9c:	20ff      	movs	r0, #255	; 0xff
 8000b9e:	f008 f94f 	bl	8008e40 <OSTaskSuspend>
		DOCfgBlink(DIO_PC13, DO_BLINK_EN_NORMAL, 2, 4);
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	2202      	movs	r2, #2
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2020      	movs	r0, #32
 8000baa:	f7ff fd37 	bl	800061c <DOCfgBlink>
		DOCfgBlink(DIO_PC14, DO_BLINK_EN_NORMAL, 3, 6);
 8000bae:	2306      	movs	r3, #6
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2021      	movs	r0, #33	; 0x21
 8000bb6:	f7ff fd31 	bl	800061c <DOCfgBlink>
		DOCfgBlink(DIO_PC15, DO_BLINK_EN_NORMAL, 4, 7);
 8000bba:	2307      	movs	r3, #7
 8000bbc:	2204      	movs	r2, #4
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2022      	movs	r0, #34	; 0x22
 8000bc2:	f7ff fd2b 	bl	800061c <DOCfgBlink>
		DOSet(DIO_PC13, TRUE);
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	2020      	movs	r0, #32
 8000bca:	f7ff fdab 	bl	8000724 <DOSet>
		DOSet(DIO_PC14, TRUE);
 8000bce:	2101      	movs	r1, #1
 8000bd0:	2021      	movs	r0, #33	; 0x21
 8000bd2:	f7ff fda7 	bl	8000724 <DOSet>
		DOSet(DIO_PC15, TRUE);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2022      	movs	r0, #34	; 0x22
 8000bda:	f7ff fda3 	bl	8000724 <DOSet>
		OSTaskSuspend(OS_PRIO_SELF) ;
 8000bde:	e7dd      	b.n	8000b9c <Seq3Task+0x8>

08000be0 <Statshowtask>:
* Note(s)     : none.
*********************************************************************************************************
*/

static void Statshowtask (void *p_arg)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	CPU_INT08U err;
	uint16_t *p;
	u_int32_t *p1;

	while (DEF_TRUE){
		p = OSMboxPend(statusMbox, 0, &err);
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <Statshowtask+0x78>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f107 020f 	add.w	r2, r7, #15
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f007 fbec 	bl	80083d0 <OSMboxPend>
 8000bf8:	6178      	str	r0, [r7, #20]
		output_mode = *p;
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <Statshowtask+0x7c>)
 8000c00:	801a      	strh	r2, [r3, #0]
		frequencymeter_en = *(p+1);
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	885a      	ldrh	r2, [r3, #2]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <Statshowtask+0x80>)
 8000c08:	801a      	strh	r2, [r3, #0]
		seq_number = *(p+2);
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	889a      	ldrh	r2, [r3, #4]
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <Statshowtask+0x84>)
 8000c10:	801a      	strh	r2, [r3, #0]

		if(output_mode){
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <Statshowtask+0x7c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d004      	beq.n	8000c24 <Statshowtask+0x44>
			sin_gen_freq = *(p+3);
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	88da      	ldrh	r2, [r3, #6]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <Statshowtask+0x88>)
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	e002      	b.n	8000c2a <Statshowtask+0x4a>
		}
		else sin_gen_freq = 0;
 8000c24:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <Statshowtask+0x88>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]

		if(frequencymeter_en){
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <Statshowtask+0x80>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00d      	beq.n	8000c4e <Statshowtask+0x6e>
			p1 = OSMboxPend(measuredfreqMbox, 50, &err);
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <Statshowtask+0x8c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f107 020f 	add.w	r2, r7, #15
 8000c3a:	2132      	movs	r1, #50	; 0x32
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f007 fbc7 	bl	80083d0 <OSMboxPend>
 8000c42:	6138      	str	r0, [r7, #16]
			measured_freq = *p1;
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a09      	ldr	r2, [pc, #36]	; (8000c70 <Statshowtask+0x90>)
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e7cc      	b.n	8000be8 <Statshowtask+0x8>
		}
		else measured_freq = 0;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <Statshowtask+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
		p = OSMboxPend(statusMbox, 0, &err);
 8000c54:	e7c8      	b.n	8000be8 <Statshowtask+0x8>
 8000c56:	bf00      	nop
 8000c58:	20001548 	.word	0x20001548
 8000c5c:	20001758 	.word	0x20001758
 8000c60:	2000175a 	.word	0x2000175a
 8000c64:	20001552 	.word	0x20001552
 8000c68:	20001550 	.word	0x20001550
 8000c6c:	2000154c 	.word	0x2000154c
 8000c70:	20001754 	.word	0x20001754

08000c74 <StartupTask>:
* Note(s)     : none.
*********************************************************************************************************
*/

void StartupTask (void *p_arg)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 CPU_INT32U cpu_clk;
 (void)p_arg;
 cpu_clk = HAL_RCC_GetHCLKFreq();
 8000c7c:	f002 fe8c 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 8000c80:	60f8      	str	r0, [r7, #12]
 /* Initialize and enable System Tick timer */
 OS_CPU_SysTickInitFreq(cpu_clk);
 8000c82:	68f8      	ldr	r0, [r7, #12]
 8000c84:	f006 fbb2 	bl	80073ec <OS_CPU_SysTickInitFreq>

 #if (OS_TASK_STAT_EN > 0)
  OSStatInit();													/* Determine CPU capacity.                              */
 8000c88:	f006 fd40 	bl	800770c <OSStatInit>
 #endif

 DIOInit();
 8000c8c:	f7ff fc40 	bl	8000510 <DIOInit>

 App_EventCreate();												/* Create application events.                           */
 8000c90:	f000 f8d2 	bl	8000e38 <App_EventCreate>
 App_TaskCreate();												/* Create application tasks.                            */
 8000c94:	f000 f828 	bl	8000ce8 <App_TaskCreate>

 /* DIO inputs config */
 DICfgMode(DIO_PA0, DI_MODE_INV);								/* Mode inv because input switches are inverted.		*/
 8000c98:	2103      	movs	r1, #3
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f7ff fb16 	bl	80002cc <DICfgMode>
 DICfgMode(DIO_PA1, DI_MODE_INV);
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f7ff fb12 	bl	80002cc <DICfgMode>
 DICfgMode(DIO_PA2, DI_MODE_INV);
 8000ca8:	2103      	movs	r1, #3
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff fb0e 	bl	80002cc <DICfgMode>
 DICfgMode(DIO_PA3, DI_MODE_INV);
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f7ff fb0a 	bl	80002cc <DICfgMode>
 DICfgMode(DIO_PA4, DI_MODE_INV);
 8000cb8:	2103      	movs	r1, #3
 8000cba:	2004      	movs	r0, #4
 8000cbc:	f7ff fb06 	bl	80002cc <DICfgMode>

 /* DIO outputs config */
 DOCfgMode(DIO_PC13, DO_MODE_BLINK_ASYNC, FALSE);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	f7ff fcdd 	bl	8000684 <DOCfgMode>
 DOCfgMode(DIO_PC14, DO_MODE_BLINK_ASYNC, FALSE);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2104      	movs	r1, #4
 8000cce:	2021      	movs	r0, #33	; 0x21
 8000cd0:	f7ff fcd8 	bl	8000684 <DOCfgMode>
 DOCfgMode(DIO_PC15, DO_MODE_BLINK_ASYNC, FALSE);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	2022      	movs	r0, #34	; 0x22
 8000cda:	f7ff fcd3 	bl	8000684 <DOCfgMode>

 while (DEF_TRUE){
	 OSTaskSuspend(OS_PRIO_SELF);
 8000cde:	20ff      	movs	r0, #255	; 0xff
 8000ce0:	f008 f8ae 	bl	8008e40 <OSTaskSuspend>
 8000ce4:	e7fb      	b.n	8000cde <StartupTask+0x6a>
	...

08000ce8 <App_TaskCreate>:
* Note(s)     : none.
*********************************************************************************************************
*/

void App_TaskCreate (void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af06      	add	r7, sp, #24
    CPU_INT08U os_err;

    os_err = OSTaskCreateExt((void (*)(void *)) Kbchecktask,
 8000cee:	2303      	movs	r3, #3
 8000cf0:	9304      	str	r3, [sp, #16]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	2380      	movs	r3, #128	; 0x80
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <App_TaskCreate+0x100>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2304      	movs	r3, #4
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2304      	movs	r3, #4
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <App_TaskCreate+0x104>)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4839      	ldr	r0, [pc, #228]	; (8000df0 <App_TaskCreate+0x108>)
 8000d0a:	f007 fdf1 	bl	80088f0 <OSTaskCreateExt>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
                             (OS_STK        * ) &KbchecktaskStk[0],
                             (INT32U          ) APP_CFG_KBCHECKTASK_STK_SIZE,
                             (void          * ) 0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    OSTaskNameSet( APP_CFG_KBCHECKTASK_PRIO, (INT8U *)"KbCheckTask", &os_err);
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	461a      	mov	r2, r3
 8000d16:	4937      	ldr	r1, [pc, #220]	; (8000df4 <App_TaskCreate+0x10c>)
 8000d18:	2004      	movs	r0, #4
 8000d1a:	f007 ff4d 	bl	8008bb8 <OSTaskNameSet>

    os_err = OSTaskCreateExt((void (*)(void *)) Seq1Task,
 8000d1e:	2303      	movs	r3, #3
 8000d20:	9304      	str	r3, [sp, #16]
 8000d22:	2300      	movs	r3, #0
 8000d24:	9303      	str	r3, [sp, #12]
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	4b33      	ldr	r3, [pc, #204]	; (8000df8 <App_TaskCreate+0x110>)
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	2305      	movs	r3, #5
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2305      	movs	r3, #5
 8000d34:	4a31      	ldr	r2, [pc, #196]	; (8000dfc <App_TaskCreate+0x114>)
 8000d36:	2100      	movs	r1, #0
 8000d38:	4831      	ldr	r0, [pc, #196]	; (8000e00 <App_TaskCreate+0x118>)
 8000d3a:	f007 fdd9 	bl	80088f0 <OSTaskCreateExt>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
                             (OS_STK        * ) &Seq1TaskStk[0],
                             (INT32U          ) APP_CFG_SEQ1TASK_STK_SIZE,
                             (void          * ) 0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    OSTaskNameSet( APP_CFG_SEQ1TASK_PRIO, (INT8U *)"Seq1Task", &os_err);
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	461a      	mov	r2, r3
 8000d46:	492f      	ldr	r1, [pc, #188]	; (8000e04 <App_TaskCreate+0x11c>)
 8000d48:	2005      	movs	r0, #5
 8000d4a:	f007 ff35 	bl	8008bb8 <OSTaskNameSet>

    os_err = OSTaskCreateExt((void (*)(void *)) Seq2Task,
 8000d4e:	2303      	movs	r3, #3
 8000d50:	9304      	str	r3, [sp, #16]
 8000d52:	2300      	movs	r3, #0
 8000d54:	9303      	str	r3, [sp, #12]
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	9302      	str	r3, [sp, #8]
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	; (8000e08 <App_TaskCreate+0x120>)
 8000d5c:	9301      	str	r3, [sp, #4]
 8000d5e:	2306      	movs	r3, #6
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2306      	movs	r3, #6
 8000d64:	4a29      	ldr	r2, [pc, #164]	; (8000e0c <App_TaskCreate+0x124>)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4829      	ldr	r0, [pc, #164]	; (8000e10 <App_TaskCreate+0x128>)
 8000d6a:	f007 fdc1 	bl	80088f0 <OSTaskCreateExt>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
                             (OS_STK        * ) &Seq2TaskStk[0],
                             (INT32U          ) APP_CFG_SEQ2TASK_STK_SIZE,
                             (void          * ) 0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    OSTaskNameSet( APP_CFG_SEQ2TASK_PRIO, (INT8U *)"Seq2Task", &os_err);
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	461a      	mov	r2, r3
 8000d76:	4927      	ldr	r1, [pc, #156]	; (8000e14 <App_TaskCreate+0x12c>)
 8000d78:	2006      	movs	r0, #6
 8000d7a:	f007 ff1d 	bl	8008bb8 <OSTaskNameSet>

    os_err = OSTaskCreateExt((void (*)(void *)) Seq3Task,
 8000d7e:	2303      	movs	r3, #3
 8000d80:	9304      	str	r3, [sp, #16]
 8000d82:	2300      	movs	r3, #0
 8000d84:	9303      	str	r3, [sp, #12]
 8000d86:	2380      	movs	r3, #128	; 0x80
 8000d88:	9302      	str	r3, [sp, #8]
 8000d8a:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <App_TaskCreate+0x130>)
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	2307      	movs	r3, #7
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2307      	movs	r3, #7
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <App_TaskCreate+0x134>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4821      	ldr	r0, [pc, #132]	; (8000e20 <App_TaskCreate+0x138>)
 8000d9a:	f007 fda9 	bl	80088f0 <OSTaskCreateExt>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
                             (OS_STK        * ) &Seq3TaskStk[0],
                             (INT32U          ) APP_CFG_SEQ3TASK_STK_SIZE,
                             (void          * ) 0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    OSTaskNameSet( APP_CFG_SEQ3TASK_PRIO, (INT8U *)"Seq3Task", &os_err);
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	461a      	mov	r2, r3
 8000da6:	491f      	ldr	r1, [pc, #124]	; (8000e24 <App_TaskCreate+0x13c>)
 8000da8:	2007      	movs	r0, #7
 8000daa:	f007 ff05 	bl	8008bb8 <OSTaskNameSet>

    os_err = OSTaskCreateExt((void (*)(void *)) Statshowtask,
 8000dae:	2303      	movs	r3, #3
 8000db0:	9304      	str	r3, [sp, #16]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9303      	str	r3, [sp, #12]
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	9302      	str	r3, [sp, #8]
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <App_TaskCreate+0x140>)
 8000dbc:	9301      	str	r3, [sp, #4]
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <App_TaskCreate+0x144>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4819      	ldr	r0, [pc, #100]	; (8000e30 <App_TaskCreate+0x148>)
 8000dca:	f007 fd91 	bl	80088f0 <OSTaskCreateExt>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
                             (OS_STK        * ) &StatshowtaskStk[0],
                             (INT32U          ) APP_CFG_STATSHOWTASK_STK_SIZE,
                             (void          * ) 0,
                             (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));

    OSTaskNameSet( APP_CFG_STATSHOWTASK_PRIO, (INT8U *)"StatShowTask", &os_err);
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4917      	ldr	r1, [pc, #92]	; (8000e34 <App_TaskCreate+0x14c>)
 8000dd8:	2008      	movs	r0, #8
 8000dda:	f007 feed 	bl	8008bb8 <OSTaskNameSet>

}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000694 	.word	0x20000694
 8000dec:	20000890 	.word	0x20000890
 8000df0:	08000949 	.word	0x08000949
 8000df4:	0800b568 	.word	0x0800b568
 8000df8:	20000894 	.word	0x20000894
 8000dfc:	20000a90 	.word	0x20000a90
 8000e00:	08000b09 	.word	0x08000b09
 8000e04:	0800b574 	.word	0x0800b574
 8000e08:	20000a94 	.word	0x20000a94
 8000e0c:	20000c90 	.word	0x20000c90
 8000e10:	08000b49 	.word	0x08000b49
 8000e14:	0800b580 	.word	0x0800b580
 8000e18:	20000c94 	.word	0x20000c94
 8000e1c:	20000e90 	.word	0x20000e90
 8000e20:	08000b95 	.word	0x08000b95
 8000e24:	0800b58c 	.word	0x0800b58c
 8000e28:	20000e94 	.word	0x20000e94
 8000e2c:	20001090 	.word	0x20001090
 8000e30:	08000be1 	.word	0x08000be1
 8000e34:	0800b598 	.word	0x0800b598

08000e38 <App_EventCreate>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void App_EventCreate (void){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	statusMbox = OSMboxCreate((void *) 0);
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f007 fa8b 	bl	8008358 <OSMboxCreate>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <App_EventCreate+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
	measuredfreqMbox = OSMboxCreate((void *) 0);
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f007 fa85 	bl	8008358 <OSMboxCreate>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a02      	ldr	r2, [pc, #8]	; (8000e5c <App_EventCreate+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20001548 	.word	0x20001548
 8000e5c:	2000154c 	.word	0x2000154c

08000e60 <HAL_TIM_PeriodElapsedCallback>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim4){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
								0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06, 0x07, 0x09,
								0x0A, 0x0B, 0x0C, 0x0E, 0x0F, 0x11, 0x12, 0x14, 0x15, 0x17, 0x19, 0x1B, 0x1D, 0x1F, 0x21, 0x23,
								0x25, 0x28, 0x2A, 0x2C, 0x2F, 0x31, 0x34, 0x36, 0x39, 0x3B, 0x3E, 0x41, 0x43, 0x46, 0x49, 0x4C,
								0x4F, 0x52, 0x55, 0x58, 0x5A, 0x5D, 0x61, 0x64, 0x67, 0x6A, 0x6D, 0x70, 0x73, 0x76, 0x79, 0x7C };

	GPIOB->ODR = (INT16U)( taps[sin_counter] << 8);
 8000e68:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	021b      	lsls	r3, r3, #8
 8000e76:	b29a      	uxth	r2, r3
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e7a:	60da      	str	r2, [r3, #12]
	sin_counter++;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	3301      	adds	r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e86:	701a      	strb	r2, [r3, #0]
	if (sin_counter > 255) sin_counter = 0;

	//OSIntExit();
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20001094 	.word	0x20001094
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <HAL_TIM_IC_CaptureCallback>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim3){
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	static u_int32_t IC_Value2 ;
	static u_int32_t Difference;
	static u_int32_t Frequency ;
	static BOOLEAN first_cap ;	// flag para saber cuando se capturo el primer flanco

	if (htim3->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7f1b      	ldrb	r3, [r3, #28]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d14d      	bne.n	8000f4c <HAL_TIM_IC_CaptureCallback+0xac>
		if(first_cap==0){
 8000eb0:	4b28      	ldr	r3, [pc, #160]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10a      	bne.n	8000ece <HAL_TIM_IC_CaptureCallback+0x2e>
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim3, TIM_CHANNEL_1);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f003 fb8c 	bl	80045d8 <HAL_TIM_ReadCapturedValue>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a25      	ldr	r2, [pc, #148]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ec4:	6013      	str	r3, [r2, #0]
			first_cap = 1;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
			first_cap = 0;
		}
	}

	//OSIntExit();
}
 8000ecc:	e03e      	b.n	8000f4c <HAL_TIM_IC_CaptureCallback+0xac>
		else if(first_cap==1){
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d13a      	bne.n	8000f4c <HAL_TIM_IC_CaptureCallback+0xac>
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim3, TIM_CHANNEL_1);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f003 fb7d 	bl	80045d8 <HAL_TIM_ReadCapturedValue>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000ee2:	6013      	str	r3, [r2, #0]
			if(IC_Value2>IC_Value1){
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d907      	bls.n	8000f00 <HAL_TIM_IC_CaptureCallback+0x60>
				Difference = IC_Value2-IC_Value1;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e011      	b.n	8000f24 <HAL_TIM_IC_CaptureCallback+0x84>
			else if(IC_Value2<IC_Value1){
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d209      	bcs.n	8000f20 <HAL_TIM_IC_CaptureCallback+0x80>
				Difference = ((0xffff-IC_Value1)+IC_Value2) + 1;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <HAL_TIM_IC_CaptureCallback+0xbc>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e001      	b.n	8000f24 <HAL_TIM_IC_CaptureCallback+0x84>
				Error_Handler();
 8000f20:	f000 f9fd 	bl	800131e <Error_Handler>
			Frequency = HAL_RCC_GetPCLK1Freq()/Difference*2;
 8000f24:	f002 fd42 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f36:	6013      	str	r3, [r2, #0]
			OSMboxPostOpt(measuredfreqMbox, (void *) &Frequency, OS_POST_OPT_NONE);
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4909      	ldr	r1, [pc, #36]	; (8000f64 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f007 faed 	bl	8008520 <OSMboxPostOpt>
			first_cap = 0;
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20001095 	.word	0x20001095
 8000f58:	20001098 	.word	0x20001098
 8000f5c:	2000109c 	.word	0x2000109c
 8000f60:	200010a0 	.word	0x200010a0
 8000f64:	200010a4 	.word	0x200010a4
 8000f68:	2000154c 	.word	0x2000154c

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f000 fb23 	bl	80015bc <HAL_Init>

  /* USER CODE BEGIN Init */
  CPU_IntDis();
 8000f76:	f7ff f8e9 	bl	800014c <CPU_IntDis>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	80fb      	strh	r3, [r7, #6]
 8000f7e:	e009      	b.n	8000f94 <main+0x28>
  {
  /* Set all external intr. to KA interrupt priority boundary */
  CPU_IntSrcPrioSet(int_id, CPU_CFG_KA_IPL_BOUNDARY, CPU_INT_KA);
 8000f80:	88fb      	ldrh	r3, [r7, #6]
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	2200      	movs	r2, #0
 8000f86:	2104      	movs	r1, #4
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 fed3 	bl	8006d34 <CPU_IntSrcPrioSet>
  for (int_id = CPU_INT_EXT0; int_id <= (EXT_INT_MAX_NBR - 1u); int_id++)
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	3301      	adds	r3, #1
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	2b0f      	cmp	r3, #15
 8000f98:	d9f2      	bls.n	8000f80 <main+0x14>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f82b 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 f925 	bl	80011ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000fa2:	f009 fe2d 	bl	800ac00 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000fa6:	f000 f87f 	bl	80010a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000faa:	f000 f8d1 	bl	8001150 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  OSInit();
 8000fae:	f006 fa9b 	bl	80074e8 <OSInit>
  OSTaskCreateExt( StartupTask,
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	9304      	str	r3, [sp, #16]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9303      	str	r3, [sp, #12]
 8000fba:	2380      	movs	r3, #128	; 0x80
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <main+0x78>)
 8000fc0:	9301      	str	r3, [sp, #4]
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <main+0x7c>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <main+0x80>)
 8000fce:	f007 fc8f 	bl	80088f0 <OSTaskCreateExt>
				   &StartupTaskStk[0],
				   APP_CFG_STARTUP_TASK_STK_SIZE,
				   0,
				   (OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR));
  #if (OS_TASK_NAME_EN > 0u)
   OSTaskNameSet( APP_CFG_STARTUP_TASK_PRIO,
 8000fd2:	1d7b      	adds	r3, r7, #5
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <main+0x84>)
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f007 fded 	bl	8008bb8 <OSTaskNameSet>
    	  	      (INT8U *)"Startup task",
				  &os_err);
  #endif

  OSStart();
 8000fde:	f006 fb6d 	bl	80076bc <OSStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <main+0x76>
 8000fe4:	20001554 	.word	0x20001554
 8000fe8:	20001750 	.word	0x20001750
 8000fec:	08000c75 	.word	0x08000c75
 8000ff0:	0800b5a8 	.word	0x0800b5a8

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b094      	sub	sp, #80	; 0x50
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	2228      	movs	r2, #40	; 0x28
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f00a fa96 	bl	800b534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001032:	2301      	movs	r3, #1
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001036:	2302      	movs	r3, #2
 8001038:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800103a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800103e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001040:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800104a:	4618      	mov	r0, r3
 800104c:	f002 f8da 	bl	8003204 <HAL_RCC_OscConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001056:	f000 f962 	bl	800131e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	2102      	movs	r1, #2
 8001076:	4618      	mov	r0, r3
 8001078:	f002 fb44 	bl	8003704 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001082:	f000 f94c 	bl	800131e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001086:	2310      	movs	r3, #16
 8001088:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fcbd 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800109c:	f000 f93f 	bl	800131e <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3750      	adds	r7, #80	; 0x50
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010c6:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_TIM3_Init+0xa4>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80010ea:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_TIM3_Init+0xa0>)
 80010ec:	f002 fe16 	bl	8003d1c <HAL_TIM_IC_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80010f6:	f000 f912 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	480f      	ldr	r0, [pc, #60]	; (8001148 <MX_TIM3_Init+0xa0>)
 800110a:	f003 fcef 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001114:	f000 f903 	bl	800131e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001118:	2300      	movs	r3, #0
 800111a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800111c:	2301      	movs	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4806      	ldr	r0, [pc, #24]	; (8001148 <MX_TIM3_Init+0xa0>)
 8001130:	f003 f8fa 	bl	8004328 <HAL_TIM_IC_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800113a:	f000 f8f0 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20001500 	.word	0x20001500
 800114c:	40000400 	.word	0x40000400

08001150 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	463b      	mov	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_TIM4_Init+0x94>)
 800116e:	4a1e      	ldr	r2, [pc, #120]	; (80011e8 <MX_TIM4_Init+0x98>)
 8001170:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 562;
 8001172:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_TIM4_Init+0x94>)
 8001174:	f240 2232 	movw	r2, #562	; 0x232
 8001178:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_TIM4_Init+0x94>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_TIM4_Init+0x94>)
 8001182:	220a      	movs	r2, #10
 8001184:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_TIM4_Init+0x94>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_TIM4_Init+0x94>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_TIM4_Init+0x94>)
 8001194:	f002 fcf2 	bl	8003b7c <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f8be 	bl	800131e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_TIM4_Init+0x94>)
 80011b0:	f003 f94e 	bl	8004450 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f8b0 	bl	800131e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011c6:	463b      	mov	r3, r7
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_TIM4_Init+0x94>)
 80011cc:	f003 fc8e 	bl	8004aec <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80011d6:	f000 f8a2 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200014b8 	.word	0x200014b8
 80011e8:	40000800 	.word	0x40000800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6193      	str	r3, [r2, #24]
 800120c:	4b35      	ldr	r3, [pc, #212]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	f003 0310 	and.w	r3, r3, #16
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001218:	4b32      	ldr	r3, [pc, #200]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a31      	ldr	r2, [pc, #196]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	4a2b      	ldr	r2, [pc, #172]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6193      	str	r3, [r2, #24]
 800123c:	4b29      	ldr	r3, [pc, #164]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <MX_GPIO_Init+0xf8>)
 800124e:	f043 0308 	orr.w	r3, r3, #8
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <MX_GPIO_Init+0xf8>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001266:	4820      	ldr	r0, [pc, #128]	; (80012e8 <MX_GPIO_Init+0xfc>)
 8001268:	f000 fc22 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <MX_GPIO_Init+0xfc>)
 8001274:	f000 fc1c 	bl	8001ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 800127e:	481b      	ldr	r0, [pc, #108]	; (80012ec <MX_GPIO_Init+0x100>)
 8001280:	f000 fc16 	bl	8001ab0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001284:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001296:	f107 0310 	add.w	r3, r7, #16
 800129a:	4619      	mov	r1, r3
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <MX_GPIO_Init+0xfc>)
 800129e:	f000 fa83 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012a2:	f248 73ff 	movw	r3, #34815	; 0x87ff
 80012a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4619      	mov	r1, r3
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_GPIO_Init+0x104>)
 80012b8:	f000 fa76 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80012bc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80012c0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_GPIO_Init+0x100>)
 80012d6:	f000 fa67 	bl	80017a8 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40011000 	.word	0x40011000
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40010800 	.word	0x40010800

080012f4 <HAL_InitTick>:
*************************************************************************
* STM32Cube HAL FUNCTIONS
*************************************************************************
*/
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
/* define as empty to prevent the system tick being initialized before
    the OS starts */
 return (HAL_OK);
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_GetTick>:

uint32_t HAL_GetTick(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0

 #if (OS_VERSION >= 30000u)
  OS_ERR os_err;
  os_tick_ctr = OSTimeGet(&os_err);
 #else
  os_tick_ctr = OSTimeGet();
 800130e:	f007 ff03 	bl	8009118 <OSTimeGet>
 8001312:	6078      	str	r0, [r7, #4]
 #endif

 return os_tick_ctr;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001322:	bf00      	nop
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_MspInit+0x5c>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	4a14      	ldr	r2, [pc, #80]	; (8001388 <HAL_MspInit+0x5c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6193      	str	r3, [r2, #24]
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_MspInit+0x5c>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a0e      	ldr	r2, [pc, #56]	; (8001388 <HAL_MspInit+0x5c>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_MspInit+0x60>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_MspInit+0x60>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000

08001390 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM3)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_TIM_IC_MspInit+0xa4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d13d      	bne.n	800142c <HAL_TIM_IC_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b0:	4b21      	ldr	r3, [pc, #132]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013b2:	69db      	ldr	r3, [r3, #28]
 80013b4:	4a20      	ldr	r2, [pc, #128]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	61d3      	str	r3, [r2, #28]
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_TIM_IC_MspInit+0xa8>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e0:	2310      	movs	r3, #16
 80013e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <HAL_TIM_IC_MspInit+0xac>)
 80013f4:	f000 f9d8 	bl	80017a8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <HAL_TIM_IC_MspInit+0xb0>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_TIM_IC_MspInit+0xb0>)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	201d      	movs	r0, #29
 8001422:	f000 f996 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001426:	201d      	movs	r0, #29
 8001428:	f000 f9af 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3728      	adds	r7, #40	; 0x28
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40000400 	.word	0x40000400
 8001438:	40021000 	.word	0x40021000
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40010000 	.word	0x40010000

08001444 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_TIM_Base_MspInit+0x44>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d113      	bne.n	800147e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_TIM_Base_MspInit+0x48>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	201e      	movs	r0, #30
 8001474:	f000 f96d 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001478:	201e      	movs	r0, #30
 800147a:	f000 f986 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40000800 	.word	0x40000800
 800148c:	40021000 	.word	0x40021000

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <HardFault_Handler+0x4>

080014a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <MemManage_Handler+0x4>

080014a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <BusFault_Handler+0x4>

080014ae <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <UsageFault_Handler+0x4>

080014b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80014d2:	f000 fc36 	bl	8001d42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20003bcc 	.word	0x20003bcc

080014e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM3_IRQHandler+0x10>)
 80014e6:	f002 fe17 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20001500 	.word	0x20001500

080014f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <TIM4_IRQHandler+0x10>)
 80014fa:	f002 fe0d 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200014b8 	.word	0x200014b8

08001508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800150c:	4b15      	ldr	r3, [pc, #84]	; (8001564 <SystemInit+0x5c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <SystemInit+0x5c>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <SystemInit+0x5c>)
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	4911      	ldr	r1, [pc, #68]	; (8001564 <SystemInit+0x5c>)
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <SystemInit+0x60>)
 8001520:	4013      	ands	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <SystemInit+0x5c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0e      	ldr	r2, [pc, #56]	; (8001564 <SystemInit+0x5c>)
 800152a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <SystemInit+0x5c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SystemInit+0x5c>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <SystemInit+0x5c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <SystemInit+0x5c>)
 8001546:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800154a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SystemInit+0x5c>)
 800154e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001552:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <SystemInit+0x64>)
 8001556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800155a:	609a      	str	r2, [r3, #8]
#endif 
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	40021000 	.word	0x40021000
 8001568:	f8ff0000 	.word	0xf8ff0000
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001570:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001572:	e003      	b.n	800157c <LoopCopyDataInit>

08001574 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001576:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001578:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800157a:	3104      	adds	r1, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001580:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001582:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001584:	d3f6      	bcc.n	8001574 <CopyDataInit>
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001588:	e002      	b.n	8001590 <LoopFillZerobss>

0800158a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800158c:	f842 3b04 	str.w	r3, [r2], #4

08001590 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001592:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001594:	d3f9      	bcc.n	800158a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001596:	f7ff ffb7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f009 ffa7 	bl	800b4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff fce5 	bl	8000f6c <main>
  bx lr
 80015a2:	4770      	bx	lr
  ldr r3, =_sidata
 80015a4:	0800b818 	.word	0x0800b818
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015ac:	20000278 	.word	0x20000278
  ldr r2, =_sbss
 80015b0:	20000278 	.word	0x20000278
  ldr r3, = _ebss
 80015b4:	20003eb8 	.word	0x20003eb8

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x28>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x28>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f8b5 	bl	800173c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f7ff fe8e 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fea8 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <__NVIC_EnableIRQ+0x34>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	e000e100 	.word	0xe000e100

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ff4f 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001764:	f7ff ff64 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68b9      	ldr	r1, [r7, #8]
 800176e:	6978      	ldr	r0, [r7, #20]
 8001770:	f7ff ffb2 	bl	80016d8 <NVIC_EncodePriority>
 8001774:	4602      	mov	r2, r0
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	4611      	mov	r1, r2
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff ff81 	bl	8001684 <__NVIC_SetPriority>
}
 8001782:	bf00      	nop
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff57 	bl	800164c <__NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ba:	e169      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017bc:	2201      	movs	r2, #1
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	f040 8158 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4a9a      	ldr	r2, [pc, #616]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d05e      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017e4:	4a98      	ldr	r2, [pc, #608]	; (8001a48 <HAL_GPIO_Init+0x2a0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d875      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017ea:	4a98      	ldr	r2, [pc, #608]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d058      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017f0:	4a96      	ldr	r2, [pc, #600]	; (8001a4c <HAL_GPIO_Init+0x2a4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d86f      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 80017f6:	4a96      	ldr	r2, [pc, #600]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d052      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 80017fc:	4a94      	ldr	r2, [pc, #592]	; (8001a50 <HAL_GPIO_Init+0x2a8>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d869      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001802:	4a94      	ldr	r2, [pc, #592]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d04c      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001808:	4a92      	ldr	r2, [pc, #584]	; (8001a54 <HAL_GPIO_Init+0x2ac>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d863      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800180e:	4a92      	ldr	r2, [pc, #584]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d046      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
 8001814:	4a90      	ldr	r2, [pc, #576]	; (8001a58 <HAL_GPIO_Init+0x2b0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d85d      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 800181a:	2b12      	cmp	r3, #18
 800181c:	d82a      	bhi.n	8001874 <HAL_GPIO_Init+0xcc>
 800181e:	2b12      	cmp	r3, #18
 8001820:	d859      	bhi.n	80018d6 <HAL_GPIO_Init+0x12e>
 8001822:	a201      	add	r2, pc, #4	; (adr r2, 8001828 <HAL_GPIO_Init+0x80>)
 8001824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001828:	080018a3 	.word	0x080018a3
 800182c:	0800187d 	.word	0x0800187d
 8001830:	0800188f 	.word	0x0800188f
 8001834:	080018d1 	.word	0x080018d1
 8001838:	080018d7 	.word	0x080018d7
 800183c:	080018d7 	.word	0x080018d7
 8001840:	080018d7 	.word	0x080018d7
 8001844:	080018d7 	.word	0x080018d7
 8001848:	080018d7 	.word	0x080018d7
 800184c:	080018d7 	.word	0x080018d7
 8001850:	080018d7 	.word	0x080018d7
 8001854:	080018d7 	.word	0x080018d7
 8001858:	080018d7 	.word	0x080018d7
 800185c:	080018d7 	.word	0x080018d7
 8001860:	080018d7 	.word	0x080018d7
 8001864:	080018d7 	.word	0x080018d7
 8001868:	080018d7 	.word	0x080018d7
 800186c:	08001885 	.word	0x08001885
 8001870:	08001899 	.word	0x08001899
 8001874:	4a79      	ldr	r2, [pc, #484]	; (8001a5c <HAL_GPIO_Init+0x2b4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d013      	beq.n	80018a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800187a:	e02c      	b.n	80018d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	623b      	str	r3, [r7, #32]
          break;
 8001882:	e029      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	3304      	adds	r3, #4
 800188a:	623b      	str	r3, [r7, #32]
          break;
 800188c:	e024      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	3308      	adds	r3, #8
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e01f      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	330c      	adds	r3, #12
 800189e:	623b      	str	r3, [r7, #32]
          break;
 80018a0:	e01a      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d102      	bne.n	80018b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018aa:	2304      	movs	r3, #4
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e013      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018b8:	2308      	movs	r3, #8
 80018ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	611a      	str	r2, [r3, #16]
          break;
 80018c2:	e009      	b.n	80018d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c4:	2308      	movs	r3, #8
 80018c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	615a      	str	r2, [r3, #20]
          break;
 80018ce:	e003      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d0:	2300      	movs	r3, #0
 80018d2:	623b      	str	r3, [r7, #32]
          break;
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x130>
          break;
 80018d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2bff      	cmp	r3, #255	; 0xff
 80018dc:	d801      	bhi.n	80018e2 <HAL_GPIO_Init+0x13a>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_Init+0x13e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3304      	adds	r3, #4
 80018e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d802      	bhi.n	80018f4 <HAL_GPIO_Init+0x14c>
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	e002      	b.n	80018fa <HAL_GPIO_Init+0x152>
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	3b08      	subs	r3, #8
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	210f      	movs	r1, #15
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	401a      	ands	r2, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	431a      	orrs	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80b1 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001928:	4b4d      	ldr	r3, [pc, #308]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a4c      	ldr	r2, [pc, #304]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <HAL_GPIO_Init+0x2b8>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001940:	4a48      	ldr	r2, [pc, #288]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a40      	ldr	r2, [pc, #256]	; (8001a68 <HAL_GPIO_Init+0x2c0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a3f      	ldr	r2, [pc, #252]	; (8001a6c <HAL_GPIO_Init+0x2c4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <HAL_GPIO_Init+0x2c8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1e4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3d      	ldr	r2, [pc, #244]	; (8001a74 <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1e0>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001988:	2304      	movs	r3, #4
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1ee>
 8001994:	2300      	movs	r3, #0
 8001996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a6:	492f      	ldr	r1, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x2bc>)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c0:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	492c      	ldr	r1, [pc, #176]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e006      	b.n	80019dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	4928      	ldr	r1, [pc, #160]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d006      	beq.n	80019f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4922      	ldr	r1, [pc, #136]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	491e      	ldr	r1, [pc, #120]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4918      	ldr	r1, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4914      	ldr	r1, [pc, #80]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d021      	beq.n	8001a7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	490e      	ldr	r1, [pc, #56]	; (8001a78 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e021      	b.n	8001a8a <HAL_GPIO_Init+0x2e2>
 8001a46:	bf00      	nop
 8001a48:	10320000 	.word	0x10320000
 8001a4c:	10310000 	.word	0x10310000
 8001a50:	10220000 	.word	0x10220000
 8001a54:	10210000 	.word	0x10210000
 8001a58:	10120000 	.word	0x10120000
 8001a5c:	10110000 	.word	0x10110000
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	40010800 	.word	0x40010800
 8001a6c:	40010c00 	.word	0x40010c00
 8001a70:	40011000 	.word	0x40011000
 8001a74:	40011400 	.word	0x40011400
 8001a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae8e 	bne.w	80017bc <HAL_GPIO_Init+0x14>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	372c      	adds	r7, #44	; 0x2c
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae2:	b08b      	sub	sp, #44	; 0x2c
 8001ae4:	af06      	add	r7, sp, #24
 8001ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0fd      	b.n	8001cee <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f009 fa46 	bl	800af98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f87d 	bl	8004c18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	687e      	ldr	r6, [r7, #4]
 8001b26:	466d      	mov	r5, sp
 8001b28:	f106 0410 	add.w	r4, r6, #16
 8001b2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b30:	6823      	ldr	r3, [r4, #0]
 8001b32:	602b      	str	r3, [r5, #0]
 8001b34:	1d33      	adds	r3, r6, #4
 8001b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b38:	6838      	ldr	r0, [r7, #0]
 8001b3a:	f003 f847 	bl	8004bcc <USB_CoreInit>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0ce      	b.n	8001cee <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 f878 	bl	8004c4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e04c      	b.n	8001bfc <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3301      	adds	r3, #1
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	440b      	add	r3, r1
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	b298      	uxth	r0, r3
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	4613      	mov	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	440b      	add	r3, r1
 8001b9e:	3336      	adds	r3, #54	; 0x36
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	4613      	mov	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3303      	adds	r3, #3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bba:	7bfa      	ldrb	r2, [r7, #15]
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	440b      	add	r3, r1
 8001bc8:	3338      	adds	r3, #56	; 0x38
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	6879      	ldr	r1, [r7, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	333c      	adds	r3, #60	; 0x3c
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	4613      	mov	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3340      	adds	r3, #64	; 0x40
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ad      	bcc.n	8001b62 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e044      	b.n	8001c96 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	440b      	add	r3, r1
 8001c46:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c4e:	7bfa      	ldrb	r2, [r7, #15]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	440b      	add	r3, r1
 8001c5c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	440b      	add	r3, r1
 8001c72:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c7a:	7bfa      	ldrb	r2, [r7, #15]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	440b      	add	r3, r1
 8001c88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	3301      	adds	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3b5      	bcc.n	8001c0c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	687e      	ldr	r6, [r7, #4]
 8001ca8:	466d      	mov	r5, sp
 8001caa:	f106 0410 	add.w	r4, r6, #16
 8001cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb2:	6823      	ldr	r3, [r4, #0]
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	1d33      	adds	r3, r6, #4
 8001cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cba:	6838      	ldr	r0, [r7, #0]
 8001cbc:	f002 ffd2 	bl	8004c64 <USB_DevInit>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2202      	movs	r2, #2
 8001cca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00d      	b.n	8001cee <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f004 ff6c 	bl	8006bc4 <USB_DevDisconnect>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b082      	sub	sp, #8
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_PCD_Start+0x16>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e016      	b.n	8001d3a <HAL_PCD_Start+0x44>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 ff67 	bl	8004bec <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f009 fbac 	bl	800b47e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f004 ff40 	bl	8006bb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b088      	sub	sp, #32
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f004 ff42 	bl	8006bd8 <USB_ReadInterrupts>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d5e:	d102      	bne.n	8001d66 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f000 fb61 	bl	8002428 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f004 ff34 	bl	8006bd8 <USB_ReadInterrupts>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7a:	d112      	bne.n	8001da2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	b292      	uxth	r2, r2
 8001d90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f009 f97a 	bl	800b08e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f925 	bl	8001fec <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f004 ff16 	bl	8006bd8 <USB_ReadInterrupts>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db6:	d10b      	bne.n	8001dd0 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dca:	b292      	uxth	r2, r2
 8001dcc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f004 feff 	bl	8006bd8 <USB_ReadInterrupts>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de4:	d10b      	bne.n	8001dfe <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df8:	b292      	uxth	r2, r2
 8001dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f004 fee8 	bl	8006bd8 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	d126      	bne.n	8001e62 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0204 	bic.w	r2, r2, #4
 8001e26:	b292      	uxth	r2, r2
 8001e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0208 	bic.w	r2, r2, #8
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f009 f95b 	bl	800b100 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e5c:	b292      	uxth	r2, r2
 8001e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 feb6 	bl	8006bd8 <USB_ReadInterrupts>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e76:	f040 8084 	bne.w	8001f82 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	77fb      	strb	r3, [r7, #31]
 8001e7e:	e011      	b.n	8001ea4 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	7ffb      	ldrb	r3, [r7, #31]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	441a      	add	r2, r3
 8001e8c:	7ffb      	ldrb	r3, [r7, #31]
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	b292      	uxth	r2, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	f107 0120 	add.w	r1, r7, #32
 8001e98:	440b      	add	r3, r1
 8001e9a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
 8001ea4:	7ffb      	ldrb	r3, [r7, #31]
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d9ea      	bls.n	8001e80 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0201 	bic.w	r2, r2, #1
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001eda:	bf00      	nop
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f6      	beq.n	8001edc <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	77fb      	strb	r3, [r7, #31]
 8001f0a:	e010      	b.n	8001f2e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001f0c:	7ffb      	ldrb	r3, [r7, #31]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	4611      	mov	r1, r2
 8001f14:	7ffa      	ldrb	r2, [r7, #31]
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	440a      	add	r2, r1
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	f107 0120 	add.w	r1, r7, #32
 8001f20:	440b      	add	r3, r1
 8001f22:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001f26:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001f28:	7ffb      	ldrb	r3, [r7, #31]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	77fb      	strb	r3, [r7, #31]
 8001f2e:	7ffb      	ldrb	r3, [r7, #31]
 8001f30:	2b07      	cmp	r3, #7
 8001f32:	d9eb      	bls.n	8001f0c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0208 	orr.w	r2, r2, #8
 8001f46:	b292      	uxth	r2, r2
 8001f48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	b292      	uxth	r2, r2
 8001f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0204 	orr.w	r2, r2, #4
 8001f76:	b292      	uxth	r2, r2
 8001f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f009 f8a5 	bl	800b0cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f004 fe26 	bl	8006bd8 <USB_ReadInterrupts>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f96:	d10e      	bne.n	8001fb6 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001faa:	b292      	uxth	r2, r2
 8001fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f009 f85e 	bl	800b072 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fe0c 	bl	8006bd8 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fca:	d10b      	bne.n	8001fe4 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fde:	b292      	uxth	r2, r2
 8001fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3720      	adds	r7, #32
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_SetAddress+0x1a>
 8002002:	2302      	movs	r3, #2
 8002004:	e013      	b.n	800202e <HAL_PCD_SetAddress+0x42>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f004 fdb3 	bl	8006b8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	4608      	mov	r0, r1
 8002040:	4611      	mov	r1, r2
 8002042:	461a      	mov	r2, r3
 8002044:	4603      	mov	r3, r0
 8002046:	70fb      	strb	r3, [r7, #3]
 8002048:	460b      	mov	r3, r1
 800204a:	803b      	strh	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002050:	2300      	movs	r3, #0
 8002052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da0e      	bge.n	800207a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
 8002078:	e00e      	b.n	8002098 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 0207 	and.w	r2, r3, #7
 8002080:	4613      	mov	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002098:	78fb      	ldrb	r3, [r7, #3]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020a4:	883a      	ldrh	r2, [r7, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	78ba      	ldrb	r2, [r7, #2]
 80020ae:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	785b      	ldrb	r3, [r3, #1]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020c2:	78bb      	ldrb	r3, [r7, #2]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d102      	bne.n	80020ce <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_PCD_EP_Open+0xa6>
 80020d8:	2302      	movs	r3, #2
 80020da:	e00e      	b.n	80020fa <HAL_PCD_EP_Open+0xc4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68f9      	ldr	r1, [r7, #12]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f002 fdda 	bl	8004ca4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020f8:	7afb      	ldrb	r3, [r7, #11]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800210e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	da0e      	bge.n	8002134 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	705a      	strb	r2, [r3, #1]
 8002132:	e00e      	b.n	8002152 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002164:	2b01      	cmp	r3, #1
 8002166:	d101      	bne.n	800216c <HAL_PCD_EP_Close+0x6a>
 8002168:	2302      	movs	r3, #2
 800216a:	e00e      	b.n	800218a <HAL_PCD_EP_Close+0x88>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f003 f8fc 	bl	8005378 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	460b      	mov	r3, r1
 80021a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	2200      	movs	r2, #0
 80021d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d2:	7afb      	ldrb	r3, [r7, #11]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021de:	7afb      	ldrb	r3, [r7, #11]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f003 faae 	bl	8005750 <USB_EPStartXfer>
 80021f4:	e005      	b.n	8002202 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6979      	ldr	r1, [r7, #20]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f003 faa7 	bl	8005750 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f003 0207 	and.w	r2, r3, #7
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	440b      	add	r3, r1
 800222a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	460b      	mov	r3, r1
 8002248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2201      	movs	r2, #1
 8002284:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	b2da      	uxtb	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002292:	7afb      	ldrb	r3, [r7, #11]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fa54 	bl	8005750 <USB_EPStartXfer>
 80022a8:	e005      	b.n	80022b6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f003 fa4d 	bl	8005750 <USB_EPStartXfer>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d901      	bls.n	80022de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e04c      	b.n	8002378 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da0e      	bge.n	8002304 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	705a      	strb	r2, [r3, #1]
 8002302:	e00c      	b.n	800231e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_PCD_EP_SetStall+0x7e>
 800233a:	2302      	movs	r3, #2
 800233c:	e01c      	b.n	8002378 <HAL_PCD_EP_SetStall+0xb8>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	4618      	mov	r0, r3
 800234e:	f004 fb1f 	bl	8006990 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	2b00      	cmp	r3, #0
 800235a:	d108      	bne.n	800236e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f004 fc44 	bl	8006bf6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	d901      	bls.n	800239e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e040      	b.n	8002420 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800239e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da0e      	bge.n	80023c4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2201      	movs	r2, #1
 80023c0:	705a      	strb	r2, [r3, #1]
 80023c2:	e00e      	b.n	80023e2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	f003 0207 	and.w	r2, r3, #7
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023e8:	78fb      	ldrb	r3, [r7, #3]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_PCD_EP_ClrStall+0x82>
 80023fe:	2302      	movs	r3, #2
 8002400:	e00e      	b.n	8002420 <HAL_PCD_EP_ClrStall+0xa0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fb0d 	bl	8006a30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08e      	sub	sp, #56	; 0x38
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002430:	e2df      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800243a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800243c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800243e:	b2db      	uxtb	r3, r3
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002448:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 8158 	bne.w	8002702 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002452:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b00      	cmp	r3, #0
 800245a:	d152      	bne.n	8002502 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	881b      	ldrh	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246c:	81fb      	strh	r3, [r7, #14]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	89fb      	ldrh	r3, [r7, #14]
 8002474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3328      	adds	r3, #40	; 0x28
 8002484:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248e:	b29b      	uxth	r3, r3
 8002490:	461a      	mov	r2, r3
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	3302      	adds	r3, #2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	441a      	add	r2, r3
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024c0:	2100      	movs	r1, #0
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f008 fdbb 	bl	800b03e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 828e 	beq.w	80029f2 <PCD_EP_ISR_Handler+0x5ca>
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 8289 	bne.w	80029f2 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b292      	uxth	r2, r2
 80024f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002500:	e277      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002512:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002518:	2b00      	cmp	r3, #0
 800251a:	d034      	beq.n	8002586 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002524:	b29b      	uxth	r3, r3
 8002526:	461a      	mov	r2, r3
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	4413      	add	r3, r2
 8002530:	3306      	adds	r3, #6
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800255a:	b29b      	uxth	r3, r3
 800255c:	f004 fb9b 	bl	8006c96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29a      	uxth	r2, r3
 8002568:	f640 738f 	movw	r3, #3983	; 0xf8f
 800256c:	4013      	ands	r3, r2
 800256e:	823b      	strh	r3, [r7, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	8a3a      	ldrh	r2, [r7, #16]
 8002576:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800257a:	b292      	uxth	r2, r2
 800257c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f008 fd30 	bl	800afe4 <HAL_PCD_SetupStageCallback>
 8002584:	e235      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002586:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800258a:	2b00      	cmp	r3, #0
 800258c:	f280 8231 	bge.w	80029f2 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f640 738f 	movw	r3, #3983	; 0xf8f
 800259c:	4013      	ands	r3, r2
 800259e:	83bb      	strh	r3, [r7, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	8bba      	ldrh	r2, [r7, #28]
 80025a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025aa:	b292      	uxth	r2, r2
 80025ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	3306      	adds	r3, #6
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <PCD_EP_ISR_Handler+0x1ee>
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d015      	beq.n	8002616 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	6959      	ldr	r1, [r3, #20]
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f004 fb4b 	bl	8006c96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	441a      	add	r2, r3
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800260e:	2100      	movs	r1, #0
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f008 fcf9 	bl	800b008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	4413      	add	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d112      	bne.n	8002664 <PCD_EP_ISR_Handler+0x23c>
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	881b      	ldrh	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002648:	b29a      	uxth	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	801a      	strh	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002658:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	e02f      	b.n	80026c4 <PCD_EP_ISR_Handler+0x29c>
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	2b3e      	cmp	r3, #62	; 0x3e
 800266a:	d813      	bhi.n	8002694 <PCD_EP_ISR_Handler+0x26c>
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	085b      	lsrs	r3, r3, #1
 8002672:	633b      	str	r3, [r7, #48]	; 0x30
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <PCD_EP_ISR_Handler+0x25e>
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	3301      	adds	r3, #1
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	b29b      	uxth	r3, r3
 800268a:	029b      	lsls	r3, r3, #10
 800268c:	b29a      	uxth	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	801a      	strh	r2, [r3, #0]
 8002692:	e017      	b.n	80026c4 <PCD_EP_ISR_Handler+0x29c>
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	095b      	lsrs	r3, r3, #5
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d102      	bne.n	80026ae <PCD_EP_ISR_Handler+0x286>
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	3b01      	subs	r3, #1
 80026ac:	633b      	str	r3, [r7, #48]	; 0x30
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	029b      	lsls	r3, r3, #10
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026be:	b29a      	uxth	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d4:	827b      	strh	r3, [r7, #18]
 80026d6:	8a7b      	ldrh	r3, [r7, #18]
 80026d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026dc:	827b      	strh	r3, [r7, #18]
 80026de:	8a7b      	ldrh	r3, [r7, #18]
 80026e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026e4:	827b      	strh	r3, [r7, #18]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	8a7b      	ldrh	r3, [r7, #18]
 80026ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	8013      	strh	r3, [r2, #0]
 8002700:	e177      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002714:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002718:	2b00      	cmp	r3, #0
 800271a:	f280 80ea 	bge.w	80028f2 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	b29a      	uxth	r2, r3
 8002730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002734:	4013      	ands	r3, r2
 8002736:	853b      	strh	r3, [r7, #40]	; 0x28
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	461a      	mov	r2, r3
 800273e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800274c:	b292      	uxth	r2, r2
 800274e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002750:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	4413      	add	r3, r2
 8002764:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	7b1b      	ldrb	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d122      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	3306      	adds	r3, #6
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6812      	ldr	r2, [r2, #0]
 800278a:	4413      	add	r3, r2
 800278c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002796:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 8087 	beq.w	80028ae <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	6959      	ldr	r1, [r3, #20]
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	88da      	ldrh	r2, [r3, #6]
 80027ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027ae:	f004 fa72 	bl	8006c96 <USB_ReadPMA>
 80027b2:	e07c      	b.n	80028ae <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	78db      	ldrb	r3, [r3, #3]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d108      	bne.n	80027ce <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027be:	461a      	mov	r2, r3
 80027c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f923 	bl	8002a0e <HAL_PCD_EP_DB_Receive>
 80027c8:	4603      	mov	r3, r0
 80027ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027cc:	e06f      	b.n	80028ae <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e8:	847b      	strh	r3, [r7, #34]	; 0x22
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002806:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280a:	b29b      	uxth	r3, r3
 800280c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002830:	b29b      	uxth	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	3302      	adds	r3, #2
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	4413      	add	r3, r2
 8002846:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002850:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002854:	2b00      	cmp	r3, #0
 8002856:	d02a      	beq.n	80028ae <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	6959      	ldr	r1, [r3, #20]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	891a      	ldrh	r2, [r3, #8]
 8002864:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002866:	f004 fa16 	bl	8006c96 <USB_ReadPMA>
 800286a:	e020      	b.n	80028ae <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002874:	b29b      	uxth	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	3306      	adds	r3, #6
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002894:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6959      	ldr	r1, [r3, #20]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	895a      	ldrh	r2, [r3, #10]
 80028a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028aa:	f004 f9f4 	bl	8006c96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	69da      	ldr	r2, [r3, #28]
 80028b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028b4:	441a      	add	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	695a      	ldr	r2, [r3, #20]
 80028be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028c0:	441a      	add	r2, r3
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d004      	beq.n	80028d8 <PCD_EP_ISR_Handler+0x4b0>
 80028ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d206      	bcs.n	80028e6 <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f008 fb92 	bl	800b008 <HAL_PCD_DataOutStageCallback>
 80028e4:	e005      	b.n	80028f2 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f002 ff2f 	bl	8005750 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d07a      	beq.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 80028fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	b29b      	uxth	r3, r3
 8002922:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	843b      	strh	r3, [r7, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	8c3b      	ldrh	r3, [r7, #32]
 800293c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	78db      	ldrb	r3, [r3, #3]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d108      	bne.n	8002962 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 8002954:	2b02      	cmp	r3, #2
 8002956:	d146      	bne.n	80029e6 <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002958:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d141      	bne.n	80029e6 <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800296a:	b29b      	uxth	r3, r3
 800296c:	461a      	mov	r2, r3
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	3302      	adds	r3, #2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6812      	ldr	r2, [r2, #0]
 800297e:	4413      	add	r3, r2
 8002980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800298a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	8bfb      	ldrh	r3, [r7, #30]
 8002992:	429a      	cmp	r2, r3
 8002994:	d906      	bls.n	80029a4 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	8bfb      	ldrh	r3, [r7, #30]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e002      	b.n	80029aa <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f008 fb40 	bl	800b03e <HAL_PCD_DataInStageCallback>
 80029be:	e018      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	8bfb      	ldrh	r3, [r7, #30]
 80029c6:	441a      	add	r2, r3
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	441a      	add	r2, r3
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029de:	4618      	mov	r0, r3
 80029e0:	f002 feb6 	bl	8005750 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029e4:	e005      	b.n	80029f2 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029e6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029e8:	461a      	mov	r2, r3
 80029ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f91b 	bl	8002c28 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	b21b      	sxth	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f6ff ad17 	blt.w	8002432 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3738      	adds	r7, #56	; 0x38
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b088      	sub	sp, #32
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	60f8      	str	r0, [r7, #12]
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d07e      	beq.n	8002b24 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3302      	adds	r3, #2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	699a      	ldr	r2, [r3, #24]
 8002a54:	8b7b      	ldrh	r3, [r7, #26]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d306      	bcc.n	8002a68 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	699a      	ldr	r2, [r3, #24]
 8002a5e:	8b7b      	ldrh	r3, [r7, #26]
 8002a60:	1ad2      	subs	r2, r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	619a      	str	r2, [r3, #24]
 8002a66:	e002      	b.n	8002a6e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d123      	bne.n	8002abe <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	833b      	strh	r3, [r7, #24]
 8002a92:	8b3b      	ldrh	r3, [r7, #24]
 8002a94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a98:	833b      	strh	r3, [r7, #24]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	441a      	add	r2, r3
 8002aa8:	8b3b      	ldrh	r3, [r7, #24]
 8002aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01f      	beq.n	8002b08 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	461a      	mov	r2, r3
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae2:	82fb      	strh	r3, [r7, #22]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	441a      	add	r2, r3
 8002af2:	8afb      	ldrh	r3, [r7, #22]
 8002af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b08:	8b7b      	ldrh	r3, [r7, #26]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8087 	beq.w	8002c1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6959      	ldr	r1, [r3, #20]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	891a      	ldrh	r2, [r3, #8]
 8002b1c:	8b7b      	ldrh	r3, [r7, #26]
 8002b1e:	f004 f8ba 	bl	8006c96 <USB_ReadPMA>
 8002b22:	e07c      	b.n	8002c1e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	3306      	adds	r3, #6
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	699a      	ldr	r2, [r3, #24]
 8002b52:	8b7b      	ldrh	r3, [r7, #26]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d306      	bcc.n	8002b66 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	8b7b      	ldrh	r3, [r7, #26]
 8002b5e:	1ad2      	subs	r2, r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	619a      	str	r2, [r3, #24]
 8002b64:	e002      	b.n	8002b6c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d123      	bne.n	8002bbc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	461a      	mov	r2, r3
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b8e:	83fb      	strh	r3, [r7, #30]
 8002b90:	8bfb      	ldrh	r3, [r7, #30]
 8002b92:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b96:	83fb      	strh	r3, [r7, #30]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	8bfb      	ldrh	r3, [r7, #30]
 8002ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11f      	bne.n	8002c06 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be0:	83bb      	strh	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	8bbb      	ldrh	r3, [r7, #28]
 8002bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c06:	8b7b      	ldrh	r3, [r7, #26]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d008      	beq.n	8002c1e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6959      	ldr	r1, [r3, #20]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	895a      	ldrh	r2, [r3, #10]
 8002c18:	8b7b      	ldrh	r3, [r7, #26]
 8002c1a:	f004 f83c 	bl	8006c96 <USB_ReadPMA>
    }
  }

  return count;
 8002c1e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b094      	sub	sp, #80	; 0x50
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8138 	beq.w	8002eb2 <HAL_PCD_EP_DB_Transmit+0x28a>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	4413      	add	r3, r2
 8002c56:	3302      	adds	r3, #2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len > TxByteNbre)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d907      	bls.n	8002c8a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	699a      	ldr	r2, [r3, #24]
 8002c7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	619a      	str	r2, [r3, #24]
 8002c88:	e002      	b.n	8002c90 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d12c      	bne.n	8002cf2 <HAL_PCD_EP_DB_Transmit+0xca>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f008 f9cd 	bl	800b03e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 823a 	beq.w	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cca:	82fb      	strh	r3, [r7, #22]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	8afb      	ldrh	r3, [r7, #22]
 8002cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	8013      	strh	r3, [r2, #0]
 8002cf0:	e218      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01f      	beq.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x114>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d16:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	f040 81ee 	bne.w	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d50:	441a      	add	r2, r3
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d5e:	441a      	add	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d309      	bcc.n	8002d84 <HAL_PCD_EP_DB_Transmit+0x15c>
        {
          len = ep->maxpacket;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7c:	1ad2      	subs	r2, r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	621a      	str	r2, [r3, #32]
 8002d82:	e015      	b.n	8002db0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else if (ep->xfer_len_db == 0U)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x174>
        {
          len = TxByteNbre;
 8002d8c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002d90:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d9a:	e009      	b.n	8002db0 <HAL_PCD_EP_DB_Transmit+0x188>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	785b      	ldrb	r3, [r3, #1]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d155      	bne.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x23c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	4413      	add	r3, r2
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	011a      	lsls	r2, r3, #4
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d112      	bne.n	8002e0c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	801a      	strh	r2, [r3, #0]
 8002e0a:	e047      	b.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x274>
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002e10:	d811      	bhi.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x20e>
 8002e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x200>
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	3301      	adds	r3, #1
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	029b      	lsls	r3, r3, #10
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	e032      	b.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x274>
 8002e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x224>
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	029b      	lsls	r3, r3, #10
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	801a      	strh	r2, [r3, #0]
 8002e62:	e01b      	b.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x274>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	785b      	ldrb	r3, [r3, #1]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d117      	bne.n	8002e9c <HAL_PCD_EP_DB_Transmit+0x274>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	4413      	add	r3, r2
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	011a      	lsls	r2, r3, #4
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e92:	623b      	str	r3, [r7, #32]
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6959      	ldr	r1, [r3, #20]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	891a      	ldrh	r2, [r3, #8]
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	f003 feae 	bl	8006c0c <USB_WritePMA>
 8002eb0:	e138      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    if (ep->xfer_len >= TxByteNbre)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d307      	bcc.n	8002efa <HAL_PCD_EP_DB_Transmit+0x2d2>
    {
      ep->xfer_len -= TxByteNbre;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002ef2:	1ad2      	subs	r2, r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	619a      	str	r2, [r3, #24]
 8002ef8:	e002      	b.n	8002f00 <HAL_PCD_EP_DB_Transmit+0x2d8>
    }
    else
    {
      ep->xfer_len = 0U;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12e      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x33e>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f008 f895 	bl	800b03e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f040 8102 	bne.w	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	441a      	add	r2, r3
 8002f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8013      	strh	r3, [r2, #0]
 8002f64:	e0de      	b.n	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11f      	bne.n	8002fb0 <HAL_PCD_EP_DB_Transmit+0x388>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	441a      	add	r2, r3
 8002f9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	f040 80b4 	bne.w	8003124 <HAL_PCD_EP_DB_Transmit+0x4fc>
      {
        ep->xfer_buff += TxByteNbre;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fc4:	441a      	add	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002fd2:	441a      	add	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	6a1a      	ldr	r2, [r3, #32]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d309      	bcc.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x3d0>
        {
          len = ep->maxpacket;
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db -= len;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	6a1a      	ldr	r2, [r3, #32]
 8002fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ff0:	1ad2      	subs	r2, r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	621a      	str	r2, [r3, #32]
 8002ff6:	e015      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else if (ep->xfer_len_db == 0U)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d107      	bne.n	8003010 <HAL_PCD_EP_DB_Transmit+0x3e8>
        {
          len = TxByteNbre;
 8003000:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_fill_db = 0U;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800300e:	e009      	b.n	8003024 <HAL_PCD_EP_DB_Transmit+0x3fc>
        }
        else
        {
          len = ep->xfer_len_db;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	647b      	str	r3, [r7, #68]	; 0x44
          ep->xfer_len_db = 0U;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2200      	movs	r2, #0
 800301a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d155      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x4b6>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	63bb      	str	r3, [r7, #56]	; 0x38
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003040:	b29b      	uxth	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003046:	4413      	add	r3, r2
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	011a      	lsls	r2, r3, #4
 8003050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003052:	4413      	add	r3, r2
 8003054:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003058:	637b      	str	r3, [r7, #52]	; 0x34
 800305a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305c:	2b00      	cmp	r3, #0
 800305e:	d112      	bne.n	8003086 <HAL_PCD_EP_DB_Transmit+0x45e>
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800306a:	b29a      	uxth	r2, r3
 800306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307e:	b29a      	uxth	r2, r3
 8003080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	e044      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003088:	2b3e      	cmp	r3, #62	; 0x3e
 800308a:	d811      	bhi.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x488>
 800308c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x47a>
 800309c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309e:	3301      	adds	r3, #1
 80030a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	e02f      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_PCD_EP_DB_Transmit+0x49e>
 80030c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c2:	3b01      	subs	r3, #1
 80030c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	029b      	lsls	r3, r3, #10
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e018      	b.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d114      	bne.n	8003110 <HAL_PCD_EP_DB_Transmit+0x4e8>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030f4:	4413      	add	r3, r2
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003100:	4413      	add	r3, r2
 8003102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	b29a      	uxth	r2, r3
 800310c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6959      	ldr	r1, [r3, #20]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	895a      	ldrh	r2, [r3, #10]
 800311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311e:	b29b      	uxth	r3, r3
 8003120:	f003 fd74 	bl	8006c0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313e:	82bb      	strh	r3, [r7, #20]
 8003140:	8abb      	ldrh	r3, [r7, #20]
 8003142:	f083 0310 	eor.w	r3, r3, #16
 8003146:	82bb      	strh	r3, [r7, #20]
 8003148:	8abb      	ldrh	r3, [r7, #20]
 800314a:	f083 0320 	eor.w	r3, r3, #32
 800314e:	82bb      	strh	r3, [r7, #20]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	441a      	add	r2, r3
 800315e:	8abb      	ldrh	r3, [r7, #20]
 8003160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	b29b      	uxth	r3, r3
 8003172:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3750      	adds	r7, #80	; 0x50
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800317e:	b480      	push	{r7}
 8003180:	b087      	sub	sp, #28
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	607b      	str	r3, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	817b      	strh	r3, [r7, #10]
 800318c:	4613      	mov	r3, r2
 800318e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00b      	beq.n	80031b4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800319c:	897b      	ldrh	r3, [r7, #10]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e009      	b.n	80031c8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031b4:	897a      	ldrh	r2, [r7, #10]
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80031c8:	893b      	ldrh	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d107      	bne.n	80031de <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2200      	movs	r2, #0
 80031d2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	80da      	strh	r2, [r3, #6]
 80031dc:	e00b      	b.n	80031f6 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2201      	movs	r2, #1
 80031e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	0c1b      	lsrs	r3, r3, #16
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
	...

08003204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e26c      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8087 	beq.w	8003332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003224:	4b92      	ldr	r3, [pc, #584]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 030c 	and.w	r3, r3, #12
 800322c:	2b04      	cmp	r3, #4
 800322e:	d00c      	beq.n	800324a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003230:	4b8f      	ldr	r3, [pc, #572]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b08      	cmp	r3, #8
 800323a:	d112      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
 800323c:	4b8c      	ldr	r3, [pc, #560]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003248:	d10b      	bne.n	8003262 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800324a:	4b89      	ldr	r3, [pc, #548]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d06c      	beq.n	8003330 <HAL_RCC_OscConfig+0x12c>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d168      	bne.n	8003330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e246      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800326a:	d106      	bne.n	800327a <HAL_RCC_OscConfig+0x76>
 800326c:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a7f      	ldr	r2, [pc, #508]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	e02e      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b7b      	ldr	r3, [pc, #492]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a7a      	ldr	r2, [pc, #488]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b78      	ldr	r3, [pc, #480]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a77      	ldr	r2, [pc, #476]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e01d      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0xbc>
 80032a6:	4b72      	ldr	r3, [pc, #456]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a71      	ldr	r2, [pc, #452]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a6e      	ldr	r2, [pc, #440]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_OscConfig+0xd4>
 80032c0:	4b6b      	ldr	r3, [pc, #428]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6a      	ldr	r2, [pc, #424]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b68      	ldr	r3, [pc, #416]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a67      	ldr	r2, [pc, #412]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d013      	beq.n	8003308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe f812 	bl	8001308 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe f80e 	bl	8001308 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1fa      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b5d      	ldr	r3, [pc, #372]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0xe4>
 8003306:	e014      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fd fffe 	bl	8001308 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003310:	f7fd fffa 	bl	8001308 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b64      	cmp	r3, #100	; 0x64
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1e6      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x10c>
 800332e:	e000      	b.n	8003332 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d063      	beq.n	8003406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b4c      	ldr	r3, [pc, #304]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 030c 	and.w	r3, r3, #12
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00b      	beq.n	8003362 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800334a:	4b49      	ldr	r3, [pc, #292]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b08      	cmp	r3, #8
 8003354:	d11c      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
 8003356:	4b46      	ldr	r3, [pc, #280]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d116      	bne.n	8003390 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003362:	4b43      	ldr	r3, [pc, #268]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d001      	beq.n	800337a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e1ba      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	4939      	ldr	r1, [pc, #228]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800338a:	4313      	orrs	r3, r2
 800338c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800338e:	e03a      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d020      	beq.n	80033da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003398:	4b36      	ldr	r3, [pc, #216]	; (8003474 <HAL_RCC_OscConfig+0x270>)
 800339a:	2201      	movs	r2, #1
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fd ffb3 	bl	8001308 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fd ffaf 	bl	8001308 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e19b      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b8:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b2a      	ldr	r3, [pc, #168]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4927      	ldr	r1, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	600b      	str	r3, [r1, #0]
 80033d8:	e015      	b.n	8003406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b26      	ldr	r3, [pc, #152]	; (8003474 <HAL_RCC_OscConfig+0x270>)
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e0:	f7fd ff92 	bl	8001308 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e8:	f7fd ff8e 	bl	8001308 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e17a      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d03a      	beq.n	8003488 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCC_OscConfig+0x274>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003420:	f7fd ff72 	bl	8001308 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003428:	f7fd ff6e 	bl	8001308 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e15a      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <HAL_RCC_OscConfig+0x26c>)
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003446:	2001      	movs	r0, #1
 8003448:	f000 fac4 	bl	80039d4 <RCC_Delay>
 800344c:	e01c      	b.n	8003488 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800344e:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <HAL_RCC_OscConfig+0x274>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fd ff58 	bl	8001308 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800345a:	e00f      	b.n	800347c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800345c:	f7fd ff54 	bl	8001308 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d908      	bls.n	800347c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e140      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
 8003474:	42420000 	.word	0x42420000
 8003478:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800347c:	4b9e      	ldr	r3, [pc, #632]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e9      	bne.n	800345c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80a6 	beq.w	80035e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003496:	2300      	movs	r3, #0
 8003498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349a:	4b97      	ldr	r3, [pc, #604]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10d      	bne.n	80034c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a6:	4b94      	ldr	r3, [pc, #592]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	4a93      	ldr	r2, [pc, #588]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80034ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b0:	61d3      	str	r3, [r2, #28]
 80034b2:	4b91      	ldr	r3, [pc, #580]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034be:	2301      	movs	r3, #1
 80034c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	4b8e      	ldr	r3, [pc, #568]	; (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d118      	bne.n	8003500 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ce:	4b8b      	ldr	r3, [pc, #556]	; (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a8a      	ldr	r2, [pc, #552]	; (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034da:	f7fd ff15 	bl	8001308 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e2:	f7fd ff11 	bl	8001308 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b64      	cmp	r3, #100	; 0x64
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e0fd      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	4b81      	ldr	r3, [pc, #516]	; (80036fc <HAL_RCC_OscConfig+0x4f8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x312>
 8003508:	4b7b      	ldr	r3, [pc, #492]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a7a      	ldr	r2, [pc, #488]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	e02d      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0x334>
 800351e:	4b76      	ldr	r3, [pc, #472]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a75      	ldr	r2, [pc, #468]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	6213      	str	r3, [r2, #32]
 800352a:	4b73      	ldr	r3, [pc, #460]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a72      	ldr	r2, [pc, #456]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	e01c      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d10c      	bne.n	800355a <HAL_RCC_OscConfig+0x356>
 8003540:	4b6d      	ldr	r3, [pc, #436]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	4a6c      	ldr	r2, [pc, #432]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003546:	f043 0304 	orr.w	r3, r3, #4
 800354a:	6213      	str	r3, [r2, #32]
 800354c:	4b6a      	ldr	r3, [pc, #424]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003552:	f043 0301 	orr.w	r3, r3, #1
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	e00b      	b.n	8003572 <HAL_RCC_OscConfig+0x36e>
 800355a:	4b67      	ldr	r3, [pc, #412]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	4a66      	ldr	r2, [pc, #408]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003560:	f023 0301 	bic.w	r3, r3, #1
 8003564:	6213      	str	r3, [r2, #32]
 8003566:	4b64      	ldr	r3, [pc, #400]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a63      	ldr	r2, [pc, #396]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800356c:	f023 0304 	bic.w	r3, r3, #4
 8003570:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d015      	beq.n	80035a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fd fec5 	bl	8001308 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd fec1 	bl	8001308 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e0ab      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCC_OscConfig+0x37e>
 80035a4:	e014      	b.n	80035d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a6:	f7fd feaf 	bl	8001308 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ac:	e00a      	b.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ae:	f7fd feab 	bl	8001308 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035bc:	4293      	cmp	r3, r2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e095      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c4:	4b4c      	ldr	r3, [pc, #304]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	6a1b      	ldr	r3, [r3, #32]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ee      	bne.n	80035ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d105      	bne.n	80035e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b48      	ldr	r3, [pc, #288]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	4a47      	ldr	r2, [pc, #284]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80035dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 8081 	beq.w	80036ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ec:	4b42      	ldr	r3, [pc, #264]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d061      	beq.n	80036bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d146      	bne.n	800368e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <HAL_RCC_OscConfig+0x4fc>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003606:	f7fd fe7f 	bl	8001308 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800360e:	f7fd fe7b 	bl	8001308 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e067      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f0      	bne.n	800360e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d108      	bne.n	8003648 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003636:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	492d      	ldr	r1, [pc, #180]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003648:	4b2b      	ldr	r3, [pc, #172]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a19      	ldr	r1, [r3, #32]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	430b      	orrs	r3, r1
 800365a:	4927      	ldr	r1, [pc, #156]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x4fc>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fd fe4f 	bl	8001308 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366e:	f7fd fe4b 	bl	8001308 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e037      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003680:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x46a>
 800368c:	e02f      	b.n	80036ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <HAL_RCC_OscConfig+0x4fc>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fd fe38 	bl	8001308 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369c:	f7fd fe34 	bl	8001308 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e020      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x498>
 80036ba:	e018      	b.n	80036ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69db      	ldr	r3, [r3, #28]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e013      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	; (80036f8 <HAL_RCC_OscConfig+0x4f4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d001      	beq.n	80036ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000
 80036fc:	40007000 	.word	0x40007000
 8003700:	42420060 	.word	0x42420060

08003704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d0      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b6a      	ldr	r3, [pc, #424]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d910      	bls.n	8003748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b67      	ldr	r3, [pc, #412]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 0207 	bic.w	r2, r3, #7
 800372e:	4965      	ldr	r1, [pc, #404]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b8      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003760:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800376a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003778:	4b53      	ldr	r3, [pc, #332]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	4a52      	ldr	r2, [pc, #328]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 800377e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	494d      	ldr	r1, [pc, #308]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d040      	beq.n	8003824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07f      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e073      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b39      	ldr	r3, [pc, #228]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4936      	ldr	r1, [pc, #216]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f4:	f7fd fd88 	bl	8001308 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fd fd84 	bl	8001308 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	; 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e053      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b27      	ldr	r3, [pc, #156]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d210      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b24      	ldr	r3, [pc, #144]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 0207 	bic.w	r2, r3, #7
 800383a:	4922      	ldr	r1, [pc, #136]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e032      	b.n	80038ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4916      	ldr	r1, [pc, #88]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387e:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	490e      	ldr	r1, [pc, #56]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003892:	f000 f821 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_ClockConfig+0x1c4>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490a      	ldr	r1, [pc, #40]	; (80038cc <HAL_RCC_ClockConfig+0x1c8>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a09      	ldr	r2, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x1cc>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_ClockConfig+0x1d0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fd1e 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40022000 	.word	0x40022000
 80038c8:	40021000 	.word	0x40021000
 80038cc:	0800b684 	.word	0x0800b684
 80038d0:	20000100 	.word	0x20000100
 80038d4:	20000104 	.word	0x20000104

080038d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	b490      	push	{r4, r7}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038de:	4b2a      	ldr	r3, [pc, #168]	; (8003988 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038e0:	1d3c      	adds	r4, r7, #4
 80038e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038e8:	f240 2301 	movw	r3, #513	; 0x201
 80038ec:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	2300      	movs	r3, #0
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x40>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x46>
 8003916:	e02d      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_RCC_GetSysClockFreq+0xb8>)
 800391a:	623b      	str	r3, [r7, #32]
      break;
 800391c:	e02d      	b.n	800397a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800392a:	4413      	add	r3, r2
 800392c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003930:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d013      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCC_GetSysClockFreq+0xb4>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0c5b      	lsrs	r3, r3, #17
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800394a:	4413      	add	r3, r2
 800394c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003950:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	4a0e      	ldr	r2, [pc, #56]	; (8003990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003956:	fb02 f203 	mul.w	r2, r2, r3
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	e004      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	4a0b      	ldr	r2, [pc, #44]	; (8003994 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	623b      	str	r3, [r7, #32]
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b06      	ldr	r3, [pc, #24]	; (8003990 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003976:	623b      	str	r3, [r7, #32]
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	6a3b      	ldr	r3, [r7, #32]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3728      	adds	r7, #40	; 0x28
 8003980:	46bd      	mov	sp, r7
 8003982:	bc90      	pop	{r4, r7}
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	0800b5b8 	.word	0x0800b5b8
 800398c:	40021000 	.word	0x40021000
 8003990:	007a1200 	.word	0x007a1200
 8003994:	003d0900 	.word	0x003d0900

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b02      	ldr	r3, [pc, #8]	; (80039a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000100 	.word	0x20000100

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff2 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	0800b694 	.word	0x0800b694

080039d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCC_Delay+0x34>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <RCC_Delay+0x38>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039f0:	bf00      	nop
  }
  while (Delay --);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	60fa      	str	r2, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f9      	bne.n	80039f0 <RCC_Delay+0x1c>
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	20000100 	.word	0x20000100
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d118      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a70:	f7fd fc4a 	bl	8001308 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fd fc46 	bl	8001308 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e06d      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02e      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d027      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fd fc15 	bl	8001308 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fd fc11 	bl	8001308 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e036      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	490b      	ldr	r1, [pc, #44]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	42420440 	.word	0x42420440

08003b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e041      	b.n	8003c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fd fc4e 	bl	8001444 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f000 fd6c 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d001      	beq.n	8003c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e03a      	b.n	8003caa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <HAL_TIM_Base_Start_IT+0x98>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00e      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d009      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d004      	beq.n	8003c74 <HAL_TIM_Base_Start_IT+0x58>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a13      	ldr	r2, [pc, #76]	; (8003cbc <HAL_TIM_Base_Start_IT+0xa0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d111      	bne.n	8003c98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d010      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f042 0201 	orr.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	e007      	b.n	8003ca8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800

08003cc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_TIM_Base_Stop_IT+0x48>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6a1a      	ldr	r2, [r3, #32]
 8003cee:	f240 4344 	movw	r3, #1092	; 0x444
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d107      	bne.n	8003d08 <HAL_TIM_Base_Stop_IT+0x48>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e041      	b.n	8003db2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fb24 	bl	8001390 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fc9c 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0x1a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	e013      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x42>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d104      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0x2a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x42>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d104      	bne.n	8003df6 <HAL_TIM_IC_Start_IT+0x3a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e003      	b.n	8003dfe <HAL_TIM_IC_Start_IT+0x42>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_TIM_IC_Start_IT+0x54>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e013      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0x7c>
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d104      	bne.n	8003e20 <HAL_TIM_IC_Start_IT+0x64>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	e00b      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0x7c>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b08      	cmp	r3, #8
 8003e24:	d104      	bne.n	8003e30 <HAL_TIM_IC_Start_IT+0x74>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	e003      	b.n	8003e38 <HAL_TIM_IC_Start_IT+0x7c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e40:	7bbb      	ldrb	r3, [r7, #14]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e0b3      	b.n	8003fb2 <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d104      	bne.n	8003e5a <HAL_TIM_IC_Start_IT+0x9e>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2202      	movs	r2, #2
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e58:	e013      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0xc6>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_IC_Start_IT+0xae>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e68:	e00b      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0xc6>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_IC_Start_IT+0xbe>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e78:	e003      	b.n	8003e82 <HAL_TIM_IC_Start_IT+0xc6>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d104      	bne.n	8003e92 <HAL_TIM_IC_Start_IT+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e90:	e013      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xfe>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d104      	bne.n	8003ea2 <HAL_TIM_IC_Start_IT+0xe6>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xfe>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d104      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0xf6>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb0:	e003      	b.n	8003eba <HAL_TIM_IC_Start_IT+0xfe>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	d841      	bhi.n	8003f44 <HAL_TIM_IC_Start_IT+0x188>
 8003ec0:	a201      	add	r2, pc, #4	; (adr r2, 8003ec8 <HAL_TIM_IC_Start_IT+0x10c>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003efd 	.word	0x08003efd
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f45 	.word	0x08003f45
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f0f 	.word	0x08003f0f
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f21 	.word	0x08003f21
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f33 	.word	0x08003f33
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0202 	orr.w	r2, r2, #2
 8003f0a:	60da      	str	r2, [r3, #12]
      break;
 8003f0c:	e01b      	b.n	8003f46 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	60da      	str	r2, [r3, #12]
      break;
 8003f1e:	e012      	b.n	8003f46 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0208 	orr.w	r2, r2, #8
 8003f2e:	60da      	str	r2, [r3, #12]
      break;
 8003f30:	e009      	b.n	8003f46 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0210 	orr.w	r2, r2, #16
 8003f40:	60da      	str	r2, [r3, #12]
      break;
 8003f42:	e000      	b.n	8003f46 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8003f44:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fda7 	bl	8004aa2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a18      	ldr	r2, [pc, #96]	; (8003fbc <HAL_TIM_IC_Start_IT+0x200>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00e      	beq.n	8003f7c <HAL_TIM_IC_Start_IT+0x1c0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f66:	d009      	beq.n	8003f7c <HAL_TIM_IC_Start_IT+0x1c0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_TIM_IC_Start_IT+0x204>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <HAL_TIM_IC_Start_IT+0x1c0>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <HAL_TIM_IC_Start_IT+0x208>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d111      	bne.n	8003fa0 <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d010      	beq.n	8003fb0 <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f9e:	e007      	b.n	8003fb0 <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0201 	orr.w	r2, r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800

08003fc8 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	d841      	bhi.n	800405c <HAL_TIM_IC_Stop_IT+0x94>
 8003fd8:	a201      	add	r2, pc, #4	; (adr r2, 8003fe0 <HAL_TIM_IC_Stop_IT+0x18>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004015 	.word	0x08004015
 8003fe4:	0800405d 	.word	0x0800405d
 8003fe8:	0800405d 	.word	0x0800405d
 8003fec:	0800405d 	.word	0x0800405d
 8003ff0:	08004027 	.word	0x08004027
 8003ff4:	0800405d 	.word	0x0800405d
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	0800405d 	.word	0x0800405d
 8004000:	08004039 	.word	0x08004039
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800405d 	.word	0x0800405d
 8004010:	0800404b 	.word	0x0800404b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0202 	bic.w	r2, r2, #2
 8004022:	60da      	str	r2, [r3, #12]
      break;
 8004024:	e01b      	b.n	800405e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0204 	bic.w	r2, r2, #4
 8004034:	60da      	str	r2, [r3, #12]
      break;
 8004036:	e012      	b.n	800405e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0208 	bic.w	r2, r2, #8
 8004046:	60da      	str	r2, [r3, #12]
      break;
 8004048:	e009      	b.n	800405e <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68da      	ldr	r2, [r3, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f022 0210 	bic.w	r2, r2, #16
 8004058:	60da      	str	r2, [r3, #12]
      break;
 800405a:	e000      	b.n	800405e <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 800405c:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	6839      	ldr	r1, [r7, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fd1b 	bl	8004aa2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6a1a      	ldr	r2, [r3, #32]
 8004072:	f241 1311 	movw	r3, #4369	; 0x1111
 8004076:	4013      	ands	r3, r2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10f      	bne.n	800409c <HAL_TIM_IC_Stop_IT+0xd4>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	f240 4344 	movw	r3, #1092	; 0x444
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_TIM_IC_Stop_IT+0xd4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_TIM_IC_Stop_IT+0xe4>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040aa:	e013      	b.n	80040d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d104      	bne.n	80040bc <HAL_TIM_IC_Stop_IT+0xf4>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ba:	e00b      	b.n	80040d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d104      	bne.n	80040cc <HAL_TIM_IC_Stop_IT+0x104>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_IC_Stop_IT+0x10c>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d104      	bne.n	80040e4 <HAL_TIM_IC_Stop_IT+0x11c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040e2:	e013      	b.n	800410c <HAL_TIM_IC_Stop_IT+0x144>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d104      	bne.n	80040f4 <HAL_TIM_IC_Stop_IT+0x12c>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040f2:	e00b      	b.n	800410c <HAL_TIM_IC_Stop_IT+0x144>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d104      	bne.n	8004104 <HAL_TIM_IC_Stop_IT+0x13c>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004102:	e003      	b.n	800410c <HAL_TIM_IC_Stop_IT+0x144>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop

08004118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0202 	mvn.w	r2, #2
 8004144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fc fea0 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fa7c 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fa82 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0204 	mvn.w	r2, #4
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fe76 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fa52 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fa58 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fc fe4c 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 fa28 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fa2e 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fe22 	bl	8000ea0 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f9fe 	bl	8004660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fa04 	bl	8004672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0201 	mvn.w	r2, #1
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fde2 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d10e      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fc79 	bl	8004bba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9c8 	bl	8004684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0220 	mvn.w	r2, #32
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc44 	bl	8004ba8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_TIM_IC_ConfigChannel+0x1a>
 800433e:	2302      	movs	r3, #2
 8004340:	e082      	b.n	8004448 <HAL_TIM_IC_ConfigChannel+0x120>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11b      	bne.n	8004388 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f000 f9fc 	bl	800475c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699a      	ldr	r2, [r3, #24]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 020c 	bic.w	r2, r2, #12
 8004372:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6999      	ldr	r1, [r3, #24]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	619a      	str	r2, [r3, #24]
 8004386:	e05a      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d11c      	bne.n	80043c8 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f000 fa65 	bl	800486c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043b0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6999      	ldr	r1, [r3, #24]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	021a      	lsls	r2, r3, #8
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]
 80043c6:	e03a      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d11b      	bne.n	8004406 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6818      	ldr	r0, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f000 fab0 	bl	8004942 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69da      	ldr	r2, [r3, #28]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 020c 	bic.w	r2, r2, #12
 80043f0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69d9      	ldr	r1, [r3, #28]
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	61da      	str	r2, [r3, #28]
 8004404:	e01b      	b.n	800443e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f000 facf 	bl	80049b8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004428:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69d9      	ldr	r1, [r3, #28]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	021a      	lsls	r2, r3, #8
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIM_ConfigClockSource+0x18>
 8004464:	2302      	movs	r3, #2
 8004466:	e0b3      	b.n	80045d0 <HAL_TIM_ConfigClockSource+0x180>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004486:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800448e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a0:	d03e      	beq.n	8004520 <HAL_TIM_ConfigClockSource+0xd0>
 80044a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a6:	f200 8087 	bhi.w	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ae:	f000 8085 	beq.w	80045bc <HAL_TIM_ConfigClockSource+0x16c>
 80044b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b6:	d87f      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044b8:	2b70      	cmp	r3, #112	; 0x70
 80044ba:	d01a      	beq.n	80044f2 <HAL_TIM_ConfigClockSource+0xa2>
 80044bc:	2b70      	cmp	r3, #112	; 0x70
 80044be:	d87b      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044c0:	2b60      	cmp	r3, #96	; 0x60
 80044c2:	d050      	beq.n	8004566 <HAL_TIM_ConfigClockSource+0x116>
 80044c4:	2b60      	cmp	r3, #96	; 0x60
 80044c6:	d877      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044c8:	2b50      	cmp	r3, #80	; 0x50
 80044ca:	d03c      	beq.n	8004546 <HAL_TIM_ConfigClockSource+0xf6>
 80044cc:	2b50      	cmp	r3, #80	; 0x50
 80044ce:	d873      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d058      	beq.n	8004586 <HAL_TIM_ConfigClockSource+0x136>
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d86f      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044d8:	2b30      	cmp	r3, #48	; 0x30
 80044da:	d064      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x156>
 80044dc:	2b30      	cmp	r3, #48	; 0x30
 80044de:	d86b      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d060      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x156>
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d867      	bhi.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d05c      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x156>
 80044ec:	2b10      	cmp	r3, #16
 80044ee:	d05a      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80044f0:	e062      	b.n	80045b8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	6899      	ldr	r1, [r3, #8]
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f000 faaf 	bl	8004a64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004514:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	609a      	str	r2, [r3, #8]
      break;
 800451e:	e04e      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6899      	ldr	r1, [r3, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f000 fa98 	bl	8004a64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689a      	ldr	r2, [r3, #8]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004542:	609a      	str	r2, [r3, #8]
      break;
 8004544:	e03b      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6859      	ldr	r1, [r3, #4]
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	461a      	mov	r2, r3
 8004554:	f000 f95c 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2150      	movs	r1, #80	; 0x50
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fa66 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 8004564:	e02b      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6859      	ldr	r1, [r3, #4]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	461a      	mov	r2, r3
 8004574:	f000 f9b6 	bl	80048e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2160      	movs	r1, #96	; 0x60
 800457e:	4618      	mov	r0, r3
 8004580:	f000 fa56 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 8004584:	e01b      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6859      	ldr	r1, [r3, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	461a      	mov	r2, r3
 8004594:	f000 f93c 	bl	8004810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2140      	movs	r1, #64	; 0x40
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fa46 	bl	8004a30 <TIM_ITRx_SetConfig>
      break;
 80045a4:	e00b      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f000 fa3d 	bl	8004a30 <TIM_ITRx_SetConfig>
        break;
 80045b6:	e002      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045b8:	bf00      	nop
 80045ba:	e000      	b.n	80045be <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3710      	adds	r7, #16
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b0c      	cmp	r3, #12
 80045ea:	d831      	bhi.n	8004650 <HAL_TIM_ReadCapturedValue+0x78>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004629 	.word	0x08004629
 80045f8:	08004651 	.word	0x08004651
 80045fc:	08004651 	.word	0x08004651
 8004600:	08004651 	.word	0x08004651
 8004604:	08004633 	.word	0x08004633
 8004608:	08004651 	.word	0x08004651
 800460c:	08004651 	.word	0x08004651
 8004610:	08004651 	.word	0x08004651
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004651 	.word	0x08004651
 800461c:	08004651 	.word	0x08004651
 8004620:	08004651 	.word	0x08004651
 8004624:	08004647 	.word	0x08004647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	60fb      	str	r3, [r7, #12]

      break;
 8004630:	e00f      	b.n	8004652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	60fb      	str	r3, [r7, #12]

      break;
 800463a:	e00a      	b.n	8004652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	60fb      	str	r3, [r7, #12]

      break;
 8004644:	e005      	b.n	8004652 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	60fb      	str	r3, [r7, #12]

      break;
 800464e:	e000      	b.n	8004652 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004650:	bf00      	nop
  }

  return tmpreg;
 8004652:	68fb      	ldr	r3, [r7, #12]
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop

08004660 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr

08004672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800467a:	bf00      	nop
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	bc80      	pop	{r7}
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr
	...

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00b      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d007      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a26      	ldr	r2, [pc, #152]	; (8004754 <TIM_Base_SetConfig+0xbc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d003      	beq.n	80046c8 <TIM_Base_SetConfig+0x30>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a25      	ldr	r2, [pc, #148]	; (8004758 <TIM_Base_SetConfig+0xc0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d108      	bne.n	80046da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00b      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d007      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <TIM_Base_SetConfig+0xbc>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d003      	beq.n	80046fa <TIM_Base_SetConfig+0x62>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <TIM_Base_SetConfig+0xc0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d108      	bne.n	800470c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a07      	ldr	r2, [pc, #28]	; (8004750 <TIM_Base_SetConfig+0xb8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d103      	bne.n	8004740 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	615a      	str	r2, [r3, #20]
}
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	bc80      	pop	{r7}
 800474e:	4770      	bx	lr
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800

0800475c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	f023 0201 	bic.w	r2, r3, #1
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <TIM_TI1_SetConfig+0xa8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004790:	d007      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <TIM_TI1_SetConfig+0xac>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_TI1_SetConfig+0x46>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <TIM_TI1_SetConfig+0xb0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d101      	bne.n	80047a6 <TIM_TI1_SetConfig+0x4a>
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <TIM_TI1_SetConfig+0x4c>
 80047a6:	2300      	movs	r3, #0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e003      	b.n	80047c6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f023 030a 	bic.w	r3, r3, #10
 80047e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f003 030a 	and.w	r3, r3, #10
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	621a      	str	r2, [r3, #32]
}
 80047fa:	bf00      	nop
 80047fc:	371c      	adds	r7, #28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	f023 0201 	bic.w	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800483a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	011b      	lsls	r3, r3, #4
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	4313      	orrs	r3, r2
 8004844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 030a 	bic.w	r3, r3, #10
 800484c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	621a      	str	r2, [r3, #32]
}
 8004862:	bf00      	nop
 8004864:	371c      	adds	r7, #28
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f023 0210 	bic.w	r2, r3, #16
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	021b      	lsls	r3, r3, #8
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	031b      	lsls	r3, r3, #12
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	621a      	str	r2, [r3, #32]
}
 80048da:	bf00      	nop
 80048dc:	371c      	adds	r7, #28
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr

080048e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 0210 	bic.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	031b      	lsls	r3, r3, #12
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	4313      	orrs	r3, r2
 8004918:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004920:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	621a      	str	r2, [r3, #32]
}
 8004938:	bf00      	nop
 800493a:	371c      	adds	r7, #28
 800493c:	46bd      	mov	sp, r7
 800493e:	bc80      	pop	{r7}
 8004940:	4770      	bx	lr

08004942 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	b2db      	uxtb	r3, r3
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004992:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	621a      	str	r2, [r3, #32]
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b087      	sub	sp, #28
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
 80049c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	031b      	lsls	r3, r3, #12
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	031b      	lsls	r3, r3, #12
 8004a10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	621a      	str	r2, [r3, #32]
}
 8004a26:	bf00      	nop
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f043 0307 	orr.w	r3, r3, #7
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	609a      	str	r2, [r3, #8]
}
 8004a5a:	bf00      	nop
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	431a      	orrs	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	609a      	str	r2, [r3, #8]
}
 8004a98:	bf00      	nop
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	f003 031f 	and.w	r3, r3, #31
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1a      	ldr	r2, [r3, #32]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1a      	ldr	r2, [r3, #32]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	431a      	orrs	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e046      	b.n	8004b92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a16      	ldr	r2, [pc, #88]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d00e      	beq.n	8004b66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b50:	d009      	beq.n	8004b66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d10c      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40000800 	.word	0x40000800

08004ba8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bc80      	pop	{r7}
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004bcc:	b084      	sub	sp, #16
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	f107 0014 	add.w	r0, r7, #20
 8004bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr

08004bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004bfc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c20:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c24:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4013      	ands	r3, r2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr

08004c64 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c64:	b084      	sub	sp, #16
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
 8004c6e:	f107 0014 	add.w	r0, r7, #20
 8004c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr

08004ca4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b09b      	sub	sp, #108	; 0x6c
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	78db      	ldrb	r3, [r3, #3]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d81f      	bhi.n	8004d16 <USB_ActivateEndpoint+0x72>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <USB_ActivateEndpoint+0x38>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004ced 	.word	0x08004ced
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d1f 	.word	0x08004d1f
 8004ce8:	08004cfb 	.word	0x08004cfb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004cec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cf4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004cf8:	e012      	b.n	8004d20 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004cfa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004cfe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d02:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d06:	e00b      	b.n	8004d20 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d08:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d0c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d10:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004d14:	e004      	b.n	8004d20 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004d1c:	e000      	b.n	8004d20 <USB_ActivateEndpoint+0x7c>
      break;
 8004d1e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	441a      	add	r2, r3
 8004d70:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	7b1b      	ldrb	r3, [r3, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f040 8149 	bne.w	8005024 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	785b      	ldrb	r3, [r3, #1]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	f000 8084 	beq.w	8004ea4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	011a      	lsls	r2, r3, #4
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	88db      	ldrh	r3, [r3, #6]
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	81fb      	strh	r3, [r7, #14]
 8004dde:	89fb      	ldrh	r3, [r7, #14]
 8004de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d01b      	beq.n	8004e20 <USB_ActivateEndpoint+0x17c>
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	81bb      	strh	r3, [r7, #12]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	89bb      	ldrh	r3, [r7, #12]
 8004e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	78db      	ldrb	r3, [r3, #3]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d020      	beq.n	8004e6a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e3e:	813b      	strh	r3, [r7, #8]
 8004e40:	893b      	ldrh	r3, [r7, #8]
 8004e42:	f083 0320 	eor.w	r3, r3, #32
 8004e46:	813b      	strh	r3, [r7, #8]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	441a      	add	r2, r3
 8004e52:	893b      	ldrh	r3, [r7, #8]
 8004e54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	8013      	strh	r3, [r2, #0]
 8004e68:	e27f      	b.n	800536a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e80:	817b      	strh	r3, [r7, #10]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	441a      	add	r2, r3
 8004e8c:	897b      	ldrh	r3, [r7, #10]
 8004e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	8013      	strh	r3, [r2, #0]
 8004ea2:	e262      	b.n	800536a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	4413      	add	r3, r2
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	011a      	lsls	r2, r3, #4
 8004ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	88db      	ldrh	r3, [r3, #6]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	4413      	add	r3, r2
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	011a      	lsls	r2, r3, #4
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004efa:	623b      	str	r3, [r7, #32]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d112      	bne.n	8004f2a <USB_ActivateEndpoint+0x286>
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	881b      	ldrh	r3, [r3, #0]
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	801a      	strh	r2, [r3, #0]
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	e02f      	b.n	8004f8a <USB_ActivateEndpoint+0x2e6>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f30:	d813      	bhi.n	8004f5a <USB_ActivateEndpoint+0x2b6>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	663b      	str	r3, [r7, #96]	; 0x60
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <USB_ActivateEndpoint+0x2a8>
 8004f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f48:	3301      	adds	r3, #1
 8004f4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	029b      	lsls	r3, r3, #10
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e017      	b.n	8004f8a <USB_ActivateEndpoint+0x2e6>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	663b      	str	r3, [r7, #96]	; 0x60
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <USB_ActivateEndpoint+0x2d0>
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	3b01      	subs	r3, #1
 8004f72:	663b      	str	r3, [r7, #96]	; 0x60
 8004f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	029b      	lsls	r3, r3, #10
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	83fb      	strh	r3, [r7, #30]
 8004f98:	8bfb      	ldrh	r3, [r7, #30]
 8004f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d01b      	beq.n	8004fda <USB_ActivateEndpoint+0x336>
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	881b      	ldrh	r3, [r3, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb8:	83bb      	strh	r3, [r7, #28]
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	441a      	add	r2, r3
 8004fc4:	8bbb      	ldrh	r3, [r7, #28]
 8004fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff0:	837b      	strh	r3, [r7, #26]
 8004ff2:	8b7b      	ldrh	r3, [r7, #26]
 8004ff4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ff8:	837b      	strh	r3, [r7, #26]
 8004ffa:	8b7b      	ldrh	r3, [r7, #26]
 8004ffc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005000:	837b      	strh	r3, [r7, #26]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	441a      	add	r2, r3
 800500c:	8b7b      	ldrh	r3, [r7, #26]
 800500e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501e:	b29b      	uxth	r3, r3
 8005020:	8013      	strh	r3, [r2, #0]
 8005022:	e1a2      	b.n	800536a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800504c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005050:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005054:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800505c:	b29b      	uxth	r3, r3
 800505e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	65bb      	str	r3, [r7, #88]	; 0x58
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800506a:	b29b      	uxth	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005070:	4413      	add	r3, r2
 8005072:	65bb      	str	r3, [r7, #88]	; 0x58
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	011a      	lsls	r2, r3, #4
 800507a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800507c:	4413      	add	r3, r2
 800507e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005082:	657b      	str	r3, [r7, #84]	; 0x54
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	891b      	ldrh	r3, [r3, #8]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005092:	801a      	strh	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	653b      	str	r3, [r7, #80]	; 0x50
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509e:	b29b      	uxth	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050a4:	4413      	add	r3, r2
 80050a6:	653b      	str	r3, [r7, #80]	; 0x50
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	011a      	lsls	r2, r3, #4
 80050ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	895b      	ldrh	r3, [r3, #10]
 80050bc:	085b      	lsrs	r3, r3, #1
 80050be:	b29b      	uxth	r3, r3
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	785b      	ldrb	r3, [r3, #1]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 8091 	bne.w	80051f4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80050e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80050e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01b      	beq.n	8005122 <USB_ActivateEndpoint+0x47e>
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	441a      	add	r2, r3
 800510c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800510e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005112:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800511a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511e:	b29b      	uxth	r3, r3
 8005120:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005130:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <USB_ActivateEndpoint+0x4ce>
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	441a      	add	r2, r3
 800515c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800515e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800516e:	b29b      	uxth	r3, r3
 8005170:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005188:	86bb      	strh	r3, [r7, #52]	; 0x34
 800518a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800518c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005190:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005192:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005194:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005198:	86bb      	strh	r3, [r7, #52]	; 0x34
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80051a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	881b      	ldrh	r3, [r3, #0]
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]
 80051f2:	e0ba      	b.n	800536a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005204:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01d      	beq.n	800524c <USB_ActivateEndpoint+0x5a8>
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	881b      	ldrh	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005226:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800525c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d01d      	beq.n	80052a4 <USB_ActivateEndpoint+0x600>
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	78db      	ldrb	r3, [r3, #3]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d024      	beq.n	80052f6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052ca:	f083 0320 	eor.w	r3, r3, #32
 80052ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	441a      	add	r2, r3
 80052dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
 80052f4:	e01d      	b.n	8005332 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800530c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	441a      	add	r2, r3
 800531a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800531e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800532a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800532e:	b29b      	uxth	r3, r3
 8005330:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	881b      	ldrh	r3, [r3, #0]
 800533e:	b29b      	uxth	r3, r3
 8005340:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005348:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800536a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800536e:	4618      	mov	r0, r3
 8005370:	376c      	adds	r7, #108	; 0x6c
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005378:	b480      	push	{r7}
 800537a:	b08d      	sub	sp, #52	; 0x34
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	7b1b      	ldrb	r3, [r3, #12]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 808e 	bne.w	80054a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	785b      	ldrb	r3, [r3, #1]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d044      	beq.n	800541e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	881b      	ldrh	r3, [r3, #0]
 80053a0:	81bb      	strh	r3, [r7, #12]
 80053a2:	89bb      	ldrh	r3, [r7, #12]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01b      	beq.n	80053e4 <USB_DeactivateEndpoint+0x6c>
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	817b      	strh	r3, [r7, #10]
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	441a      	add	r2, r3
 80053ce:	897b      	ldrh	r3, [r7, #10]
 80053d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	4413      	add	r3, r2
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053fa:	813b      	strh	r3, [r7, #8]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	441a      	add	r2, r3
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005418:	b29b      	uxth	r3, r3
 800541a:	8013      	strh	r3, [r2, #0]
 800541c:	e192      	b.n	8005744 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	827b      	strh	r3, [r7, #18]
 800542c:	8a7b      	ldrh	r3, [r7, #18]
 800542e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01b      	beq.n	800546e <USB_DeactivateEndpoint+0xf6>
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	823b      	strh	r3, [r7, #16]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	8a3b      	ldrh	r3, [r7, #16]
 800545a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800545e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546a:	b29b      	uxth	r3, r3
 800546c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	881b      	ldrh	r3, [r3, #0]
 800547a:	b29b      	uxth	r3, r3
 800547c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005484:	81fb      	strh	r3, [r7, #14]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	441a      	add	r2, r3
 8005490:	89fb      	ldrh	r3, [r7, #14]
 8005492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800549e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8013      	strh	r3, [r2, #0]
 80054a6:	e14d      	b.n	8005744 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 80a5 	bne.w	80055fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	843b      	strh	r3, [r7, #32]
 80054c0:	8c3b      	ldrh	r3, [r7, #32]
 80054c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d01b      	beq.n	8005502 <USB_DeactivateEndpoint+0x18a>
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e0:	83fb      	strh	r3, [r7, #30]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	441a      	add	r2, r3
 80054ec:	8bfb      	ldrh	r3, [r7, #30]
 80054ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054fe:	b29b      	uxth	r3, r3
 8005500:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	83bb      	strh	r3, [r7, #28]
 8005510:	8bbb      	ldrh	r3, [r7, #28]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01b      	beq.n	8005552 <USB_DeactivateEndpoint+0x1da>
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	837b      	strh	r3, [r7, #26]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	441a      	add	r2, r3
 800553c:	8b7b      	ldrh	r3, [r7, #26]
 800553e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800554a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800554e:	b29b      	uxth	r3, r3
 8005550:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005568:	833b      	strh	r3, [r7, #24]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	441a      	add	r2, r3
 8005574:	8b3b      	ldrh	r3, [r7, #24]
 8005576:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800557a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800557e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005582:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005586:	b29b      	uxth	r3, r3
 8005588:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	b29b      	uxth	r3, r3
 8005598:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	82fb      	strh	r3, [r7, #22]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055be:	b29b      	uxth	r3, r3
 80055c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	881b      	ldrh	r3, [r3, #0]
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d8:	82bb      	strh	r3, [r7, #20]
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	441a      	add	r2, r3
 80055e4:	8abb      	ldrh	r3, [r7, #20]
 80055e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8013      	strh	r3, [r2, #0]
 80055fa:	e0a3      	b.n	8005744 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800560a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800560c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01b      	beq.n	800564c <USB_DeactivateEndpoint+0x2d4>
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	441a      	add	r2, r3
 8005636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800563c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005648:	b29b      	uxth	r3, r3
 800564a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	857b      	strh	r3, [r7, #42]	; 0x2a
 800565a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d01b      	beq.n	800569c <USB_DeactivateEndpoint+0x324>
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	b29b      	uxth	r3, r3
 8005672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	853b      	strh	r3, [r7, #40]	; 0x28
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005694:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80056c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005708:	b29b      	uxth	r3, r3
 800570a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4413      	add	r3, r2
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	b29b      	uxth	r3, r3
 800571a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	847b      	strh	r3, [r7, #34]	; 0x22
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	441a      	add	r2, r3
 800572e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3734      	adds	r7, #52	; 0x34
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b0c4      	sub	sp, #272	; 0x110
 8005754:	af00      	add	r7, sp, #0
 8005756:	1d3b      	adds	r3, r7, #4
 8005758:	6018      	str	r0, [r3, #0]
 800575a:	463b      	mov	r3, r7
 800575c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800575e:	463b      	mov	r3, r7
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	785b      	ldrb	r3, [r3, #1]
 8005764:	2b01      	cmp	r3, #1
 8005766:	f040 8557 	bne.w	8006218 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800576a:	463b      	mov	r3, r7
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	463b      	mov	r3, r7
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	d905      	bls.n	8005786 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800577a:	463b      	mov	r3, r7
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005784:	e004      	b.n	8005790 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005786:	463b      	mov	r3, r7
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005790:	463b      	mov	r3, r7
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	7b1b      	ldrb	r3, [r3, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d12c      	bne.n	80057f4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800579a:	463b      	mov	r3, r7
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6959      	ldr	r1, [r3, #20]
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	88da      	ldrh	r2, [r3, #6]
 80057a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	1d38      	adds	r0, r7, #4
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	f001 fa2c 	bl	8006c0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057b4:	1d3b      	adds	r3, r7, #4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	1d3b      	adds	r3, r7, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	4413      	add	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	463b      	mov	r3, r7
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	011a      	lsls	r2, r3, #4
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	4413      	add	r3, r2
 80057d8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057dc:	f107 0310 	add.w	r3, r7, #16
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	f107 0310 	add.w	r3, r7, #16
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	801a      	strh	r2, [r3, #0]
 80057f0:	f000 bcdd 	b.w	80061ae <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80057f4:	463b      	mov	r3, r7
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	78db      	ldrb	r3, [r3, #3]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	f040 8347 	bne.w	8005e8e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005800:	463b      	mov	r3, r7
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	463b      	mov	r3, r7
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	429a      	cmp	r2, r3
 800580e:	f240 82eb 	bls.w	8005de8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005812:	1d3b      	adds	r3, r7, #4
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29b      	uxth	r3, r3
 8005824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800582c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8005830:	1d3b      	adds	r3, r7, #4
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	463b      	mov	r3, r7
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	441a      	add	r2, r3
 800583e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800584a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800584e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005852:	b29b      	uxth	r3, r3
 8005854:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	463b      	mov	r3, r7
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	463b      	mov	r3, r7
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8159 	beq.w	8005b36 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005884:	1d3b      	adds	r3, r7, #4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	463b      	mov	r3, r7
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d164      	bne.n	800595e <USB_EPStartXfer+0x20e>
 8005894:	1d3b      	adds	r3, r7, #4
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	4413      	add	r3, r2
 80058aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ac:	463b      	mov	r3, r7
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	011a      	lsls	r2, r3, #4
 80058b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b6:	4413      	add	r3, r2
 80058b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80058be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d112      	bne.n	80058ec <USB_EPStartXfer+0x19c>
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	801a      	strh	r2, [r3, #0]
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	b29b      	uxth	r3, r3
 80058dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e054      	b.n	8005996 <USB_EPStartXfer+0x246>
 80058ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f0:	2b3e      	cmp	r3, #62	; 0x3e
 80058f2:	d817      	bhi.n	8005924 <USB_EPStartXfer+0x1d4>
 80058f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <USB_EPStartXfer+0x1c4>
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800590e:	3301      	adds	r3, #1
 8005910:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005918:	b29b      	uxth	r3, r3
 800591a:	029b      	lsls	r3, r3, #10
 800591c:	b29a      	uxth	r2, r3
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	801a      	strh	r2, [r3, #0]
 8005922:	e038      	b.n	8005996 <USB_EPStartXfer+0x246>
 8005924:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005928:	095b      	lsrs	r3, r3, #5
 800592a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800592e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005932:	f003 031f 	and.w	r3, r3, #31
 8005936:	2b00      	cmp	r3, #0
 8005938:	d104      	bne.n	8005944 <USB_EPStartXfer+0x1f4>
 800593a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593e:	3b01      	subs	r3, #1
 8005940:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005948:	b29b      	uxth	r3, r3
 800594a:	029b      	lsls	r3, r3, #10
 800594c:	b29b      	uxth	r3, r3
 800594e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005956:	b29a      	uxth	r2, r3
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	801a      	strh	r2, [r3, #0]
 800595c:	e01b      	b.n	8005996 <USB_EPStartXfer+0x246>
 800595e:	463b      	mov	r3, r7
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	785b      	ldrb	r3, [r3, #1]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d116      	bne.n	8005996 <USB_EPStartXfer+0x246>
 8005968:	1d3b      	adds	r3, r7, #4
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005970:	b29b      	uxth	r3, r3
 8005972:	461a      	mov	r2, r3
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	4413      	add	r3, r2
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	463b      	mov	r3, r7
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	011a      	lsls	r2, r3, #4
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	4413      	add	r3, r2
 8005986:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800598a:	633b      	str	r3, [r7, #48]	; 0x30
 800598c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005990:	b29a      	uxth	r2, r3
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005996:	463b      	mov	r3, r7
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	895b      	ldrh	r3, [r3, #10]
 800599c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059a0:	463b      	mov	r3, r7
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	6959      	ldr	r1, [r3, #20]
 80059a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80059b0:	1d38      	adds	r0, r7, #4
 80059b2:	6800      	ldr	r0, [r0, #0]
 80059b4:	f001 f92a 	bl	8006c0c <USB_WritePMA>
            ep->xfer_buff += len;
 80059b8:	463b      	mov	r3, r7
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695a      	ldr	r2, [r3, #20]
 80059be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059c2:	441a      	add	r2, r3
 80059c4:	463b      	mov	r3, r7
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80059ca:	463b      	mov	r3, r7
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	6a1a      	ldr	r2, [r3, #32]
 80059d0:	463b      	mov	r3, r7
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d909      	bls.n	80059ee <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80059da:	463b      	mov	r3, r7
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e4:	1ad2      	subs	r2, r2, r3
 80059e6:	463b      	mov	r3, r7
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	621a      	str	r2, [r3, #32]
 80059ec:	e008      	b.n	8005a00 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80059ee:	463b      	mov	r3, r7
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2200      	movs	r2, #0
 80059fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a00:	463b      	mov	r3, r7
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d164      	bne.n	8005ad4 <USB_EPStartXfer+0x384>
 8005a0a:	1d3b      	adds	r3, r7, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	61fb      	str	r3, [r7, #28]
 8005a10:	1d3b      	adds	r3, r7, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	463b      	mov	r3, r7
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	011a      	lsls	r2, r3, #4
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d112      	bne.n	8005a62 <USB_EPStartXfer+0x312>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	881b      	ldrh	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	801a      	strh	r2, [r3, #0]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	801a      	strh	r2, [r3, #0]
 8005a60:	e057      	b.n	8005b12 <USB_EPStartXfer+0x3c2>
 8005a62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a66:	2b3e      	cmp	r3, #62	; 0x3e
 8005a68:	d817      	bhi.n	8005a9a <USB_EPStartXfer+0x34a>
 8005a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0x33a>
 8005a80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a84:	3301      	adds	r3, #1
 8005a86:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	801a      	strh	r2, [r3, #0]
 8005a98:	e03b      	b.n	8005b12 <USB_EPStartXfer+0x3c2>
 8005a9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005aa8:	f003 031f 	and.w	r3, r3, #31
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <USB_EPStartXfer+0x36a>
 8005ab0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	029b      	lsls	r3, r3, #10
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e01e      	b.n	8005b12 <USB_EPStartXfer+0x3c2>
 8005ad4:	463b      	mov	r3, r7
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d119      	bne.n	8005b12 <USB_EPStartXfer+0x3c2>
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	4413      	add	r3, r2
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	463b      	mov	r3, r7
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	011a      	lsls	r2, r3, #4
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	4413      	add	r3, r2
 8005b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b06:	623b      	str	r3, [r7, #32]
 8005b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b12:	463b      	mov	r3, r7
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	891b      	ldrh	r3, [r3, #8]
 8005b18:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1c:	463b      	mov	r3, r7
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6959      	ldr	r1, [r3, #20]
 8005b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005b2c:	1d38      	adds	r0, r7, #4
 8005b2e:	6800      	ldr	r0, [r0, #0]
 8005b30:	f001 f86c 	bl	8006c0c <USB_WritePMA>
 8005b34:	e33b      	b.n	80061ae <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b36:	463b      	mov	r3, r7
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d164      	bne.n	8005c0a <USB_EPStartXfer+0x4ba>
 8005b40:	1d3b      	adds	r3, r7, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	4413      	add	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	463b      	mov	r3, r7
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	011a      	lsls	r2, r3, #4
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	4413      	add	r3, r2
 8005b64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d112      	bne.n	8005b98 <USB_EPStartXfer+0x448>
 8005b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b80:	801a      	strh	r2, [r3, #0]
 8005b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e057      	b.n	8005c48 <USB_EPStartXfer+0x4f8>
 8005b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005b9c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b9e:	d817      	bhi.n	8005bd0 <USB_EPStartXfer+0x480>
 8005ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d004      	beq.n	8005bc0 <USB_EPStartXfer+0x470>
 8005bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	029b      	lsls	r3, r3, #10
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e03b      	b.n	8005c48 <USB_EPStartXfer+0x4f8>
 8005bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005bde:	f003 031f 	and.w	r3, r3, #31
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d104      	bne.n	8005bf0 <USB_EPStartXfer+0x4a0>
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bea:	3b01      	subs	r3, #1
 8005bec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	029b      	lsls	r3, r3, #10
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e01e      	b.n	8005c48 <USB_EPStartXfer+0x4f8>
 8005c0a:	463b      	mov	r3, r7
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d119      	bne.n	8005c48 <USB_EPStartXfer+0x4f8>
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	657b      	str	r3, [r7, #84]	; 0x54
 8005c1a:	1d3b      	adds	r3, r7, #4
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c28:	4413      	add	r3, r2
 8005c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2c:	463b      	mov	r3, r7
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	011a      	lsls	r2, r3, #4
 8005c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c3c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c48:	463b      	mov	r3, r7
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	891b      	ldrh	r3, [r3, #8]
 8005c4e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c52:	463b      	mov	r3, r7
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6959      	ldr	r1, [r3, #20]
 8005c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005c62:	1d38      	adds	r0, r7, #4
 8005c64:	6800      	ldr	r0, [r0, #0]
 8005c66:	f000 ffd1 	bl	8006c0c <USB_WritePMA>
            ep->xfer_buff += len;
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	695a      	ldr	r2, [r3, #20]
 8005c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c74:	441a      	add	r2, r3
 8005c76:	463b      	mov	r3, r7
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	463b      	mov	r3, r7
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d909      	bls.n	8005ca0 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8005c8c:	463b      	mov	r3, r7
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6a1a      	ldr	r2, [r3, #32]
 8005c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c96:	1ad2      	subs	r2, r2, r3
 8005c98:	463b      	mov	r3, r7
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	621a      	str	r2, [r3, #32]
 8005c9e:	e008      	b.n	8005cb2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8005ca0:	463b      	mov	r3, r7
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8005caa:	463b      	mov	r3, r7
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb8:	463b      	mov	r3, r7
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d164      	bne.n	8005d8c <USB_EPStartXfer+0x63c>
 8005cc2:	1d3b      	adds	r3, r7, #4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc8:	1d3b      	adds	r3, r7, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cda:	463b      	mov	r3, r7
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	011a      	lsls	r2, r3, #4
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d112      	bne.n	8005d1a <USB_EPStartXfer+0x5ca>
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	801a      	strh	r2, [r3, #0]
 8005d18:	e054      	b.n	8005dc4 <USB_EPStartXfer+0x674>
 8005d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d20:	d817      	bhi.n	8005d52 <USB_EPStartXfer+0x602>
 8005d22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <USB_EPStartXfer+0x5f2>
 8005d38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	e038      	b.n	8005dc4 <USB_EPStartXfer+0x674>
 8005d52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d56:	095b      	lsrs	r3, r3, #5
 8005d58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d104      	bne.n	8005d72 <USB_EPStartXfer+0x622>
 8005d68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	029b      	lsls	r3, r3, #10
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	e01b      	b.n	8005dc4 <USB_EPStartXfer+0x674>
 8005d8c:	463b      	mov	r3, r7
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d116      	bne.n	8005dc4 <USB_EPStartXfer+0x674>
 8005d96:	1d3b      	adds	r3, r7, #4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005da4:	4413      	add	r3, r2
 8005da6:	647b      	str	r3, [r7, #68]	; 0x44
 8005da8:	463b      	mov	r3, r7
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	011a      	lsls	r2, r3, #4
 8005db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db2:	4413      	add	r3, r2
 8005db4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dc4:	463b      	mov	r3, r7
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	895b      	ldrh	r3, [r3, #10]
 8005dca:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dce:	463b      	mov	r3, r7
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6959      	ldr	r1, [r3, #20]
 8005dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005dde:	1d38      	adds	r0, r7, #4
 8005de0:	6800      	ldr	r0, [r0, #0]
 8005de2:	f000 ff13 	bl	8006c0c <USB_WritePMA>
 8005de6:	e1e2      	b.n	80061ae <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005de8:	463b      	mov	r3, r7
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005df2:	1d3b      	adds	r3, r7, #4
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	463b      	mov	r3, r7
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005e10:	1d3b      	adds	r3, r7, #4
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	463b      	mov	r3, r7
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e4a:	4413      	add	r3, r2
 8005e4c:	663b      	str	r3, [r7, #96]	; 0x60
 8005e4e:	463b      	mov	r3, r7
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	011a      	lsls	r2, r3, #4
 8005e56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	891b      	ldrh	r3, [r3, #8]
 8005e70:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e74:	463b      	mov	r3, r7
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	6959      	ldr	r1, [r3, #20]
 8005e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8005e84:	1d38      	adds	r0, r7, #4
 8005e86:	6800      	ldr	r0, [r0, #0]
 8005e88:	f000 fec0 	bl	8006c0c <USB_WritePMA>
 8005e8c:	e18f      	b.n	80061ae <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005e8e:	1d3b      	adds	r3, r7, #4
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	463b      	mov	r3, r7
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 808f 	beq.w	8005fc8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005eaa:	1d3b      	adds	r3, r7, #4
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	67bb      	str	r3, [r7, #120]	; 0x78
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	785b      	ldrb	r3, [r3, #1]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d164      	bne.n	8005f84 <USB_EPStartXfer+0x834>
 8005eba:	1d3b      	adds	r3, r7, #4
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec0:	1d3b      	adds	r3, r7, #4
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ece:	4413      	add	r3, r2
 8005ed0:	673b      	str	r3, [r7, #112]	; 0x70
 8005ed2:	463b      	mov	r3, r7
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	011a      	lsls	r2, r3, #4
 8005eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005edc:	4413      	add	r3, r2
 8005ede:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d112      	bne.n	8005f12 <USB_EPStartXfer+0x7c2>
 8005eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efa:	801a      	strh	r2, [r3, #0]
 8005efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005efe:	881b      	ldrh	r3, [r3, #0]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	e054      	b.n	8005fbc <USB_EPStartXfer+0x86c>
 8005f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f16:	2b3e      	cmp	r3, #62	; 0x3e
 8005f18:	d817      	bhi.n	8005f4a <USB_EPStartXfer+0x7fa>
 8005f1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f1e:	085b      	lsrs	r3, r3, #1
 8005f20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <USB_EPStartXfer+0x7ea>
 8005f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f34:	3301      	adds	r3, #1
 8005f36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	029b      	lsls	r3, r3, #10
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e038      	b.n	8005fbc <USB_EPStartXfer+0x86c>
 8005f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0x81a>
 8005f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	e01b      	b.n	8005fbc <USB_EPStartXfer+0x86c>
 8005f84:	463b      	mov	r3, r7
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d116      	bne.n	8005fbc <USB_EPStartXfer+0x86c>
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f9c:	4413      	add	r3, r2
 8005f9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fa0:	463b      	mov	r3, r7
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	011a      	lsls	r2, r3, #4
 8005fa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005faa:	4413      	add	r3, r2
 8005fac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fb0:	677b      	str	r3, [r7, #116]	; 0x74
 8005fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	895b      	ldrh	r3, [r3, #10]
 8005fc2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8005fc6:	e097      	b.n	80060f8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fc8:	463b      	mov	r3, r7
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d168      	bne.n	80060a4 <USB_EPStartXfer+0x954>
 8005fd2:	1d3b      	adds	r3, r7, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fda:	1d3b      	adds	r3, r7, #4
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fea:	4413      	add	r3, r2
 8005fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ff0:	463b      	mov	r3, r7
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	011a      	lsls	r2, r3, #4
 8005ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006002:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006004:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d112      	bne.n	8006032 <USB_EPStartXfer+0x8e2>
 800600c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006016:	b29a      	uxth	r2, r3
 8006018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601a:	801a      	strh	r2, [r3, #0]
 800601c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602a:	b29a      	uxth	r2, r3
 800602c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	e05d      	b.n	80060ee <USB_EPStartXfer+0x99e>
 8006032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006036:	2b3e      	cmp	r3, #62	; 0x3e
 8006038:	d817      	bhi.n	800606a <USB_EPStartXfer+0x91a>
 800603a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800603e:	085b      	lsrs	r3, r3, #1
 8006040:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006044:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <USB_EPStartXfer+0x90a>
 8006050:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006054:	3301      	adds	r3, #1
 8006056:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800605a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800605e:	b29b      	uxth	r3, r3
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	b29a      	uxth	r2, r3
 8006064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	e041      	b.n	80060ee <USB_EPStartXfer+0x99e>
 800606a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006078:	f003 031f 	and.w	r3, r3, #31
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <USB_EPStartXfer+0x93a>
 8006080:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006084:	3b01      	subs	r3, #1
 8006086:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800608a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800608e:	b29b      	uxth	r3, r3
 8006090:	029b      	lsls	r3, r3, #10
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060a0:	801a      	strh	r2, [r3, #0]
 80060a2:	e024      	b.n	80060ee <USB_EPStartXfer+0x99e>
 80060a4:	463b      	mov	r3, r7
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	785b      	ldrb	r3, [r3, #1]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d11f      	bne.n	80060ee <USB_EPStartXfer+0x99e>
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060be:	b29b      	uxth	r3, r3
 80060c0:	461a      	mov	r2, r3
 80060c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060c6:	4413      	add	r3, r2
 80060c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060cc:	463b      	mov	r3, r7
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	011a      	lsls	r2, r3, #4
 80060d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d8:	4413      	add	r3, r2
 80060da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060ec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060ee:	463b      	mov	r3, r7
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	891b      	ldrh	r3, [r3, #8]
 80060f4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f8:	463b      	mov	r3, r7
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6959      	ldr	r1, [r3, #20]
 80060fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006102:	b29b      	uxth	r3, r3
 8006104:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8006108:	1d38      	adds	r0, r7, #4
 800610a:	6800      	ldr	r0, [r0, #0]
 800610c:	f000 fd7e 	bl	8006c0c <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	785b      	ldrb	r3, [r3, #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d122      	bne.n	8006160 <USB_EPStartXfer+0xa10>
 800611a:	1d3b      	adds	r3, r7, #4
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	463b      	mov	r3, r7
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006134:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8006138:	1d3b      	adds	r3, r7, #4
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	463b      	mov	r3, r7
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	441a      	add	r2, r3
 8006146:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
 800615e:	e026      	b.n	80061ae <USB_EPStartXfer+0xa5e>
 8006160:	463b      	mov	r3, r7
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d121      	bne.n	80061ae <USB_EPStartXfer+0xa5e>
 800616a:	1d3b      	adds	r3, r7, #4
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	463b      	mov	r3, r7
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	463b      	mov	r3, r7
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800619a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80061ae:	1d3b      	adds	r3, r7, #4
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	463b      	mov	r3, r7
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f107 020e 	add.w	r2, r7, #14
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061cc:	8013      	strh	r3, [r2, #0]
 80061ce:	f107 030e 	add.w	r3, r7, #14
 80061d2:	f107 020e 	add.w	r2, r7, #14
 80061d6:	8812      	ldrh	r2, [r2, #0]
 80061d8:	f082 0210 	eor.w	r2, r2, #16
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	f107 030e 	add.w	r3, r7, #14
 80061e2:	f107 020e 	add.w	r2, r7, #14
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	f082 0220 	eor.w	r2, r2, #32
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	463b      	mov	r3, r7
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	f107 030e 	add.w	r3, r7, #14
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800620a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]
 8006216:	e3b5      	b.n	8006984 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	7b1b      	ldrb	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f040 8090 	bne.w	8006344 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006224:	463b      	mov	r3, r7
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	463b      	mov	r3, r7
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d90e      	bls.n	8006252 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8006234:	463b      	mov	r3, r7
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800623e:	463b      	mov	r3, r7
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006248:	1ad2      	subs	r2, r2, r3
 800624a:	463b      	mov	r3, r7
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	619a      	str	r2, [r3, #24]
 8006250:	e008      	b.n	8006264 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8006252:	463b      	mov	r3, r7
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800625c:	463b      	mov	r3, r7
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2200      	movs	r2, #0
 8006262:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006264:	1d3b      	adds	r3, r7, #4
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800626c:	1d3b      	adds	r3, r7, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006274:	b29b      	uxth	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800627c:	4413      	add	r3, r2
 800627e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006282:	463b      	mov	r3, r7
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	011a      	lsls	r2, r3, #4
 800628a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800628e:	4413      	add	r3, r2
 8006290:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d116      	bne.n	80062ce <USB_EPStartXfer+0xb7e>
 80062a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80062ca:	801a      	strh	r2, [r3, #0]
 80062cc:	e32c      	b.n	8006928 <USB_EPStartXfer+0x11d8>
 80062ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062d2:	2b3e      	cmp	r3, #62	; 0x3e
 80062d4:	d818      	bhi.n	8006308 <USB_EPStartXfer+0xbb8>
 80062d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062da:	085b      	lsrs	r3, r3, #1
 80062dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d004      	beq.n	80062f6 <USB_EPStartXfer+0xba6>
 80062ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062f0:	3301      	adds	r3, #1
 80062f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	e30f      	b.n	8006928 <USB_EPStartXfer+0x11d8>
 8006308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800630c:	095b      	lsrs	r3, r3, #5
 800630e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006312:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	2b00      	cmp	r3, #0
 800631c:	d104      	bne.n	8006328 <USB_EPStartXfer+0xbd8>
 800631e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006322:	3b01      	subs	r3, #1
 8006324:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800632c:	b29b      	uxth	r3, r3
 800632e:	029b      	lsls	r3, r3, #10
 8006330:	b29b      	uxth	r3, r3
 8006332:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006336:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006340:	801a      	strh	r2, [r3, #0]
 8006342:	e2f1      	b.n	8006928 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006344:	463b      	mov	r3, r7
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	78db      	ldrb	r3, [r3, #3]
 800634a:	2b02      	cmp	r3, #2
 800634c:	f040 818f 	bne.w	800666e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006350:	463b      	mov	r3, r7
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	785b      	ldrb	r3, [r3, #1]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d175      	bne.n	8006446 <USB_EPStartXfer+0xcf6>
 800635a:	1d3b      	adds	r3, r7, #4
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800636a:	b29b      	uxth	r3, r3
 800636c:	461a      	mov	r2, r3
 800636e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006372:	4413      	add	r3, r2
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006378:	463b      	mov	r3, r7
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	011a      	lsls	r2, r3, #4
 8006380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006384:	4413      	add	r3, r2
 8006386:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800638a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800638e:	463b      	mov	r3, r7
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d116      	bne.n	80063c6 <USB_EPStartXfer+0xc76>
 8006398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063bc:	b29a      	uxth	r2, r3
 80063be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e065      	b.n	8006492 <USB_EPStartXfer+0xd42>
 80063c6:	463b      	mov	r3, r7
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	2b3e      	cmp	r3, #62	; 0x3e
 80063ce:	d81a      	bhi.n	8006406 <USB_EPStartXfer+0xcb6>
 80063d0:	463b      	mov	r3, r7
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063dc:	463b      	mov	r3, r7
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <USB_EPStartXfer+0xca4>
 80063ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063ee:	3301      	adds	r3, #1
 80063f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	029b      	lsls	r3, r3, #10
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e045      	b.n	8006492 <USB_EPStartXfer+0xd42>
 8006406:	463b      	mov	r3, r7
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	095b      	lsrs	r3, r3, #5
 800640e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006412:	463b      	mov	r3, r7
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <USB_EPStartXfer+0xcda>
 8006420:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006424:	3b01      	subs	r3, #1
 8006426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800642a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800642e:	b29b      	uxth	r3, r3
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	b29b      	uxth	r3, r3
 8006434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e025      	b.n	8006492 <USB_EPStartXfer+0xd42>
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d120      	bne.n	8006492 <USB_EPStartXfer+0xd42>
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006458:	1d3b      	adds	r3, r7, #4
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006460:	b29b      	uxth	r3, r3
 8006462:	461a      	mov	r2, r3
 8006464:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006468:	4413      	add	r3, r2
 800646a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800646e:	463b      	mov	r3, r7
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	011a      	lsls	r2, r3, #4
 8006476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800647a:	4413      	add	r3, r2
 800647c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006484:	463b      	mov	r3, r7
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	b29a      	uxth	r2, r3
 800648c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006490:	801a      	strh	r2, [r3, #0]
 8006492:	1d3b      	adds	r3, r7, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800649a:	463b      	mov	r3, r7
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	785b      	ldrb	r3, [r3, #1]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d175      	bne.n	8006590 <USB_EPStartXfer+0xe40>
 80064a4:	1d3b      	adds	r3, r7, #4
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	461a      	mov	r2, r3
 80064b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064bc:	4413      	add	r3, r2
 80064be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064c2:	463b      	mov	r3, r7
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	011a      	lsls	r2, r3, #4
 80064ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064ce:	4413      	add	r3, r2
 80064d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064d8:	463b      	mov	r3, r7
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d116      	bne.n	8006510 <USB_EPStartXfer+0xdc0>
 80064e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064f4:	801a      	strh	r2, [r3, #0]
 80064f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006502:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800650c:	801a      	strh	r2, [r3, #0]
 800650e:	e061      	b.n	80065d4 <USB_EPStartXfer+0xe84>
 8006510:	463b      	mov	r3, r7
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b3e      	cmp	r3, #62	; 0x3e
 8006518:	d81a      	bhi.n	8006550 <USB_EPStartXfer+0xe00>
 800651a:	463b      	mov	r3, r7
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	085b      	lsrs	r3, r3, #1
 8006522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d004      	beq.n	800653e <USB_EPStartXfer+0xdee>
 8006534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006538:	3301      	adds	r3, #1
 800653a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800653e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006542:	b29b      	uxth	r3, r3
 8006544:	029b      	lsls	r3, r3, #10
 8006546:	b29a      	uxth	r2, r3
 8006548:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e041      	b.n	80065d4 <USB_EPStartXfer+0xe84>
 8006550:	463b      	mov	r3, r7
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	095b      	lsrs	r3, r3, #5
 8006558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800655c:	463b      	mov	r3, r7
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <USB_EPStartXfer+0xe24>
 800656a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656e:	3b01      	subs	r3, #1
 8006570:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006578:	b29b      	uxth	r3, r3
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e021      	b.n	80065d4 <USB_EPStartXfer+0xe84>
 8006590:	463b      	mov	r3, r7
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d11c      	bne.n	80065d4 <USB_EPStartXfer+0xe84>
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065aa:	4413      	add	r3, r2
 80065ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065b0:	463b      	mov	r3, r7
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	011a      	lsls	r2, r3, #4
 80065b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80065bc:	4413      	add	r3, r2
 80065be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80065c6:	463b      	mov	r3, r7
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80065d2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80065d4:	463b      	mov	r3, r7
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 81a4 	beq.w	8006928 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	463b      	mov	r3, r7
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80065f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80065f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <USB_EPStartXfer+0xebc>
 8006600:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10d      	bne.n	8006628 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800660c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006614:	2b00      	cmp	r3, #0
 8006616:	f040 8187 	bne.w	8006928 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800661a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800661e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	f040 8180 	bne.w	8006928 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006628:	1d3b      	adds	r3, r7, #4
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	463b      	mov	r3, r7
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006642:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8006646:	1d3b      	adds	r3, r7, #4
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	463b      	mov	r3, r7
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	441a      	add	r2, r3
 8006654:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8006658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800665c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006664:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]
 800666c:	e15c      	b.n	8006928 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800666e:	463b      	mov	r3, r7
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	78db      	ldrb	r3, [r3, #3]
 8006674:	2b01      	cmp	r3, #1
 8006676:	f040 8155 	bne.w	8006924 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800667a:	463b      	mov	r3, r7
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	463b      	mov	r3, r7
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	d90e      	bls.n	80066a8 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800668a:	463b      	mov	r3, r7
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8006694:	463b      	mov	r3, r7
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	699a      	ldr	r2, [r3, #24]
 800669a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800669e:	1ad2      	subs	r2, r2, r3
 80066a0:	463b      	mov	r3, r7
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	619a      	str	r2, [r3, #24]
 80066a6:	e008      	b.n	80066ba <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 80066a8:	463b      	mov	r3, r7
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2200      	movs	r2, #0
 80066b8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80066ba:	463b      	mov	r3, r7
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	785b      	ldrb	r3, [r3, #1]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d16f      	bne.n	80067a4 <USB_EPStartXfer+0x1054>
 80066c4:	1d3b      	adds	r3, r7, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066cc:	1d3b      	adds	r3, r7, #4
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	461a      	mov	r2, r3
 80066d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066dc:	4413      	add	r3, r2
 80066de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066e2:	463b      	mov	r3, r7
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	011a      	lsls	r2, r3, #4
 80066ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d116      	bne.n	800672e <USB_EPStartXfer+0xfde>
 8006700:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670c:	b29a      	uxth	r2, r3
 800670e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006724:	b29a      	uxth	r2, r3
 8006726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800672a:	801a      	strh	r2, [r3, #0]
 800672c:	e05f      	b.n	80067ee <USB_EPStartXfer+0x109e>
 800672e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006732:	2b3e      	cmp	r3, #62	; 0x3e
 8006734:	d818      	bhi.n	8006768 <USB_EPStartXfer+0x1018>
 8006736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800673a:	085b      	lsrs	r3, r3, #1
 800673c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <USB_EPStartXfer+0x1006>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	3301      	adds	r3, #1
 8006752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675a:	b29b      	uxth	r3, r3
 800675c:	029b      	lsls	r3, r3, #10
 800675e:	b29a      	uxth	r2, r3
 8006760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	e042      	b.n	80067ee <USB_EPStartXfer+0x109e>
 8006768:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006772:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_EPStartXfer+0x1038>
 800677e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006782:	3b01      	subs	r3, #1
 8006784:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678c:	b29b      	uxth	r3, r3
 800678e:	029b      	lsls	r3, r3, #10
 8006790:	b29b      	uxth	r3, r3
 8006792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800679a:	b29a      	uxth	r2, r3
 800679c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067a0:	801a      	strh	r2, [r3, #0]
 80067a2:	e024      	b.n	80067ee <USB_EPStartXfer+0x109e>
 80067a4:	463b      	mov	r3, r7
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	785b      	ldrb	r3, [r3, #1]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d11f      	bne.n	80067ee <USB_EPStartXfer+0x109e>
 80067ae:	1d3b      	adds	r3, r7, #4
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067b6:	1d3b      	adds	r3, r7, #4
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c6:	4413      	add	r3, r2
 80067c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067cc:	463b      	mov	r3, r7
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	011a      	lsls	r2, r3, #4
 80067d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067d8:	4413      	add	r3, r2
 80067da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ec:	801a      	strh	r2, [r3, #0]
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	785b      	ldrb	r3, [r3, #1]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d16f      	bne.n	80068e0 <USB_EPStartXfer+0x1190>
 8006800:	1d3b      	adds	r3, r7, #4
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006808:	1d3b      	adds	r3, r7, #4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006810:	b29b      	uxth	r3, r3
 8006812:	461a      	mov	r2, r3
 8006814:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006818:	4413      	add	r3, r2
 800681a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800681e:	463b      	mov	r3, r7
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	011a      	lsls	r2, r3, #4
 8006826:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800682a:	4413      	add	r3, r2
 800682c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006830:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006834:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d116      	bne.n	800686a <USB_EPStartXfer+0x111a>
 800683c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006840:	881b      	ldrh	r3, [r3, #0]
 8006842:	b29b      	uxth	r3, r3
 8006844:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006848:	b29a      	uxth	r2, r3
 800684a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800685c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e05e      	b.n	8006928 <USB_EPStartXfer+0x11d8>
 800686a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800686e:	2b3e      	cmp	r3, #62	; 0x3e
 8006870:	d818      	bhi.n	80068a4 <USB_EPStartXfer+0x1154>
 8006872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800687c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <USB_EPStartXfer+0x1142>
 8006888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800688c:	3301      	adds	r3, #1
 800688e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006896:	b29b      	uxth	r3, r3
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	b29a      	uxth	r2, r3
 800689c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e041      	b.n	8006928 <USB_EPStartXfer+0x11d8>
 80068a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <USB_EPStartXfer+0x1174>
 80068ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068be:	3b01      	subs	r3, #1
 80068c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80068c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	029b      	lsls	r3, r3, #10
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e023      	b.n	8006928 <USB_EPStartXfer+0x11d8>
 80068e0:	463b      	mov	r3, r7
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	785b      	ldrb	r3, [r3, #1]
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d11e      	bne.n	8006928 <USB_EPStartXfer+0x11d8>
 80068ea:	1d3b      	adds	r3, r7, #4
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068fa:	4413      	add	r3, r2
 80068fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006900:	463b      	mov	r3, r7
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	011a      	lsls	r2, r3, #4
 8006908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800690c:	4413      	add	r3, r2
 800690e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006912:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006916:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e001      	b.n	8006928 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e02e      	b.n	8006986 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	463b      	mov	r3, r7
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006946:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800694a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800694e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8006952:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006956:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800695a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	463b      	mov	r3, r7
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	441a      	add	r2, r3
 800696c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006978:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006980:	b29b      	uxth	r3, r3
 8006982:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d020      	beq.n	80069e4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b8:	81bb      	strh	r3, [r7, #12]
 80069ba:	89bb      	ldrh	r3, [r7, #12]
 80069bc:	f083 0310 	eor.w	r3, r3, #16
 80069c0:	81bb      	strh	r3, [r7, #12]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	441a      	add	r2, r3
 80069cc:	89bb      	ldrh	r3, [r7, #12]
 80069ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069de:	b29b      	uxth	r3, r3
 80069e0:	8013      	strh	r3, [r2, #0]
 80069e2:	e01f      	b.n	8006a24 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	881b      	ldrh	r3, [r3, #0]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069fa:	81fb      	strh	r3, [r7, #14]
 80069fc:	89fb      	ldrh	r3, [r7, #14]
 80069fe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a02:	81fb      	strh	r3, [r7, #14]
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	89fb      	ldrh	r3, [r7, #14]
 8006a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	7b1b      	ldrb	r3, [r3, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 809d 	bne.w	8006b7e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d04c      	beq.n	8006ae6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	823b      	strh	r3, [r7, #16]
 8006a5a:	8a3b      	ldrh	r3, [r7, #16]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01b      	beq.n	8006a9c <USB_EPClearStall+0x6c>
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	81fb      	strh	r3, [r7, #14]
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	89fb      	ldrh	r3, [r7, #14]
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	78db      	ldrb	r3, [r3, #3]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d06c      	beq.n	8006b7e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aba:	81bb      	strh	r3, [r7, #12]
 8006abc:	89bb      	ldrh	r3, [r7, #12]
 8006abe:	f083 0320 	eor.w	r3, r3, #32
 8006ac2:	81bb      	strh	r3, [r7, #12]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
 8006ae4:	e04b      	b.n	8006b7e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	82fb      	strh	r3, [r7, #22]
 8006af4:	8afb      	ldrh	r3, [r7, #22]
 8006af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01b      	beq.n	8006b36 <USB_EPClearStall+0x106>
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b14:	82bb      	strh	r3, [r7, #20]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8abb      	ldrh	r3, [r7, #20]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	4413      	add	r3, r2
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	827b      	strh	r3, [r7, #18]
 8006b4e:	8a7b      	ldrh	r3, [r7, #18]
 8006b50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b54:	827b      	strh	r3, [r7, #18]
 8006b56:	8a7b      	ldrh	r3, [r7, #18]
 8006b58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b5c:	827b      	strh	r3, [r7, #18]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	8a7b      	ldrh	r3, [r7, #18]
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d103      	bne.n	8006ba4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bc80      	pop	{r7}
 8006bae:	4770      	bx	lr

08006bb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006bea:	68fb      	ldr	r3, [r7, #12]
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b083      	sub	sp, #12
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bc80      	pop	{r7}
 8006c0a:	4770      	bx	lr

08006c0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b08d      	sub	sp, #52	; 0x34
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	80fb      	strh	r3, [r7, #6]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c22:	88bb      	ldrh	r3, [r7, #4]
 8006c24:	3301      	adds	r3, #1
 8006c26:	085b      	lsrs	r3, r3, #1
 8006c28:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	005a      	lsls	r2, r3, #1
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c3e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c44:	e01e      	b.n	8006c84 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	3301      	adds	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	3302      	adds	r3, #2
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	3302      	adds	r3, #2
 8006c76:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	3b01      	subs	r3, #1
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1dd      	bne.n	8006c46 <USB_WritePMA+0x3a>
  }
}
 8006c8a:	bf00      	nop
 8006c8c:	bf00      	nop
 8006c8e:	3734      	adds	r7, #52	; 0x34
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr

08006c96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b08b      	sub	sp, #44	; 0x2c
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	80fb      	strh	r3, [r7, #6]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006cac:	88bb      	ldrh	r3, [r7, #4]
 8006cae:	085b      	lsrs	r3, r3, #1
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	005a      	lsls	r2, r3, #1
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e01b      	b.n	8006d08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	3302      	adds	r3, #2
 8006cdc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	0a1b      	lsrs	r3, r3, #8
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	3302      	adds	r3, #2
 8006d00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	3b01      	subs	r3, #1
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e0      	bne.n	8006cd0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d0e:	88bb      	ldrh	r3, [r7, #4]
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	701a      	strb	r2, [r3, #0]
  }
}
 8006d2a:	bf00      	nop
 8006d2c:	372c      	adds	r7, #44	; 0x2c
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bc80      	pop	{r7}
 8006d32:	4770      	bx	lr

08006d34 <CPU_IntSrcPrioSet>:
*/

void  CPU_IntSrcPrioSet (CPU_INT08U  pos,
                         CPU_INT08U  prio,
                         CPU_INT08U  type)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	71fb      	strb	r3, [r7, #7]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	71bb      	strb	r3, [r7, #6]
 8006d42:	4613      	mov	r3, r2
 8006d44:	717b      	strb	r3, [r7, #5]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT16U  pos_max;
    CPU_INT32U  temp;
    CPU_INT32U  prio_offset;
    CPU_SR_ALLOC();
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]


    prio_offset = (prio << (DEF_OCTET_NBR_BITS - CPU_CFG_NVIC_PRIO_BITS));
 8006d4a:	79bb      	ldrb	r3, [r7, #6]
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	613b      	str	r3, [r7, #16]
    switch (pos) {
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	2b0f      	cmp	r3, #15
 8006d54:	f200 80c3 	bhi.w	8006ede <CPU_IntSrcPrioSet+0x1aa>
 8006d58:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <CPU_IntSrcPrioSet+0x2c>)
 8006d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5e:	bf00      	nop
 8006d60:	08006f8f 	.word	0x08006f8f
 8006d64:	08006f8f 	.word	0x08006f8f
 8006d68:	08006f8f 	.word	0x08006f8f
 8006d6c:	08006f8f 	.word	0x08006f8f
 8006d70:	08006da1 	.word	0x08006da1
 8006d74:	08006dcd 	.word	0x08006dcd
 8006d78:	08006dfb 	.word	0x08006dfb
 8006d7c:	08006f8f 	.word	0x08006f8f
 8006d80:	08006f8f 	.word	0x08006f8f
 8006d84:	08006f8f 	.word	0x08006f8f
 8006d88:	08006f8f 	.word	0x08006f8f
 8006d8c:	08006e29 	.word	0x08006e29
 8006d90:	08006e57 	.word	0x08006e57
 8006d94:	08006f8f 	.word	0x08006f8f
 8006d98:	08006e83 	.word	0x08006e83
 8006d9c:	08006eb1 	.word	0x08006eb1
        case CPU_INT_NMI:                                       /* Non-maskable interrupt (see Note #2).                */
        case CPU_INT_HFAULT:                                    /* Hard fault (see Note #2).                            */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8006da0:	2040      	movs	r0, #64	; 0x40
 8006da2:	f7f9 f9d7 	bl	8000154 <CPU_SR_Save>
 8006da6:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8006da8:	4b7c      	ldr	r3, [pc, #496]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006db4:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006dbe:	4a77      	ldr	r2, [pc, #476]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006dc4:	6978      	ldr	r0, [r7, #20]
 8006dc6:	f7f9 f9d3 	bl	8000170 <CPU_SR_Restore>
             break;
 8006dca:	e0e3      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8006dcc:	2040      	movs	r0, #64	; 0x40
 8006dce:	f7f9 f9c1 	bl	8000154 <CPU_SR_Save>
 8006dd2:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8006dd4:	4b71      	ldr	r3, [pc, #452]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (1 * DEF_OCTET_NBR_BITS));
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006de0:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (1 * DEF_OCTET_NBR_BITS));
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006dec:	4a6b      	ldr	r2, [pc, #428]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006df2:	6978      	ldr	r0, [r7, #20]
 8006df4:	f7f9 f9bc 	bl	8000170 <CPU_SR_Restore>
             break;
 8006df8:	e0cc      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8006dfa:	2040      	movs	r0, #64	; 0x40
 8006dfc:	f7f9 f9aa 	bl	8000154 <CPU_SR_Save>
 8006e00:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI1;
 8006e02:	4b66      	ldr	r3, [pc, #408]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006e0e:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI1   = temp;
 8006e1a:	4a60      	ldr	r2, [pc, #384]	; (8006f9c <CPU_IntSrcPrioSet+0x268>)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006e20:	6978      	ldr	r0, [r7, #20]
 8006e22:	f7f9 f9a5 	bl	8000170 <CPU_SR_Restore>
             break;
 8006e26:	e0b5      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SVCALL:                                    /* SVCall.                                              */
             CPU_CRITICAL_ENTER();
 8006e28:	2040      	movs	r0, #64	; 0x40
 8006e2a:	f7f9 f993 	bl	8000154 <CPU_SR_Save>
 8006e2e:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI2;
 8006e30:	4b5b      	ldr	r3, [pc, #364]	; (8006fa0 <CPU_IntSrcPrioSet+0x26c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	061b      	lsls	r3, r3, #24
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI2   = temp;
 8006e48:	4a55      	ldr	r2, [pc, #340]	; (8006fa0 <CPU_IntSrcPrioSet+0x26c>)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006e4e:	6978      	ldr	r0, [r7, #20]
 8006e50:	f7f9 f98e 	bl	8000170 <CPU_SR_Restore>
             break;
 8006e54:	e09e      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_DBGMON:                                    /* Debug monitor.                                       */
             CPU_CRITICAL_ENTER();
 8006e56:	2040      	movs	r0, #64	; 0x40
 8006e58:	f7f9 f97c 	bl	8000154 <CPU_SR_Save>
 8006e5c:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8006e5e:	4b51      	ldr	r3, [pc, #324]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (0 * DEF_OCTET_NBR_BITS));
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e6a:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (0 * DEF_OCTET_NBR_BITS));
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8006e74:	4a4b      	ldr	r2, [pc, #300]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006e7a:	6978      	ldr	r0, [r7, #20]
 8006e7c:	f7f9 f978 	bl	8000170 <CPU_SR_Restore>
             break;
 8006e80:	e088      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_PENDSV:                                    /* PendSV.                                              */
             CPU_CRITICAL_ENTER();
 8006e82:	2040      	movs	r0, #64	; 0x40
 8006e84:	f7f9 f966 	bl	8000154 <CPU_SR_Save>
 8006e88:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8006e8a:	4b46      	ldr	r3, [pc, #280]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (2 * DEF_OCTET_NBR_BITS));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8006e96:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (2 * DEF_OCTET_NBR_BITS));
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	041b      	lsls	r3, r3, #16
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8006ea2:	4a40      	ldr	r2, [pc, #256]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006ea8:	6978      	ldr	r0, [r7, #20]
 8006eaa:	f7f9 f961 	bl	8000170 <CPU_SR_Restore>
             break;
 8006eae:	e071      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8006eb0:	2040      	movs	r0, #64	; 0x40
 8006eb2:	f7f9 f94f 	bl	8000154 <CPU_SR_Save>
 8006eb6:	6178      	str	r0, [r7, #20]
             temp                 = CPU_REG_SCB_SHPRI3;
 8006eb8:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	60fb      	str	r3, [r7, #12]
             temp                &= ~((CPU_INT32U)DEF_OCTET_MASK << (3 * DEF_OCTET_NBR_BITS));
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	60fb      	str	r3, [r7, #12]
             temp                |=  ((CPU_INT32U)prio_offset    << (3 * DEF_OCTET_NBR_BITS));
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
             CPU_REG_SCB_SHPRI3   = temp;
 8006ed0:	4a34      	ldr	r2, [pc, #208]	; (8006fa4 <CPU_IntSrcPrioSet+0x270>)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8006ed6:	6978      	ldr	r0, [r7, #20]
 8006ed8:	f7f9 f94a 	bl	8000170 <CPU_SR_Restore>
             break;
 8006edc:	e05a      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
             pos_max = CPU_INT_SRC_POS_MAX;
 8006ede:	4b32      	ldr	r3, [pc, #200]	; (8006fa8 <CPU_IntSrcPrioSet+0x274>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	015b      	lsls	r3, r3, #5
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3310      	adds	r3, #16
 8006ef0:	817b      	strh	r3, [r7, #10]
             if (pos < pos_max) {                               /* See Note #3.                                         */
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	897a      	ldrh	r2, [r7, #10]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d94a      	bls.n	8006f92 <CPU_IntSrcPrioSet+0x25e>

                 if (type == CPU_INT_NKA) {                     /* Check if NKA priority goes beyond KA boundary        */
 8006efc:	797b      	ldrb	r3, [r7, #5]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d105      	bne.n	8006f0e <CPU_IntSrcPrioSet+0x1da>
                     if (prio >= CPU_CFG_KA_IPL_BOUNDARY) {     /* Priority must be < CPU_CFG_KA_IPL_BOUNDARY           */
 8006f02:	79bb      	ldrb	r3, [r7, #6]
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d907      	bls.n	8006f18 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8006f08:	f000 f850 	bl	8006fac <CPU_SW_Exception>
 8006f0c:	e004      	b.n	8006f18 <CPU_IntSrcPrioSet+0x1e4>
                     }

                 } else {                                       /* Check if KA priority is less than KA boundary        */
                     if (prio < CPU_CFG_KA_IPL_BOUNDARY) {      /* Priority must be >= CPU_CFG_KA_IPL_BOUNDARY          */
 8006f0e:	79bb      	ldrb	r3, [r7, #6]
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d801      	bhi.n	8006f18 <CPU_IntSrcPrioSet+0x1e4>
                         CPU_SW_Exception();
 8006f14:	f000 f84a 	bl	8006fac <CPU_SW_Exception>
                     }
                 }

                 group                    = (pos - 16) / 4;
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	3b10      	subs	r3, #16
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	da00      	bge.n	8006f22 <CPU_IntSrcPrioSet+0x1ee>
 8006f20:	3303      	adds	r3, #3
 8006f22:	109b      	asrs	r3, r3, #2
 8006f24:	727b      	strb	r3, [r7, #9]
                 nbr                      = (pos - 16) % 4;
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	3b10      	subs	r3, #16
 8006f2a:	425a      	negs	r2, r3
 8006f2c:	f003 0303 	and.w	r3, r3, #3
 8006f30:	f002 0203 	and.w	r2, r2, #3
 8006f34:	bf58      	it	pl
 8006f36:	4253      	negpl	r3, r2
 8006f38:	723b      	strb	r3, [r7, #8]

                 CPU_CRITICAL_ENTER();
 8006f3a:	2040      	movs	r0, #64	; 0x40
 8006f3c:	f7f9 f90a 	bl	8000154 <CPU_SR_Save>
 8006f40:	6178      	str	r0, [r7, #20]
                 temp                     = CPU_REG_NVIC_IPR(group);
 8006f42:	7a7b      	ldrb	r3, [r7, #9]
 8006f44:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8006f48:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	60fb      	str	r3, [r7, #12]
                 temp                    &= ~((CPU_INT32U)DEF_OCTET_MASK << (nbr * DEF_OCTET_NBR_BITS));
 8006f52:	7a3b      	ldrb	r3, [r7, #8]
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	22ff      	movs	r2, #255	; 0xff
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	4013      	ands	r3, r2
 8006f62:	60fb      	str	r3, [r7, #12]
                 temp                    |=  ((CPU_INT32U)prio_offset    << (nbr * DEF_OCTET_NBR_BITS));
 8006f64:	7a3b      	ldrb	r3, [r7, #8]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	693a      	ldr	r2, [r7, #16]
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
                 CPU_REG_NVIC_IPR(group)  = temp;               /* Set interrupt priority.                              */
 8006f74:	7a7b      	ldrb	r3, [r7, #9]
 8006f76:	f103 5360 	add.w	r3, r3, #939524096	; 0x38000000
 8006f7a:	f503 5364 	add.w	r3, r3, #14592	; 0x3900
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	461a      	mov	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6013      	str	r3, [r2, #0]
                 CPU_CRITICAL_EXIT();
 8006f86:	6978      	ldr	r0, [r7, #20]
 8006f88:	f7f9 f8f2 	bl	8000170 <CPU_SR_Restore>
             }
             break;
 8006f8c:	e001      	b.n	8006f92 <CPU_IntSrcPrioSet+0x25e>
             break;
 8006f8e:	bf00      	nop
 8006f90:	e000      	b.n	8006f94 <CPU_IntSrcPrioSet+0x260>
             break;
 8006f92:	bf00      	nop
    }
}
 8006f94:	bf00      	nop
 8006f96:	3718      	adds	r7, #24
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	e000ed18 	.word	0xe000ed18
 8006fa0:	e000ed1c 	.word	0xe000ed1c
 8006fa4:	e000ed20 	.word	0xe000ed20
 8006fa8:	e000e004 	.word	0xe000e004

08006fac <CPU_SW_Exception>:
*                   See also 'cpu_core.h  CPU_SW_EXCEPTION()  Note #1'.
*********************************************************************************************************
*/

void  CPU_SW_Exception (void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
    for (;;) {
 8006fb0:	e7fe      	b.n	8006fb0 <CPU_SW_Exception+0x4>
	...

08006fb4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <OSDebugInit+0xf4>)
 8006fbc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8006fbe:	4b3b      	ldr	r3, [pc, #236]	; (80070ac <OSDebugInit+0xf8>)
 8006fc0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8006fc2:	4b3b      	ldr	r3, [pc, #236]	; (80070b0 <OSDebugInit+0xfc>)
 8006fc4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8006fc6:	4b3b      	ldr	r3, [pc, #236]	; (80070b4 <OSDebugInit+0x100>)
 8006fc8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8006fca:	4b3b      	ldr	r3, [pc, #236]	; (80070b8 <OSDebugInit+0x104>)
 8006fcc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8006fce:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <OSDebugInit+0x108>)
 8006fd0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8006fd2:	4b3b      	ldr	r3, [pc, #236]	; (80070c0 <OSDebugInit+0x10c>)
 8006fd4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8006fd6:	4b3b      	ldr	r3, [pc, #236]	; (80070c4 <OSDebugInit+0x110>)
 8006fd8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8006fda:	4b3b      	ldr	r3, [pc, #236]	; (80070c8 <OSDebugInit+0x114>)
 8006fdc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8006fde:	4b3b      	ldr	r3, [pc, #236]	; (80070cc <OSDebugInit+0x118>)
 8006fe0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8006fe2:	4b3b      	ldr	r3, [pc, #236]	; (80070d0 <OSDebugInit+0x11c>)
 8006fe4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8006fe6:	4b3b      	ldr	r3, [pc, #236]	; (80070d4 <OSDebugInit+0x120>)
 8006fe8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8006fea:	4b3b      	ldr	r3, [pc, #236]	; (80070d8 <OSDebugInit+0x124>)
 8006fec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8006fee:	4b3b      	ldr	r3, [pc, #236]	; (80070dc <OSDebugInit+0x128>)
 8006ff0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8006ff2:	4b3b      	ldr	r3, [pc, #236]	; (80070e0 <OSDebugInit+0x12c>)
 8006ff4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8006ff6:	4b3b      	ldr	r3, [pc, #236]	; (80070e4 <OSDebugInit+0x130>)
 8006ff8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8006ffa:	4b3b      	ldr	r3, [pc, #236]	; (80070e8 <OSDebugInit+0x134>)
 8006ffc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8006ffe:	4b3b      	ldr	r3, [pc, #236]	; (80070ec <OSDebugInit+0x138>)
 8007000:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8007002:	4b3b      	ldr	r3, [pc, #236]	; (80070f0 <OSDebugInit+0x13c>)
 8007004:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8007006:	4b3b      	ldr	r3, [pc, #236]	; (80070f4 <OSDebugInit+0x140>)
 8007008:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 800700a:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <OSDebugInit+0x144>)
 800700c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 800700e:	4b3b      	ldr	r3, [pc, #236]	; (80070fc <OSDebugInit+0x148>)
 8007010:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <OSDebugInit+0x14c>)
 8007014:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8007016:	4b3b      	ldr	r3, [pc, #236]	; (8007104 <OSDebugInit+0x150>)
 8007018:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 800701a:	4b3b      	ldr	r3, [pc, #236]	; (8007108 <OSDebugInit+0x154>)
 800701c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 800701e:	4b3b      	ldr	r3, [pc, #236]	; (800710c <OSDebugInit+0x158>)
 8007020:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8007022:	4b3b      	ldr	r3, [pc, #236]	; (8007110 <OSDebugInit+0x15c>)
 8007024:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8007026:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <OSDebugInit+0x160>)
 8007028:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 800702a:	4b3b      	ldr	r3, [pc, #236]	; (8007118 <OSDebugInit+0x164>)
 800702c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 800702e:	4b3b      	ldr	r3, [pc, #236]	; (800711c <OSDebugInit+0x168>)
 8007030:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8007032:	4b3b      	ldr	r3, [pc, #236]	; (8007120 <OSDebugInit+0x16c>)
 8007034:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8007036:	4b3b      	ldr	r3, [pc, #236]	; (8007124 <OSDebugInit+0x170>)
 8007038:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 800703a:	4b3b      	ldr	r3, [pc, #236]	; (8007128 <OSDebugInit+0x174>)
 800703c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 800703e:	4b3b      	ldr	r3, [pc, #236]	; (800712c <OSDebugInit+0x178>)
 8007040:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8007042:	4b3b      	ldr	r3, [pc, #236]	; (8007130 <OSDebugInit+0x17c>)
 8007044:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8007046:	4b3b      	ldr	r3, [pc, #236]	; (8007134 <OSDebugInit+0x180>)
 8007048:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 800704a:	4b3b      	ldr	r3, [pc, #236]	; (8007138 <OSDebugInit+0x184>)
 800704c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 800704e:	4b3b      	ldr	r3, [pc, #236]	; (800713c <OSDebugInit+0x188>)
 8007050:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8007052:	4b3b      	ldr	r3, [pc, #236]	; (8007140 <OSDebugInit+0x18c>)
 8007054:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 8007056:	4b3b      	ldr	r3, [pc, #236]	; (8007144 <OSDebugInit+0x190>)
 8007058:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 800705a:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <OSDebugInit+0x194>)
 800705c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 800705e:	4b3b      	ldr	r3, [pc, #236]	; (800714c <OSDebugInit+0x198>)
 8007060:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8007062:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <OSDebugInit+0x19c>)
 8007064:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 8007066:	4b3b      	ldr	r3, [pc, #236]	; (8007154 <OSDebugInit+0x1a0>)
 8007068:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 800706a:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <OSDebugInit+0x1a4>)
 800706c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 800706e:	4b3b      	ldr	r3, [pc, #236]	; (800715c <OSDebugInit+0x1a8>)
 8007070:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8007072:	4b3b      	ldr	r3, [pc, #236]	; (8007160 <OSDebugInit+0x1ac>)
 8007074:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 8007076:	4b3b      	ldr	r3, [pc, #236]	; (8007164 <OSDebugInit+0x1b0>)
 8007078:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 800707a:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <OSDebugInit+0x1b4>)
 800707c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 800707e:	4b3b      	ldr	r3, [pc, #236]	; (800716c <OSDebugInit+0x1b8>)
 8007080:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8007082:	4b3b      	ldr	r3, [pc, #236]	; (8007170 <OSDebugInit+0x1bc>)
 8007084:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 8007086:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <OSDebugInit+0x1c0>)
 8007088:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 800708a:	4b3b      	ldr	r3, [pc, #236]	; (8007178 <OSDebugInit+0x1c4>)
 800708c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 800708e:	4b3b      	ldr	r3, [pc, #236]	; (800717c <OSDebugInit+0x1c8>)
 8007090:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8007092:	4b3b      	ldr	r3, [pc, #236]	; (8007180 <OSDebugInit+0x1cc>)
 8007094:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 8007096:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <OSDebugInit+0x1d0>)
 8007098:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 800709a:	4b3b      	ldr	r3, [pc, #236]	; (8007188 <OSDebugInit+0x1d4>)
 800709c:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bc80      	pop	{r7}
 80070a6:	4770      	bx	lr
 80070a8:	0800b69c 	.word	0x0800b69c
 80070ac:	0800b6a0 	.word	0x0800b6a0
 80070b0:	0800b6a6 	.word	0x0800b6a6
 80070b4:	0800b6a8 	.word	0x0800b6a8
 80070b8:	0800b6a4 	.word	0x0800b6a4
 80070bc:	0800b6aa 	.word	0x0800b6aa
 80070c0:	0800b6ac 	.word	0x0800b6ac
 80070c4:	0800b6ae 	.word	0x0800b6ae
 80070c8:	0800b6b0 	.word	0x0800b6b0
 80070cc:	0800b6b2 	.word	0x0800b6b2
 80070d0:	0800b6b4 	.word	0x0800b6b4
 80070d4:	0800b6b6 	.word	0x0800b6b6
 80070d8:	0800b6b8 	.word	0x0800b6b8
 80070dc:	0800b6ba 	.word	0x0800b6ba
 80070e0:	0800b6bc 	.word	0x0800b6bc
 80070e4:	0800b6be 	.word	0x0800b6be
 80070e8:	0800b6c0 	.word	0x0800b6c0
 80070ec:	0800b6c2 	.word	0x0800b6c2
 80070f0:	0800b6c4 	.word	0x0800b6c4
 80070f4:	0800b6c6 	.word	0x0800b6c6
 80070f8:	0800b6c8 	.word	0x0800b6c8
 80070fc:	0800b6ca 	.word	0x0800b6ca
 8007100:	0800b6cc 	.word	0x0800b6cc
 8007104:	0800b6ce 	.word	0x0800b6ce
 8007108:	0800b6d0 	.word	0x0800b6d0
 800710c:	0800b6d2 	.word	0x0800b6d2
 8007110:	0800b6d4 	.word	0x0800b6d4
 8007114:	0800b6d6 	.word	0x0800b6d6
 8007118:	0800b6d8 	.word	0x0800b6d8
 800711c:	0800b6da 	.word	0x0800b6da
 8007120:	0800b6dc 	.word	0x0800b6dc
 8007124:	0800b6de 	.word	0x0800b6de
 8007128:	0800b6e0 	.word	0x0800b6e0
 800712c:	0800b6e2 	.word	0x0800b6e2
 8007130:	0800b6e4 	.word	0x0800b6e4
 8007134:	0800b6e6 	.word	0x0800b6e6
 8007138:	0800b6e8 	.word	0x0800b6e8
 800713c:	0800b6ea 	.word	0x0800b6ea
 8007140:	0800b6ec 	.word	0x0800b6ec
 8007144:	0800b6ee 	.word	0x0800b6ee
 8007148:	0800b6f0 	.word	0x0800b6f0
 800714c:	0800b6f2 	.word	0x0800b6f2
 8007150:	0800b6f4 	.word	0x0800b6f4
 8007154:	0800b6f6 	.word	0x0800b6f6
 8007158:	20001c04 	.word	0x20001c04
 800715c:	20001b68 	.word	0x20001b68
 8007160:	0800b6fa 	.word	0x0800b6fa
 8007164:	0800b6fc 	.word	0x0800b6fc
 8007168:	0800b6fe 	.word	0x0800b6fe
 800716c:	0800b700 	.word	0x0800b700
 8007170:	0800b702 	.word	0x0800b702
 8007174:	0800b704 	.word	0x0800b704
 8007178:	0800b706 	.word	0x0800b706
 800717c:	0800b708 	.word	0x0800b708
 8007180:	0800b70a 	.word	0x0800b70a
 8007184:	0800b6f8 	.word	0x0800b6f8
 8007188:	0800b70c 	.word	0x0800b70c

0800718c <OSInitHookBegin>:
*                 b) Set bits ASPEN and LSPEN in FPCCR register.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
    OS_STK  *pstk;
#if (OS_CPU_ARM_FP_EN > 0u)
    INT32U   reg_val;
#endif
                                                                /* Clear exception stack for stack checking.            */
    pstk = &OS_CPU_ExceptStk[0];
 8007192:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <OSInitHookBegin+0x54>)
 8007194:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8007196:	f44f 7380 	mov.w	r3, #256	; 0x100
 800719a:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 800719c:	e007      	b.n	80071ae <OSInitHookBegin+0x22>
        size--;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	603a      	str	r2, [r7, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
    while (size > 0u) {
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f4      	bne.n	800719e <OSInitHookBegin+0x12>
    }

                                                                /* Align the ISR stack to 8-bytes                       */
    OS_CPU_ExceptStkBase = (OS_STK *)&OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE];
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <OSInitHookBegin+0x58>)
 80071b6:	4a0c      	ldr	r2, [pc, #48]	; (80071e8 <OSInitHookBegin+0x5c>)
 80071b8:	601a      	str	r2, [r3, #0]
    OS_CPU_ExceptStkBase = (OS_STK *)((OS_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <OSInitHookBegin+0x58>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f023 0307 	bic.w	r3, r3, #7
 80071c2:	461a      	mov	r2, r3
 80071c4:	4b07      	ldr	r3, [pc, #28]	; (80071e4 <OSInitHookBegin+0x58>)
 80071c6:	601a      	str	r2, [r3, #0]
        }
    }
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <OSInitHookBegin+0x60>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	801a      	strh	r2, [r3, #0]
#endif

                                                                /* Set BASEPRI boundary from the configuration.         */
    OS_KA_BASEPRI_Boundary = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 80071ce:	4b08      	ldr	r3, [pc, #32]	; (80071f0 <OSInitHookBegin+0x64>)
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	601a      	str	r2, [r3, #0]
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	bc80      	pop	{r7}
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	20001764 	.word	0x20001764
 80071e4:	2000175c 	.word	0x2000175c
 80071e8:	20001b64 	.word	0x20001b64
 80071ec:	200010a8 	.word	0x200010a8
 80071f0:	20001760 	.word	0x20001760

080071f4 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0

}
 80071f8:	bf00      	nop
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f002 f97d 	bl	8009508 <App_TaskCreateHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800720e:	bf00      	nop
 8007210:	3708      	adds	r7, #8
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b082      	sub	sp, #8
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f002 f97b 	bl	800951a <App_TaskDelHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8007230:	f002 f97c 	bl	800952c <App_TaskIdleHook>
#endif
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}

08007238 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 f97f 	bl	8009544 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8007252:	f002 f971 	bl	8009538 <App_TaskStatHook>
#endif
}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <OSTaskStkInit>:

OS_STK  *OSTaskStkInit (void    (*task)(void *p_arg),
                        void     *p_arg,
                        OS_STK   *ptos,
                        INT16U    opt)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	807b      	strh	r3, [r7, #2]
    OS_STK  *p_stk;


    (void)opt;                                                  /* 'opt' is not used, prevent warning                   */
    p_stk      = ptos + 1u;                                     /* Load stack pointer                                   */
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3304      	adds	r3, #4
 800726e:	617b      	str	r3, [r7, #20]
                                                                /* Align the stack to 8-bytes.                          */
    p_stk      = (OS_STK *)((OS_STK)(p_stk) & 0xFFFFFFF8u);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 0307 	bic.w	r3, r3, #7
 8007276:	617b      	str	r3, [r7, #20]
    *(--p_stk) = (OS_STK)0x40400000u;                           /* S3                                                   */
    *(--p_stk) = (OS_STK)0x40000000u;                           /* S2                                                   */
    *(--p_stk) = (OS_STK)0x3F800000u;                           /* S1                                                   */
    *(--p_stk) = (OS_STK)0x00000000u;                           /* S0                                                   */
#endif
    *(--p_stk) = (OS_STK)0x01000000uL;                          /* xPSR                                                 */
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	3b04      	subs	r3, #4
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007284:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)task;                                  /* Entry Point                                          */
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	3b04      	subs	r3, #4
 800728a:	617b      	str	r3, [r7, #20]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)OS_TaskReturn;                         /* R14 (LR)                                             */
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3b04      	subs	r3, #4
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	4a34      	ldr	r2, [pc, #208]	; (800736c <OSTaskStkInit+0x110>)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x12121212uL;                          /* R12                                                  */
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	3b04      	subs	r3, #4
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80072aa:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x03030303uL;                          /* R3                                                   */
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80072b8:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x02020202uL;                          /* R2                                                   */
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	3b04      	subs	r3, #4
 80072be:	617b      	str	r3, [r7, #20]
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80072c6:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x01010101uL;                          /* R1                                                   */
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	3b04      	subs	r3, #4
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80072d4:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)p_arg;                                 /* R0 : argument                                        */
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	3b04      	subs	r3, #4
 80072da:	617b      	str	r3, [r7, #20]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	601a      	str	r2, [r3, #0]

#if (OS_CPU_ARM_FP_EN > 0u)
    *(--p_stk) = (OS_STK)0xFFFFFFEDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
#else
    *(--p_stk) = (OS_STK)0xFFFFFFFDuL;                          /* R14: EXEC_RETURN; See Note 5                         */
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f06f 0202 	mvn.w	r2, #2
 80072ee:	601a      	str	r2, [r3, #0]
#endif
                                                                /* Remaining registers saved on process stack           */
    *(--p_stk) = (OS_STK)0x11111111uL;                          /* R11                                                  */
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	3b04      	subs	r3, #4
 80072f4:	617b      	str	r3, [r7, #20]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80072fc:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x10101010uL;                          /* R10                                                  */
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	3b04      	subs	r3, #4
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800730a:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x09090909uL;                          /* R9                                                   */
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	3b04      	subs	r3, #4
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8007318:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x08080808uL;                          /* R8                                                   */
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3b04      	subs	r3, #4
 800731e:	617b      	str	r3, [r7, #20]
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8007326:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x07070707uL;                          /* R7                                                   */
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	3b04      	subs	r3, #4
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8007334:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x06060606uL;                          /* R6                                                   */
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	3b04      	subs	r3, #4
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8007342:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x05050505uL;                          /* R5                                                   */
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	3b04      	subs	r3, #4
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8007350:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x04040404uL;                          /* R4                                                   */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	3b04      	subs	r3, #4
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800735e:	601a      	str	r2, [r3, #0]
    *(--p_stk) = (OS_STK)0x41900000u;                           /* S18                                                  */
    *(--p_stk) = (OS_STK)0x41880000u;                           /* S17                                                  */
    *(--p_stk) = (OS_STK)0x41800000u;                           /* S16                                                  */
#endif

    return (p_stk);
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	bc80      	pop	{r7}
 800736a:	4770      	bx	lr
 800736c:	08008f49 	.word	0x08008f49

08007370 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Push(OSTCBCur->OSTCBStkPtr);                  /* Push the FP registers of the current task.           */
#endif

#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8007374:	f002 f8ef 	bl	8009556 <App_TaskSwHook>
    OS_TRACE_TASK_SWITCHED_IN(OSTCBHighRdy);

#if (OS_CPU_ARM_FP_EN > 0u)
    OS_CPU_FP_Reg_Pop(OSTCBHighRdy->OSTCBStkPtr);               /* Pop the FP registers of the highest ready task.      */
#endif
}
 8007378:	bf00      	nop
 800737a:	bd80      	pop	{r7, pc}

0800737c <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f002 f8ec 	bl	8009562 <App_TCBInitHook>
#else
    (void)ptcb;                                                 /* Prevent compiler warning                             */
#endif
}
 800738a:	bf00      	nop
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8007398:	f002 f8ec 	bl	8009574 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 800739c:	4b08      	ldr	r3, [pc, #32]	; (80073c0 <OSTimeTickHook+0x2c>)
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	3301      	adds	r3, #1
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <OSTimeTickHook+0x2c>)
 80073a6:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <OSTimeTickHook+0x2c>)
 80073aa:	881b      	ldrh	r3, [r3, #0]
 80073ac:	2b63      	cmp	r3, #99	; 0x63
 80073ae:	d904      	bls.n	80073ba <OSTimeTickHook+0x26>
        OSTmrCtr = 0u;
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <OSTimeTickHook+0x2c>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 80073b6:	f001 fec5 	bl	8009144 <OSTmrSignal>
    }
#endif
}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200010a8 	.word	0x200010a8

080073c4 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                                    /* Allocate storage for CPU status register             */
    OS_CPU_SR  cpu_sr;
#endif


    OS_ENTER_CRITICAL();
 80073ca:	2040      	movs	r0, #64	; 0x40
 80073cc:	f7f8 fee8 	bl	80001a0 <OS_CPU_SR_Save>
 80073d0:	6078      	str	r0, [r7, #4]
    OSIntEnter();                                               /* Tell uC/OS-II that we are starting an ISR            */
 80073d2:	f000 f8a7 	bl	8007524 <OSIntEnter>
    OS_EXIT_CRITICAL();
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7f8 fef0 	bl	80001bc <OS_CPU_SR_Restore>

    OSTimeTick();                                               /* Call uC/OS-II's OSTimeTick()                         */
 80073dc:	f000 f9c4 	bl	8007768 <OSTimeTick>

    OSIntExit();                                                /* Tell uC/OS-II that we are leaving the ISR            */
 80073e0:	f000 f8b8 	bl	8007554 <OSIntExit>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <OS_CPU_SysTickInitFreq>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInitFreq (INT32U  cpu_freq)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
    INT32U  cnts;


    cnts = (cpu_freq / (INT32U)OS_TICKS_PER_SEC);               /* Determine nbr SysTick cnts between two OS tick intr. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a06      	ldr	r2, [pc, #24]	; (8007410 <OS_CPU_SysTickInitFreq+0x24>)
 80073f8:	fba2 2303 	umull	r2, r3, r2, r3
 80073fc:	099b      	lsrs	r3, r3, #6
 80073fe:	60fb      	str	r3, [r7, #12]

    OS_CPU_SysTickInit(cnts);
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f807 	bl	8007414 <OS_CPU_SysTickInit>
}
 8007406:	bf00      	nop
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	10624dd3 	.word	0x10624dd3

08007414 <OS_CPU_SysTickInit>:
*              2) Either OS_CPU_SysTickInitFreq or OS_CPU_SysTickInit() can be called.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
    INT32U  prio;
    INT32U  basepri;


                                                                /* Set BASEPRI boundary from the configuration.         */
    basepri               = (INT32U)(CPU_CFG_KA_IPL_BOUNDARY << (8u - CPU_CFG_NVIC_PRIO_BITS));
 800741c:	2340      	movs	r3, #64	; 0x40
 800741e:	60fb      	str	r3, [r7, #12]
    OS_CPU_CM_SYST_RVR    = cnts - 1u;                          /* Set Reload register.                                 */
 8007420:	4a11      	ldr	r2, [pc, #68]	; (8007468 <OS_CPU_SysTickInit+0x54>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3b01      	subs	r3, #1
 8007426:	6013      	str	r3, [r2, #0]

                                                                /* Set SysTick handler prio.                            */
    prio                  =  OS_CPU_CM_SCB_SHPRI3;
 8007428:	4b10      	ldr	r3, [pc, #64]	; (800746c <OS_CPU_SysTickInit+0x58>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60bb      	str	r3, [r7, #8]
    prio                 &=  0x00FFFFFFu;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007434:	60bb      	str	r3, [r7, #8]
    prio                 |= (basepri << 24u);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	061b      	lsls	r3, r3, #24
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	4313      	orrs	r3, r2
 800743e:	60bb      	str	r3, [r7, #8]
    OS_CPU_CM_SCB_SHPRI3  = prio;
 8007440:	4a0a      	ldr	r2, [pc, #40]	; (800746c <OS_CPU_SysTickInit+0x58>)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	6013      	str	r3, [r2, #0]

                                                                /* Enable timer.                                        */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_CLKSOURCE |
 8007446:	4b0a      	ldr	r3, [pc, #40]	; (8007470 <OS_CPU_SysTickInit+0x5c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a09      	ldr	r2, [pc, #36]	; (8007470 <OS_CPU_SysTickInit+0x5c>)
 800744c:	f043 0305 	orr.w	r3, r3, #5
 8007450:	6013      	str	r3, [r2, #0]
                            OS_CPU_CM_SYST_CSR_ENABLE;
                                                                /* Enable timer interrupt.                              */
    OS_CPU_CM_SYST_CSR   |= OS_CPU_CM_SYST_CSR_TICKINT;
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <OS_CPU_SysTickInit+0x5c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a06      	ldr	r2, [pc, #24]	; (8007470 <OS_CPU_SysTickInit+0x5c>)
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	6013      	str	r3, [r2, #0]
}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	bc80      	pop	{r7}
 8007466:	4770      	bx	lr
 8007468:	e000e014 	.word	0xe000e014
 800746c:	e000ed20 	.word	0xe000ed20
 8007470:	e000e010 	.word	0xe000e010

08007474 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007480:	2300      	movs	r3, #0
 8007482:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d103      	bne.n	8007492 <OSEventNameSet+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	701a      	strb	r2, [r3, #0]
        return;
 8007490:	e025      	b.n	80074de <OSEventNameSet+0x6a>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d103      	bne.n	80074a0 <OSEventNameSet+0x2c>
        *perr = OS_ERR_PNAME_NULL;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	220c      	movs	r2, #12
 800749c:	701a      	strb	r2, [r3, #0]
        return;
 800749e:	e01e      	b.n	80074de <OSEventNameSet+0x6a>
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80074a0:	4b10      	ldr	r3, [pc, #64]	; (80074e4 <OSEventNameSet+0x70>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d003      	beq.n	80074b0 <OSEventNameSet+0x3c>
        *perr = OS_ERR_NAME_SET_ISR;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2212      	movs	r2, #18
 80074ac:	701a      	strb	r2, [r3, #0]
        return;
 80074ae:	e016      	b.n	80074de <OSEventNameSet+0x6a>
    }
    switch (pevent->OSEventType) {
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d903      	bls.n	80074c2 <OSEventNameSet+0x4e>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
             return;
 80074c0:	e00d      	b.n	80074de <OSEventNameSet+0x6a>
             break;
 80074c2:	bf00      	nop
    }
    OS_ENTER_CRITICAL();
 80074c4:	2040      	movs	r0, #64	; 0x40
 80074c6:	f7f8 fe6b 	bl	80001a0 <OS_CPU_SR_Save>
 80074ca:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 80074d2:	6978      	ldr	r0, [r7, #20]
 80074d4:	f7f8 fe72 	bl	80001bc <OS_CPU_SR_Restore>
    OS_TRACE_EVENT_NAME_SET(pevent, pname);
    *perr = OS_ERR_NONE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
}
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20002398 	.word	0x20002398

080074e8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    INT8U  err;
#endif
#endif

    OSInitHookBegin();                                           /* Call port specific initialization code   */
 80074ec:	f7ff fe4e 	bl	800718c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 80074f0:	f000 fb84 	bl	8007bfc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 80074f4:	f000 fbc0 	bl	8007c78 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 80074f8:	f000 fc3a 	bl	8007d70 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 80074fc:	f000 fb34 	bl	8007b68 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 8007500:	f000 feba 	bl	8008278 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 8007504:	f001 f864 	bl	80085d0 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 8007508:	f001 f8a2 	bl	8008650 <OS_QInit>
        return;
    }
#endif
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 800750c:	f000 fbe4 	bl	8007cd8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 8007510:	f000 fc08 	bl	8007d24 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 8007514:	f001 fe28 	bl	8009168 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 8007518:	f7ff fe6c 	bl	80071f4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 800751c:	f7ff fd4a 	bl	8006fb4 <OSDebugInit>
#endif
}
 8007520:	bf00      	nop
 8007522:	bd80      	pop	{r7, pc}

08007524 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 8007528:	4b08      	ldr	r3, [pc, #32]	; (800754c <OSIntEnter+0x28>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d109      	bne.n	8007544 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <OSIntEnter+0x2c>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2bff      	cmp	r3, #255	; 0xff
 8007536:	d005      	beq.n	8007544 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 8007538:	4b05      	ldr	r3, [pc, #20]	; (8007550 <OSIntEnter+0x2c>)
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	3301      	adds	r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <OSIntEnter+0x2c>)
 8007542:	701a      	strb	r2, [r3, #0]
        }
        OS_TRACE_ISR_ENTER();
    }
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr
 800754c:	20001ba9 	.word	0x20001ba9
 8007550:	20002398 	.word	0x20002398

08007554 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800755a:	2300      	movs	r3, #0
 800755c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 800755e:	4b1e      	ldr	r3, [pc, #120]	; (80075d8 <OSIntExit+0x84>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d134      	bne.n	80075d0 <OSIntExit+0x7c>
        OS_ENTER_CRITICAL();
 8007566:	2040      	movs	r0, #64	; 0x40
 8007568:	f7f8 fe1a 	bl	80001a0 <OS_CPU_SR_Save>
 800756c:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 800756e:	4b1b      	ldr	r3, [pc, #108]	; (80075dc <OSIntExit+0x88>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d005      	beq.n	8007582 <OSIntExit+0x2e>
            OSIntNesting--;
 8007576:	4b19      	ldr	r3, [pc, #100]	; (80075dc <OSIntExit+0x88>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	3b01      	subs	r3, #1
 800757c:	b2da      	uxtb	r2, r3
 800757e:	4b17      	ldr	r3, [pc, #92]	; (80075dc <OSIntExit+0x88>)
 8007580:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8007582:	4b16      	ldr	r3, [pc, #88]	; (80075dc <OSIntExit+0x88>)
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d11f      	bne.n	80075ca <OSIntExit+0x76>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 800758a:	4b15      	ldr	r3, [pc, #84]	; (80075e0 <OSIntExit+0x8c>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11b      	bne.n	80075ca <OSIntExit+0x76>
                OS_SchedNew();
 8007592:	f000 fc95 	bl	8007ec0 <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8007596:	4b13      	ldr	r3, [pc, #76]	; (80075e4 <OSIntExit+0x90>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	4b12      	ldr	r3, [pc, #72]	; (80075e8 <OSIntExit+0x94>)
 800759e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a2:	4a12      	ldr	r2, [pc, #72]	; (80075ec <OSIntExit+0x98>)
 80075a4:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <OSIntExit+0x90>)
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	4b11      	ldr	r3, [pc, #68]	; (80075f0 <OSIntExit+0x9c>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d00b      	beq.n	80075ca <OSIntExit+0x76>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 80075b2:	4b0e      	ldr	r3, [pc, #56]	; (80075ec <OSIntExit+0x98>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075b8:	3201      	adds	r2, #1
 80075ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 80075bc:	4b0d      	ldr	r3, [pc, #52]	; (80075f4 <OSIntExit+0xa0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3301      	adds	r3, #1
 80075c2:	4a0c      	ldr	r2, [pc, #48]	; (80075f4 <OSIntExit+0xa0>)
 80075c4:	6013      	str	r3, [r2, #0]
                    OS_TLS_TaskSw();
#endif
#endif
                    OS_TRACE_ISR_EXIT_TO_SCHEDULER();

                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 80075c6:	f7f8 fe42 	bl	800024e <OSCtxSw>
            }
        } else {
            OS_TRACE_ISR_EXIT();
        }

        OS_EXIT_CRITICAL();
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7f8 fdf6 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	20001ba9 	.word	0x20001ba9
 80075dc:	20002398 	.word	0x20002398
 80075e0:	20001ba0 	.word	0x20001ba0
 80075e4:	20001bb2 	.word	0x20001bb2
 80075e8:	20002e34 	.word	0x20002e34
 80075ec:	20002180 	.word	0x20002180
 80075f0:	20001e84 	.word	0x20001e84
 80075f4:	20002108 	.word	0x20002108

080075f8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 8007602:	4b0e      	ldr	r3, [pc, #56]	; (800763c <OSSchedLock+0x44>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d114      	bne.n	8007634 <OSSchedLock+0x3c>
        OS_ENTER_CRITICAL();
 800760a:	2040      	movs	r0, #64	; 0x40
 800760c:	f7f8 fdc8 	bl	80001a0 <OS_CPU_SR_Save>
 8007610:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 8007612:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <OSSchedLock+0x48>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <OSSchedLock+0x36>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800761a:	4b0a      	ldr	r3, [pc, #40]	; (8007644 <OSSchedLock+0x4c>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2bff      	cmp	r3, #255	; 0xff
 8007620:	d005      	beq.n	800762e <OSSchedLock+0x36>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 8007622:	4b08      	ldr	r3, [pc, #32]	; (8007644 <OSSchedLock+0x4c>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	3301      	adds	r3, #1
 8007628:	b2da      	uxtb	r2, r3
 800762a:	4b06      	ldr	r3, [pc, #24]	; (8007644 <OSSchedLock+0x4c>)
 800762c:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7f8 fdc4 	bl	80001bc <OS_CPU_SR_Restore>
    }
}
 8007634:	bf00      	nop
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20001ba9 	.word	0x20001ba9
 8007640:	20002398 	.word	0x20002398
 8007644:	20001ba0 	.word	0x20001ba0

08007648 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800764e:	2300      	movs	r3, #0
 8007650:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <OSSchedUnlock+0x68>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d126      	bne.n	80076a8 <OSSchedUnlock+0x60>
        OS_ENTER_CRITICAL();
 800765a:	2040      	movs	r0, #64	; 0x40
 800765c:	f7f8 fda0 	bl	80001a0 <OS_CPU_SR_Save>
 8007660:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8007662:	4b14      	ldr	r3, [pc, #80]	; (80076b4 <OSSchedUnlock+0x6c>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11b      	bne.n	80076a2 <OSSchedUnlock+0x5a>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <OSSchedUnlock+0x70>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d013      	beq.n	800769a <OSSchedUnlock+0x52>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8007672:	4b11      	ldr	r3, [pc, #68]	; (80076b8 <OSSchedUnlock+0x70>)
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	3b01      	subs	r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <OSSchedUnlock+0x70>)
 800767c:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 800767e:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <OSSchedUnlock+0x70>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d105      	bne.n	8007692 <OSSchedUnlock+0x4a>
                    OS_EXIT_CRITICAL();
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7f8 fd98 	bl	80001bc <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 800768c:	f000 fbd6 	bl	8007e3c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8007690:	e00a      	b.n	80076a8 <OSSchedUnlock+0x60>
                    OS_EXIT_CRITICAL();
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7f8 fd92 	bl	80001bc <OS_CPU_SR_Restore>
}
 8007698:	e006      	b.n	80076a8 <OSSchedUnlock+0x60>
                OS_EXIT_CRITICAL();
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f7f8 fd8e 	bl	80001bc <OS_CPU_SR_Restore>
}
 80076a0:	e002      	b.n	80076a8 <OSSchedUnlock+0x60>
            OS_EXIT_CRITICAL();
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7f8 fd8a 	bl	80001bc <OS_CPU_SR_Restore>
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001ba9 	.word	0x20001ba9
 80076b4:	20002398 	.word	0x20002398
 80076b8:	20001ba0 	.word	0x20001ba0

080076bc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 80076c0:	4b0c      	ldr	r3, [pc, #48]	; (80076f4 <OSStart+0x38>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d113      	bne.n	80076f0 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 80076c8:	f000 fbfa 	bl	8007ec0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <OSStart+0x3c>)
 80076ce:	781a      	ldrb	r2, [r3, #0]
 80076d0:	4b0a      	ldr	r3, [pc, #40]	; (80076fc <OSStart+0x40>)
 80076d2:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 80076d4:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <OSStart+0x3c>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	4b09      	ldr	r3, [pc, #36]	; (8007700 <OSStart+0x44>)
 80076dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e0:	4a08      	ldr	r2, [pc, #32]	; (8007704 <OSStart+0x48>)
 80076e2:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <OSStart+0x48>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a07      	ldr	r2, [pc, #28]	; (8007708 <OSStart+0x4c>)
 80076ea:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 80076ec:	f7f8 fd6f 	bl	80001ce <OSStartHighRdy>
    }
}
 80076f0:	bf00      	nop
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	20001ba9 	.word	0x20001ba9
 80076f8:	20001bb2 	.word	0x20001bb2
 80076fc:	20001e84 	.word	0x20001e84
 8007700:	20002e34 	.word	0x20002e34
 8007704:	20002180 	.word	0x20002180
 8007708:	2000239c 	.word	0x2000239c

0800770c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OSStatInit (void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007712:	2300      	movs	r3, #0
 8007714:	607b      	str	r3, [r7, #4]
#endif



    OSTimeDly(2u);                               /* Synchronize with clock tick                        */
 8007716:	2002      	movs	r0, #2
 8007718:	f001 fc46 	bl	8008fa8 <OSTimeDly>
    OS_ENTER_CRITICAL();
 800771c:	2040      	movs	r0, #64	; 0x40
 800771e:	f7f8 fd3f 	bl	80001a0 <OS_CPU_SR_Save>
 8007722:	6078      	str	r0, [r7, #4]
    OSIdleCtr    = 0uL;                          /* Clear idle counter                                 */
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <OSStatInit+0x50>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7f8 fd46 	bl	80001bc <OS_CPU_SR_Restore>
    OSTimeDly(OS_TICKS_PER_SEC / 10u);           /* Determine MAX. idle counter value for 1/10 second  */
 8007730:	2064      	movs	r0, #100	; 0x64
 8007732:	f001 fc39 	bl	8008fa8 <OSTimeDly>
    OS_ENTER_CRITICAL();
 8007736:	2040      	movs	r0, #64	; 0x40
 8007738:	f7f8 fd32 	bl	80001a0 <OS_CPU_SR_Save>
 800773c:	6078      	str	r0, [r7, #4]
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 800773e:	4b07      	ldr	r3, [pc, #28]	; (800775c <OSStatInit+0x50>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a07      	ldr	r2, [pc, #28]	; (8007760 <OSStatInit+0x54>)
 8007744:	6013      	str	r3, [r2, #0]
    OSStatRdy    = OS_TRUE;
 8007746:	4b07      	ldr	r3, [pc, #28]	; (8007764 <OSStatInit+0x58>)
 8007748:	2201      	movs	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7f8 fd35 	bl	80001bc <OS_CPU_SR_Restore>
}
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	20001bac 	.word	0x20001bac
 8007760:	20002110 	.word	0x20002110
 8007764:	20002e30 	.word	0x20002e30

08007768 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 800776e:	2300      	movs	r3, #0
 8007770:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 8007772:	f7ff fe0f 	bl	8007394 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 8007776:	2040      	movs	r0, #64	; 0x40
 8007778:	f7f8 fd12 	bl	80001a0 <OS_CPU_SR_Save>
 800777c:	6078      	str	r0, [r7, #4]
    OSTime++;
 800777e:	4b45      	ldr	r3, [pc, #276]	; (8007894 <OSTimeTick+0x12c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3301      	adds	r3, #1
 8007784:	4a43      	ldr	r2, [pc, #268]	; (8007894 <OSTimeTick+0x12c>)
 8007786:	6013      	str	r3, [r2, #0]
    OS_TRACE_TICK_INCREMENT(OSTime);
    OS_EXIT_CRITICAL();
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7f8 fd17 	bl	80001bc <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 800778e:	4b42      	ldr	r3, [pc, #264]	; (8007898 <OSTimeTick+0x130>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d17a      	bne.n	800788c <OSTimeTick+0x124>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 8007796:	4b41      	ldr	r3, [pc, #260]	; (800789c <OSTimeTick+0x134>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b02      	cmp	r3, #2
 800779c:	d00c      	beq.n	80077b8 <OSTimeTick+0x50>
 800779e:	2b02      	cmp	r3, #2
 80077a0:	dc10      	bgt.n	80077c4 <OSTimeTick+0x5c>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d002      	beq.n	80077ac <OSTimeTick+0x44>
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d003      	beq.n	80077b2 <OSTimeTick+0x4a>
 80077aa:	e00b      	b.n	80077c4 <OSTimeTick+0x5c>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	72fb      	strb	r3, [r7, #11]
                 break;
 80077b0:	e00e      	b.n	80077d0 <OSTimeTick+0x68>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 80077b2:	2300      	movs	r3, #0
 80077b4:	72fb      	strb	r3, [r7, #11]
                 break;
 80077b6:	e00b      	b.n	80077d0 <OSTimeTick+0x68>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 80077b8:	2301      	movs	r3, #1
 80077ba:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 80077bc:	4b37      	ldr	r3, [pc, #220]	; (800789c <OSTimeTick+0x134>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
                 break;
 80077c2:	e005      	b.n	80077d0 <OSTimeTick+0x68>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 80077c4:	2301      	movs	r3, #1
 80077c6:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 80077c8:	4b34      	ldr	r3, [pc, #208]	; (800789c <OSTimeTick+0x134>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	701a      	strb	r2, [r3, #0]
                 break;
 80077ce:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 80077d0:	7afb      	ldrb	r3, [r7, #11]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d059      	beq.n	800788a <OSTimeTick+0x122>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 80077d6:	4b32      	ldr	r3, [pc, #200]	; (80078a0 <OSTimeTick+0x138>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 80077dc:	e04f      	b.n	800787e <OSTimeTick+0x116>
            OS_ENTER_CRITICAL();
 80077de:	2040      	movs	r0, #64	; 0x40
 80077e0:	f7f8 fcde 	bl	80001a0 <OS_CPU_SR_Save>
 80077e4:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d041      	beq.n	8007872 <OSTimeTick+0x10a>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	1e5a      	subs	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d138      	bne.n	8007872 <OSTimeTick+0x10a>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007806:	f003 0337 	and.w	r3, r3, #55	; 0x37
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00d      	beq.n	800782a <OSTimeTick+0xc2>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;   /* Yes, Clear status flag   */
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007814:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8007818:	b2da      	uxtb	r2, r3
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007828:	e003      	b.n	8007832 <OSTimeTick+0xca>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007838:	f003 0308 	and.w	r3, r3, #8
 800783c:	2b00      	cmp	r3, #0
 800783e:	d118      	bne.n	8007872 <OSTimeTick+0x10a>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007846:	4b17      	ldr	r3, [pc, #92]	; (80078a4 <OSTimeTick+0x13c>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	4313      	orrs	r3, r2
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b15      	ldr	r3, [pc, #84]	; (80078a4 <OSTimeTick+0x13c>)
 8007850:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007858:	461a      	mov	r2, r3
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <OSTimeTick+0x140>)
 800785c:	5c9a      	ldrb	r2, [r3, r2]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007864:	68f9      	ldr	r1, [r7, #12]
 8007866:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800786a:	4313      	orrs	r3, r2
 800786c:	b2da      	uxtb	r2, r3
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <OSTimeTick+0x140>)
 8007870:	545a      	strb	r2, [r3, r1]
                        OS_TRACE_TASK_READY(ptcb);
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7f8 fc9f 	bl	80001bc <OS_CPU_SR_Restore>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007884:	2b3f      	cmp	r3, #63	; 0x3f
 8007886:	d1aa      	bne.n	80077de <OSTimeTick+0x76>
 8007888:	e000      	b.n	800788c <OSTimeTick+0x124>
            return;
 800788a:	bf00      	nop
        }
    }
}
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200023a4 	.word	0x200023a4
 8007898:	20001ba9 	.word	0x20001ba9
 800789c:	20001f04 	.word	0x20001f04
 80078a0:	20001e88 	.word	0x20001e88
 80078a4:	20002188 	.word	0x20002188
 80078a8:	2000218c 	.word	0x2000218c

080078ac <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 80078ac:	b480      	push	{r7}
 80078ae:	af00      	add	r7, sp, #0
}
 80078b0:	bf00      	nop
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bc80      	pop	{r7}
 80078b6:	4770      	bx	lr

080078b8 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	4611      	mov	r1, r2
 80078c4:	461a      	mov	r2, r3
 80078c6:	460b      	mov	r3, r1
 80078c8:	71fb      	strb	r3, [r7, #7]
 80078ca:	4613      	mov	r3, r2
 80078cc:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	7a9b      	ldrb	r3, [r3, #10]
 80078d2:	461a      	mov	r2, r3
 80078d4:	4b2d      	ldr	r3, [pc, #180]	; (800798c <OS_EventTaskRdy+0xd4>)
 80078d6:	5c9b      	ldrb	r3, [r3, r2]
 80078d8:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 80078da:	7dfb      	ldrb	r3, [r7, #23]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	7adb      	ldrb	r3, [r3, #11]
 80078e2:	461a      	mov	r2, r3
 80078e4:	4b29      	ldr	r3, [pc, #164]	; (800798c <OS_EventTaskRdy+0xd4>)
 80078e6:	5c9b      	ldrb	r3, [r3, r2]
 80078e8:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	7dbb      	ldrb	r3, [r7, #22]
 80078f2:	4413      	add	r3, r2
 80078f4:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 80078f6:	7d7b      	ldrb	r3, [r7, #21]
 80078f8:	4a25      	ldr	r2, [pc, #148]	; (8007990 <OS_EventTaskRdy+0xd8>)
 80078fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078fe:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	43db      	mvns	r3, r3
 8007916:	b2db      	uxtb	r3, r3
 8007918:	4013      	ands	r3, r2
 800791a:	b2da      	uxtb	r2, r3
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	79ba      	ldrb	r2, [r7, #6]
 8007926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d113      	bne.n	8007960 <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800793e:	4b15      	ldr	r3, [pc, #84]	; (8007994 <OS_EventTaskRdy+0xdc>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	4313      	orrs	r3, r2
 8007944:	b2da      	uxtb	r2, r3
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <OS_EventTaskRdy+0xdc>)
 8007948:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 800794a:	7dfb      	ldrb	r3, [r7, #23]
 800794c:	4a12      	ldr	r2, [pc, #72]	; (8007998 <OS_EventTaskRdy+0xe0>)
 800794e:	5cd1      	ldrb	r1, [r2, r3]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	430a      	orrs	r2, r1
 800795a:	b2d1      	uxtb	r1, r2
 800795c:	4a0e      	ldr	r2, [pc, #56]	; (8007998 <OS_EventTaskRdy+0xe0>)
 800795e:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_READY(ptcb);
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 8007960:	68f9      	ldr	r1, [r7, #12]
 8007962:	6938      	ldr	r0, [r7, #16]
 8007964:	f000 f870 	bl	8007a48 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	6a1b      	ldr	r3, [r3, #32]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d008      	beq.n	8007982 <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	4619      	mov	r1, r3
 8007976:	6938      	ldr	r0, [r7, #16]
 8007978:	f000 f898 	bl	8007aac <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 8007982:	7d7b      	ldrb	r3, [r7, #21]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	0800b710 	.word	0x0800b710
 8007990:	20002e34 	.word	0x20002e34
 8007994:	20002188 	.word	0x20002188
 8007998:	2000218c 	.word	0x2000218c

0800799c <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 80079a4:	4b25      	ldr	r3, [pc, #148]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 80079ac:	4b23      	ldr	r3, [pc, #140]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079b4:	461a      	mov	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4413      	add	r3, r2
 80079ba:	7ada      	ldrb	r2, [r3, #11]
 80079bc:	4b1f      	ldr	r3, [pc, #124]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079c4:	491d      	ldr	r1, [pc, #116]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079c6:	6809      	ldr	r1, [r1, #0]
 80079c8:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 80079cc:	4313      	orrs	r3, r2
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	440b      	add	r3, r1
 80079d4:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7a9a      	ldrb	r2, [r3, #10]
 80079da:	4b18      	ldr	r3, [pc, #96]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80079e2:	4313      	orrs	r3, r2
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 80079ea:	4b14      	ldr	r3, [pc, #80]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80079f2:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	4a12      	ldr	r2, [pc, #72]	; (8007a40 <OS_EventTaskWait+0xa4>)
 80079f8:	5cd1      	ldrb	r1, [r2, r3]
 80079fa:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <OS_EventTaskWait+0xa0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a02:	43db      	mvns	r3, r3
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	400a      	ands	r2, r1
 8007a0a:	b2d1      	uxtb	r1, r2
 8007a0c:	4a0c      	ldr	r2, [pc, #48]	; (8007a40 <OS_EventTaskWait+0xa4>)
 8007a0e:	54d1      	strb	r1, [r2, r3]
    OS_TRACE_TASK_SUSPENDED(OSTCBCur);
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	4a0b      	ldr	r2, [pc, #44]	; (8007a40 <OS_EventTaskWait+0xa4>)
 8007a14:	5cd3      	ldrb	r3, [r2, r3]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10b      	bne.n	8007a32 <OS_EventTaskWait+0x96>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8007a1a:	4b08      	ldr	r3, [pc, #32]	; (8007a3c <OS_EventTaskWait+0xa0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a22:	43db      	mvns	r3, r3
 8007a24:	b2da      	uxtb	r2, r3
 8007a26:	4b07      	ldr	r3, [pc, #28]	; (8007a44 <OS_EventTaskWait+0xa8>)
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <OS_EventTaskWait+0xa8>)
 8007a30:	701a      	strb	r2, [r3, #0]
    }
}
 8007a32:	bf00      	nop
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bc80      	pop	{r7}
 8007a3a:	4770      	bx	lr
 8007a3c:	2000239c 	.word	0x2000239c
 8007a40:	2000218c 	.word	0x2000218c
 8007a44:	20002188 	.word	0x20002188

08007a48 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a58:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	4413      	add	r3, r2
 8007a60:	7ad9      	ldrb	r1, [r3, #11]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	400a      	ands	r2, r1
 8007a70:	b2d1      	uxtb	r1, r2
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	4413      	add	r3, r2
 8007a76:	460a      	mov	r2, r1
 8007a78:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	4413      	add	r3, r2
 8007a80:	7adb      	ldrb	r3, [r3, #11]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	7a9a      	ldrb	r2, [r3, #10]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a90:	43db      	mvns	r3, r3
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	4013      	ands	r3, r2
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	729a      	strb	r2, [r3, #10]
    }
    ptcb->OSTCBEventPtr     = (OS_EVENT  *)0;               /* Unlink OS_EVENT from OS_TCB             */
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	61da      	str	r2, [r3, #28]
}
 8007aa2:	bf00      	nop
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bc80      	pop	{r7}
 8007aaa:	4770      	bx	lr

08007aac <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b087      	sub	sp, #28
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007abc:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ac4:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007acc:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8007ad8:	e022      	b.n	8007b20 <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	4413      	add	r3, r2
 8007ae0:	7ad9      	ldrb	r1, [r3, #11]
 8007ae2:	7b7b      	ldrb	r3, [r7, #13]
 8007ae4:	43db      	mvns	r3, r3
 8007ae6:	b2da      	uxtb	r2, r3
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	400a      	ands	r2, r1
 8007aec:	b2d1      	uxtb	r1, r2
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	4413      	add	r3, r2
 8007af2:	460a      	mov	r2, r1
 8007af4:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4413      	add	r3, r2
 8007afc:	7adb      	ldrb	r3, [r3, #11]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d108      	bne.n	8007b14 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	7a9a      	ldrb	r2, [r3, #10]
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	43db      	mvns	r3, r3
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	3304      	adds	r3, #4
 8007b18:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1d9      	bne.n	8007ada <OS_EventTaskRemoveMulti+0x2e>
    }
}
 8007b26:	bf00      	nop
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b085      	sub	sp, #20
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
 8007b44:	e007      	b.n	8007b56 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	72da      	strb	r2, [r3, #11]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	3301      	adds	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d9f4      	bls.n	8007b46 <OS_EventWaitListInit+0x14>
    }
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 8007b6e:	21f0      	movs	r1, #240	; 0xf0
 8007b70:	481f      	ldr	r0, [pc, #124]	; (8007bf0 <OS_InitEventList+0x88>)
 8007b72:	f000 f94b 	bl	8007e0c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007b76:	2300      	movs	r3, #0
 8007b78:	81fb      	strh	r3, [r7, #14]
 8007b7a:	e01e      	b.n	8007bba <OS_InitEventList+0x52>
        ix_next = ix + 1u;
 8007b7c:	89fb      	ldrh	r3, [r7, #14]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	80fb      	strh	r3, [r7, #6]
        pevent1 = &OSEventTbl[ix];
 8007b82:	89fa      	ldrh	r2, [r7, #14]
 8007b84:	4613      	mov	r3, r2
 8007b86:	005b      	lsls	r3, r3, #1
 8007b88:	4413      	add	r3, r2
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	4a18      	ldr	r2, [pc, #96]	; (8007bf0 <OS_InitEventList+0x88>)
 8007b8e:	4413      	add	r3, r2
 8007b90:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 8007b92:	88fa      	ldrh	r2, [r7, #6]
 8007b94:	4613      	mov	r3, r2
 8007b96:	005b      	lsls	r3, r3, #1
 8007b98:	4413      	add	r3, r2
 8007b9a:	00db      	lsls	r3, r3, #3
 8007b9c:	4a14      	ldr	r2, [pc, #80]	; (8007bf0 <OS_InitEventList+0x88>)
 8007b9e:	4413      	add	r3, r2
 8007ba0:	603b      	str	r3, [r7, #0]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	4a10      	ldr	r2, [pc, #64]	; (8007bf4 <OS_InitEventList+0x8c>)
 8007bb2:	615a      	str	r2, [r3, #20]
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 8007bb4:	89fb      	ldrh	r3, [r7, #14]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	81fb      	strh	r3, [r7, #14]
 8007bba:	89fb      	ldrh	r3, [r7, #14]
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d9dd      	bls.n	8007b7c <OS_InitEventList+0x14>
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 8007bc0:	89fa      	ldrh	r2, [r7, #14]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4a09      	ldr	r2, [pc, #36]	; (8007bf0 <OS_InitEventList+0x88>)
 8007bcc:	4413      	add	r3, r2
 8007bce:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4a05      	ldr	r2, [pc, #20]	; (8007bf4 <OS_InitEventList+0x8c>)
 8007be0:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 8007be2:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <OS_InitEventList+0x90>)
 8007be4:	4a02      	ldr	r2, [pc, #8]	; (8007bf0 <OS_InitEventList+0x88>)
 8007be6:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	200025ac 	.word	0x200025ac
 8007bf4:	0800b5c8 	.word	0x0800b5c8
 8007bf8:	20002394 	.word	0x20002394

08007bfc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 8007c00:	4b12      	ldr	r3, [pc, #72]	; (8007c4c <OS_InitMisc+0x50>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8007c06:	4b12      	ldr	r3, [pc, #72]	; (8007c50 <OS_InitMisc+0x54>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8007c0c:	4b11      	ldr	r3, [pc, #68]	; (8007c54 <OS_InitMisc+0x58>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 8007c12:	4b11      	ldr	r3, [pc, #68]	; (8007c58 <OS_InitMisc+0x5c>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8007c18:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <OS_InitMisc+0x60>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 8007c1e:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <OS_InitMisc+0x64>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8007c24:	4b0f      	ldr	r3, [pc, #60]	; (8007c64 <OS_InitMisc+0x68>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <OS_InitMisc+0x6c>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 8007c30:	4b0e      	ldr	r3, [pc, #56]	; (8007c6c <OS_InitMisc+0x70>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <OS_InitMisc+0x74>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <OS_InitMisc+0x78>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	701a      	strb	r2, [r3, #0]
#endif
}
 8007c42:	bf00      	nop
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bc80      	pop	{r7}
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	200023a4 	.word	0x200023a4
 8007c50:	20002398 	.word	0x20002398
 8007c54:	20001ba0 	.word	0x20001ba0
 8007c58:	20002119 	.word	0x20002119
 8007c5c:	20001ba9 	.word	0x20001ba9
 8007c60:	20002108 	.word	0x20002108
 8007c64:	20001bac 	.word	0x20001bac
 8007c68:	20002f34 	.word	0x20002f34
 8007c6c:	20002110 	.word	0x20002110
 8007c70:	20002e30 	.word	0x20002e30
 8007c74:	20001ba8 	.word	0x20001ba8

08007c78 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <OS_InitRdyList+0x48>)
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8007c84:	2300      	movs	r3, #0
 8007c86:	71fb      	strb	r3, [r7, #7]
 8007c88:	e006      	b.n	8007c98 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	4a0d      	ldr	r2, [pc, #52]	; (8007cc4 <OS_InitRdyList+0x4c>)
 8007c8e:	2100      	movs	r1, #0
 8007c90:	54d1      	strb	r1, [r2, r3]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 8007c92:	79fb      	ldrb	r3, [r7, #7]
 8007c94:	3301      	adds	r3, #1
 8007c96:	71fb      	strb	r3, [r7, #7]
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b07      	cmp	r3, #7
 8007c9c:	d9f5      	bls.n	8007c8a <OS_InitRdyList+0x12>
    }

    OSPrioCur     = 0u;
 8007c9e:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <OS_InitRdyList+0x50>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 8007ca4:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <OS_InitRdyList+0x54>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 8007caa:	4b09      	ldr	r3, [pc, #36]	; (8007cd0 <OS_InitRdyList+0x58>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 8007cb0:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <OS_InitRdyList+0x5c>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bc80      	pop	{r7}
 8007cbe:	4770      	bx	lr
 8007cc0:	20002188 	.word	0x20002188
 8007cc4:	2000218c 	.word	0x2000218c
 8007cc8:	20001e84 	.word	0x20001e84
 8007ccc:	20001bb2 	.word	0x20001bb2
 8007cd0:	20002180 	.word	0x20002180
 8007cd4:	2000239c 	.word	0x2000239c

08007cd8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 8007cde:	2303      	movs	r3, #3
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	2380      	movs	r3, #128	; 0x80
 8007ce8:	9302      	str	r3, [sp, #8]
 8007cea:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <OS_InitTaskIdle+0x3c>)
 8007cec:	9301      	str	r3, [sp, #4]
 8007cee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	233f      	movs	r3, #63	; 0x3f
 8007cf6:	4a08      	ldr	r2, [pc, #32]	; (8007d18 <OS_InitTaskIdle+0x40>)
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4808      	ldr	r0, [pc, #32]	; (8007d1c <OS_InitTaskIdle+0x44>)
 8007cfc:	f000 fdf8 	bl	80088f0 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 8007d00:	1dfb      	adds	r3, r7, #7
 8007d02:	461a      	mov	r2, r3
 8007d04:	4906      	ldr	r1, [pc, #24]	; (8007d20 <OS_InitTaskIdle+0x48>)
 8007d06:	203f      	movs	r0, #63	; 0x3f
 8007d08:	f000 ff56 	bl	8008bb8 <OSTaskNameSet>
#endif
}
 8007d0c:	bf00      	nop
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	200023ac 	.word	0x200023ac
 8007d18:	200025a8 	.word	0x200025a8
 8007d1c:	08007f09 	.word	0x08007f09
 8007d20:	0800b5cc 	.word	0x0800b5cc

08007d24 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9303      	str	r3, [sp, #12]
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	9302      	str	r3, [sp, #8]
 8007d36:	4b0a      	ldr	r3, [pc, #40]	; (8007d60 <OS_InitTaskStat+0x3c>)
 8007d38:	9301      	str	r3, [sp, #4]
 8007d3a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8007d3e:	9300      	str	r3, [sp, #0]
 8007d40:	233e      	movs	r3, #62	; 0x3e
 8007d42:	4a08      	ldr	r2, [pc, #32]	; (8007d64 <OS_InitTaskStat+0x40>)
 8007d44:	2100      	movs	r1, #0
 8007d46:	4808      	ldr	r0, [pc, #32]	; (8007d68 <OS_InitTaskStat+0x44>)
 8007d48:	f000 fdd2 	bl	80088f0 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8007d4c:	1dfb      	adds	r3, r7, #7
 8007d4e:	461a      	mov	r2, r3
 8007d50:	4906      	ldr	r1, [pc, #24]	; (8007d6c <OS_InitTaskStat+0x48>)
 8007d52:	203e      	movs	r0, #62	; 0x3e
 8007d54:	f000 ff30 	bl	8008bb8 <OSTaskNameSet>
#endif
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	20001f08 	.word	0x20001f08
 8007d64:	20002104 	.word	0x20002104
 8007d68:	08007f39 	.word	0x08007f39
 8007d6c:	0800b5dc 	.word	0x0800b5dc

08007d70 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 8007d76:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 8007d7a:	481f      	ldr	r0, [pc, #124]	; (8007df8 <OS_InitTCBList+0x88>)
 8007d7c:	f000 f846 	bl	8007e0c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 8007d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d84:	481d      	ldr	r0, [pc, #116]	; (8007dfc <OS_InitTCBList+0x8c>)
 8007d86:	f000 f841 	bl	8007e0c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	e019      	b.n	8007dc4 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	3301      	adds	r3, #1
 8007d94:	71fb      	strb	r3, [r7, #7]
        ptcb1   = &OSTCBTbl[ix];
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	2258      	movs	r2, #88	; 0x58
 8007d9a:	fb02 f303 	mul.w	r3, r2, r3
 8007d9e:	4a16      	ldr	r2, [pc, #88]	; (8007df8 <OS_InitTCBList+0x88>)
 8007da0:	4413      	add	r3, r2
 8007da2:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 8007da4:	79fb      	ldrb	r3, [r7, #7]
 8007da6:	2258      	movs	r2, #88	; 0x58
 8007da8:	fb02 f303 	mul.w	r3, r2, r3
 8007dac:	4a12      	ldr	r2, [pc, #72]	; (8007df8 <OS_InitTCBList+0x88>)
 8007dae:	4413      	add	r3, r2
 8007db0:	603b      	str	r3, [r7, #0]
        ptcb1->OSTCBNext = ptcb2;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	683a      	ldr	r2, [r7, #0]
 8007db6:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4a11      	ldr	r2, [pc, #68]	; (8007e00 <OS_InitTCBList+0x90>)
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	73fb      	strb	r3, [r7, #15]
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	2b14      	cmp	r3, #20
 8007dc8:	d9e2      	bls.n	8007d90 <OS_InitTCBList+0x20>
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2258      	movs	r2, #88	; 0x58
 8007dce:	fb02 f303 	mul.w	r3, r2, r3
 8007dd2:	4a09      	ldr	r2, [pc, #36]	; (8007df8 <OS_InitTCBList+0x88>)
 8007dd4:	4413      	add	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	4a07      	ldr	r2, [pc, #28]	; (8007e00 <OS_InitTCBList+0x90>)
 8007de2:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8007de4:	4b07      	ldr	r3, [pc, #28]	; (8007e04 <OS_InitTCBList+0x94>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8007dea:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <OS_InitTCBList+0x98>)
 8007dec:	4a02      	ldr	r2, [pc, #8]	; (8007df8 <OS_InitTCBList+0x88>)
 8007dee:	601a      	str	r2, [r3, #0]
}
 8007df0:	bf00      	nop
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	2000269c 	.word	0x2000269c
 8007dfc:	20002e34 	.word	0x20002e34
 8007e00:	0800b5c8 	.word	0x0800b5c8
 8007e04:	20001e88 	.word	0x20001e88
 8007e08:	20002114 	.word	0x20002114

08007e0c <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	460b      	mov	r3, r1
 8007e16:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007e18:	e007      	b.n	8007e2a <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	607a      	str	r2, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	701a      	strb	r2, [r3, #0]
        size--;
 8007e24:	887b      	ldrh	r3, [r7, #2]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8007e2a:	887b      	ldrh	r3, [r7, #2]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f4      	bne.n	8007e1a <OS_MemClr+0xe>
    }
}
 8007e30:	bf00      	nop
 8007e32:	bf00      	nop
 8007e34:	370c      	adds	r7, #12
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bc80      	pop	{r7}
 8007e3a:	4770      	bx	lr

08007e3c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8007e42:	2300      	movs	r3, #0
 8007e44:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8007e46:	2040      	movs	r0, #64	; 0x40
 8007e48:	f7f8 f9aa 	bl	80001a0 <OS_CPU_SR_Save>
 8007e4c:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8007e4e:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <OS_Sched+0x68>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d11f      	bne.n	8007e96 <OS_Sched+0x5a>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8007e56:	4b14      	ldr	r3, [pc, #80]	; (8007ea8 <OS_Sched+0x6c>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d11b      	bne.n	8007e96 <OS_Sched+0x5a>
            OS_SchedNew();
 8007e5e:	f000 f82f 	bl	8007ec0 <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8007e62:	4b12      	ldr	r3, [pc, #72]	; (8007eac <OS_Sched+0x70>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	4b11      	ldr	r3, [pc, #68]	; (8007eb0 <OS_Sched+0x74>)
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	4a11      	ldr	r2, [pc, #68]	; (8007eb4 <OS_Sched+0x78>)
 8007e70:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8007e72:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <OS_Sched+0x70>)
 8007e74:	781a      	ldrb	r2, [r3, #0]
 8007e76:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <OS_Sched+0x7c>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d00b      	beq.n	8007e96 <OS_Sched+0x5a>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	; (8007eb4 <OS_Sched+0x78>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e84:	3201      	adds	r2, #1
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8007e88:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <OS_Sched+0x80>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	4a0b      	ldr	r2, [pc, #44]	; (8007ebc <OS_Sched+0x80>)
 8007e90:	6013      	str	r3, [r2, #0]
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
                OS_TLS_TaskSw();
#endif
#endif

                OS_TASK_SW();                          /* Perform a context switch                     */
 8007e92:	f7f8 f9dc 	bl	800024e <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7f8 f990 	bl	80001bc <OS_CPU_SR_Restore>
}
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20002398 	.word	0x20002398
 8007ea8:	20001ba0 	.word	0x20001ba0
 8007eac:	20001bb2 	.word	0x20001bb2
 8007eb0:	20002e34 	.word	0x20002e34
 8007eb4:	20002180 	.word	0x20002180
 8007eb8:	20001e84 	.word	0x20001e84
 8007ebc:	20002108 	.word	0x20002108

08007ec0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8007ec6:	4b0c      	ldr	r3, [pc, #48]	; (8007ef8 <OS_SchedNew+0x38>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <OS_SchedNew+0x3c>)
 8007ece:	5c9b      	ldrb	r3, [r3, r2]
 8007ed0:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8007ed2:	79fb      	ldrb	r3, [r7, #7]
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	4909      	ldr	r1, [pc, #36]	; (8007f00 <OS_SchedNew+0x40>)
 8007edc:	5ccb      	ldrb	r3, [r1, r3]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <OS_SchedNew+0x3c>)
 8007ee2:	5c5b      	ldrb	r3, [r3, r1]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	4b06      	ldr	r3, [pc, #24]	; (8007f04 <OS_SchedNew+0x44>)
 8007eea:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bc80      	pop	{r7}
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	20002188 	.word	0x20002188
 8007efc:	0800b710 	.word	0x0800b710
 8007f00:	2000218c 	.word	0x2000218c
 8007f04:	20001bb2 	.word	0x20001bb2

08007f08 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007f10:	2300      	movs	r3, #0
 8007f12:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8007f14:	2040      	movs	r0, #64	; 0x40
 8007f16:	f7f8 f943 	bl	80001a0 <OS_CPU_SR_Save>
 8007f1a:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 8007f1c:	4b05      	ldr	r3, [pc, #20]	; (8007f34 <OS_TaskIdle+0x2c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3301      	adds	r3, #1
 8007f22:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <OS_TaskIdle+0x2c>)
 8007f24:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7f8 f948 	bl	80001bc <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8007f2c:	f7ff f97e 	bl	800722c <OSTaskIdleHook>
        OS_ENTER_CRITICAL();
 8007f30:	e7f0      	b.n	8007f14 <OS_TaskIdle+0xc>
 8007f32:	bf00      	nop
 8007f34:	20001bac 	.word	0x20001bac

08007f38 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
    INT8S  usage;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8007f44:	e002      	b.n	8007f4c <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8007f46:	20c8      	movs	r0, #200	; 0xc8
 8007f48:	f001 f82e 	bl	8008fa8 <OSTimeDly>
    while (OSStatRdy == OS_FALSE) {
 8007f4c:	4b30      	ldr	r3, [pc, #192]	; (8008010 <OS_TaskStat+0xd8>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f8      	beq.n	8007f46 <OS_TaskStat+0xe>
    }
    OSIdleCtrMax /= 100uL;
 8007f54:	4b2f      	ldr	r3, [pc, #188]	; (8008014 <OS_TaskStat+0xdc>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a2f      	ldr	r2, [pc, #188]	; (8008018 <OS_TaskStat+0xe0>)
 8007f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5e:	095b      	lsrs	r3, r3, #5
 8007f60:	4a2c      	ldr	r2, [pc, #176]	; (8008014 <OS_TaskStat+0xdc>)
 8007f62:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8007f64:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <OS_TaskStat+0xdc>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d105      	bne.n	8007f78 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 8007f6c:	4b2b      	ldr	r3, [pc, #172]	; (800801c <OS_TaskStat+0xe4>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8007f72:	20ff      	movs	r0, #255	; 0xff
 8007f74:	f000 ff64 	bl	8008e40 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8007f78:	2040      	movs	r0, #64	; 0x40
 8007f7a:	f7f8 f911 	bl	80001a0 <OS_CPU_SR_Save>
 8007f7e:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8007f80:	4b24      	ldr	r3, [pc, #144]	; (8008014 <OS_TaskStat+0xdc>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2264      	movs	r2, #100	; 0x64
 8007f86:	fb02 f303 	mul.w	r3, r2, r3
 8007f8a:	4a25      	ldr	r2, [pc, #148]	; (8008020 <OS_TaskStat+0xe8>)
 8007f8c:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7f8 f914 	bl	80001bc <OS_CPU_SR_Restore>
    for (;;) {
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 8007f94:	2001      	movs	r0, #1
 8007f96:	f001 f807 	bl	8008fa8 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8007f9a:	2040      	movs	r0, #64	; 0x40
 8007f9c:	f7f8 f900 	bl	80001a0 <OS_CPU_SR_Save>
 8007fa0:	60f8      	str	r0, [r7, #12]
        OSIdleCtr = 0uL;                        /* Reset the idle counter for the next second         */
 8007fa2:	4b1f      	ldr	r3, [pc, #124]	; (8008020 <OS_TaskStat+0xe8>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7f8 f907 	bl	80001bc <OS_CPU_SR_Restore>

        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8007fae:	2064      	movs	r0, #100	; 0x64
 8007fb0:	f000 fffa 	bl	8008fa8 <OSTimeDly>

        OS_ENTER_CRITICAL();
 8007fb4:	2040      	movs	r0, #64	; 0x40
 8007fb6:	f7f8 f8f3 	bl	80001a0 <OS_CPU_SR_Save>
 8007fba:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Store number of cycles which elapsed while idle    */
 8007fbc:	4b18      	ldr	r3, [pc, #96]	; (8008020 <OS_TaskStat+0xe8>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a18      	ldr	r2, [pc, #96]	; (8008024 <OS_TaskStat+0xec>)
 8007fc2:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f7f8 f8f9 	bl	80001bc <OS_CPU_SR_Restore>

        usage            = 100 - (INT8S)(OSIdleCtrRun / OSIdleCtrMax);
 8007fca:	4b16      	ldr	r3, [pc, #88]	; (8008024 <OS_TaskStat+0xec>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	4b11      	ldr	r3, [pc, #68]	; (8008014 <OS_TaskStat+0xdc>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	72fb      	strb	r3, [r7, #11]
        if (usage >= 0) {                        /* Make sure we don't have a negative percentage      */
 8007fe0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	db03      	blt.n	8007ff0 <OS_TaskStat+0xb8>
            OSCPUUsage   = (INT8U)usage;
 8007fe8:	7afa      	ldrb	r2, [r7, #11]
 8007fea:	4b0c      	ldr	r3, [pc, #48]	; (800801c <OS_TaskStat+0xe4>)
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	e00a      	b.n	8008006 <OS_TaskStat+0xce>
        } else {
            OSCPUUsage   = 0u;
 8007ff0:	4b0a      	ldr	r3, [pc, #40]	; (800801c <OS_TaskStat+0xe4>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
            OSIdleCtrMax = OSIdleCtrRun / 100uL; /* Update max counter value to current one            */
 8007ff6:	4b0b      	ldr	r3, [pc, #44]	; (8008024 <OS_TaskStat+0xec>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a07      	ldr	r2, [pc, #28]	; (8008018 <OS_TaskStat+0xe0>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	4a04      	ldr	r2, [pc, #16]	; (8008014 <OS_TaskStat+0xdc>)
 8008004:	6013      	str	r3, [r2, #0]
        }

        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8008006:	f7ff f922 	bl	800724e <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800800a:	f000 f80d 	bl	8008028 <OS_TaskStatStkChk>
        OSTimeDly(1);                            /* Synchronize with clock tick                        */
 800800e:	e7c1      	b.n	8007f94 <OS_TaskStat+0x5c>
 8008010:	20002e30 	.word	0x20002e30
 8008014:	20002110 	.word	0x20002110
 8008018:	51eb851f 	.word	0x51eb851f
 800801c:	20002118 	.word	0x20002118
 8008020:	20001bac 	.word	0x20001bac
 8008024:	20002f34 	.word	0x20002f34

08008028 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]
 8008032:	e023      	b.n	800807c <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8008034:	463a      	mov	r2, r7
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fe92 	bl	8008d64 <OSTaskStkChk>
 8008040:	4603      	mov	r3, r0
 8008042:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d115      	bne.n	8008076 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	4a0f      	ldr	r2, [pc, #60]	; (800808c <OS_TaskStatStkChk+0x64>)
 800804e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008052:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00d      	beq.n	8008076 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d00a      	beq.n	8008076 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	441a      	add	r2, r3
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	64da      	str	r2, [r3, #76]	; 0x4c
    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	3301      	adds	r3, #1
 800807a:	73fb      	strb	r3, [r7, #15]
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b3f      	cmp	r3, #63	; 0x3f
 8008080:	d9d8      	bls.n	8008034 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8008082:	bf00      	nop
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20002e34 	.word	0x20002e34

08008090 <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b088      	sub	sp, #32
 8008094:	af00      	add	r7, sp, #0
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
 800809a:	461a      	mov	r2, r3
 800809c:	4603      	mov	r3, r0
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	4613      	mov	r3, r2
 80080a2:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]
    INT8U      j;
#endif
#endif


    OS_ENTER_CRITICAL();
 80080a8:	2040      	movs	r0, #64	; 0x40
 80080aa:	f7f8 f879 	bl	80001a0 <OS_CPU_SR_Save>
 80080ae:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 80080b0:	4b6a      	ldr	r3, [pc, #424]	; (800825c <OS_TCBInit+0x1cc>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80c7 	beq.w	800824c <OS_TCBInit+0x1bc>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	4a66      	ldr	r2, [pc, #408]	; (800825c <OS_TCBInit+0x1cc>)
 80080c4:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 80080c6:	69b8      	ldr	r0, [r7, #24]
 80080c8:	f7f8 f878 	bl	80001bc <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	7bfa      	ldrb	r2, [r7, #15]
 80080d6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	2200      	movs	r2, #0
 80080e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2200      	movs	r2, #0
 80080ee:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080f4:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080fa:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008106:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	89ba      	ldrh	r2, [r7, #12]
 800810c:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	08db      	lsrs	r3, r3, #3
 800811a:	b2da      	uxtb	r2, r3
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8008122:	7bfb      	ldrb	r3, [r7, #15]
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	b2da      	uxtb	r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008136:	461a      	mov	r2, r3
 8008138:	2301      	movs	r3, #1
 800813a:	4093      	lsls	r3, r2
 800813c:	b2da      	uxtb	r2, r3
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800814a:	461a      	mov	r2, r3
 800814c:	2301      	movs	r3, #1
 800814e:	4093      	lsls	r3, r2
 8008150:	b2da      	uxtb	r2, r3
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	2200      	movs	r2, #0
 800815c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	2200      	movs	r2, #0
 8008162:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode      = (OS_FLAG_NODE *)0;      /* Task is not pending on an event flag     */
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	2200      	movs	r2, #0
 8008168:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg           = (void *)0;              /* No message received                      */
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	2200      	movs	r2, #0
 800816e:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr      = 0uL;                    /* Initialize profiling variables           */
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2200      	movs	r2, #0
 8008174:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart   = 0uL;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2200      	movs	r2, #0
 800817a:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot     = 0uL;
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2200      	movs	r2, #0
 8008180:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase       = (OS_STK *)0;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	2200      	movs	r2, #0
 8008186:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed       = 0uL;
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	2200      	movs	r2, #0
 800818c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName      = (INT8U *)(void *)"?";
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4a33      	ldr	r2, [pc, #204]	; (8008260 <OS_TCBInit+0x1d0>)
 8008192:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8008194:	2300      	movs	r3, #0
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e009      	b.n	80081ae <OS_TCBInit+0x11e>
            ptcb->OSTCBRegTbl[i] = 0u;
 800819a:	7ffb      	ldrb	r3, [r7, #31]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	3314      	adds	r3, #20
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 80081a8:	7ffb      	ldrb	r3, [r7, #31]
 80081aa:	3301      	adds	r3, #1
 80081ac:	77fb      	strb	r3, [r7, #31]
 80081ae:	7ffb      	ldrb	r3, [r7, #31]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d0f2      	beq.n	800819a <OS_TCBInit+0x10a>
        }
#endif

        OSTCBInitHook(ptcb);
 80081b4:	6978      	ldr	r0, [r7, #20]
 80081b6:	f7ff f8e1 	bl	800737c <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 80081ba:	2040      	movs	r0, #64	; 0x40
 80081bc:	f7f7 fff0 	bl	80001a0 <OS_CPU_SR_Save>
 80081c0:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	4927      	ldr	r1, [pc, #156]	; (8008264 <OS_TCBInit+0x1d4>)
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 80081cc:	69b8      	ldr	r0, [r7, #24]
 80081ce:	f7f7 fff5 	bl	80001bc <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 80081d2:	6978      	ldr	r0, [r7, #20]
 80081d4:	f7ff f814 	bl	8007200 <OSTaskCreateHook>
        }
        OS_TLS_TaskCreate(ptcb);                           /* Call TLS hook                            */
#endif
#endif

        OS_ENTER_CRITICAL();
 80081d8:	2040      	movs	r0, #64	; 0x40
 80081da:	f7f7 ffe1 	bl	80001a0 <OS_CPU_SR_Save>
 80081de:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext = OSTCBList;                       /* Link into TCB chain                      */
 80081e0:	4b21      	ldr	r3, [pc, #132]	; (8008268 <OS_TCBInit+0x1d8>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev = (OS_TCB *)0;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2200      	movs	r2, #0
 80081ec:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 80081ee:	4b1e      	ldr	r3, [pc, #120]	; (8008268 <OS_TCBInit+0x1d8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <OS_TCBInit+0x16e>
            OSTCBList->OSTCBPrev = ptcb;
 80081f6:	4b1c      	ldr	r3, [pc, #112]	; (8008268 <OS_TCBInit+0x1d8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 80081fe:	4a1a      	ldr	r2, [pc, #104]	; (8008268 <OS_TCBInit+0x1d8>)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800820a:	4b18      	ldr	r3, [pc, #96]	; (800826c <OS_TCBInit+0x1dc>)
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	4313      	orrs	r3, r2
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b16      	ldr	r3, [pc, #88]	; (800826c <OS_TCBInit+0x1dc>)
 8008214:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800821c:	461a      	mov	r2, r3
 800821e:	4b14      	ldr	r3, [pc, #80]	; (8008270 <OS_TCBInit+0x1e0>)
 8008220:	5c9a      	ldrb	r2, [r3, r2]
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008228:	6979      	ldr	r1, [r7, #20]
 800822a:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 800822e:	4313      	orrs	r3, r2
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <OS_TCBInit+0x1e0>)
 8008234:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <OS_TCBInit+0x1e4>)
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	3301      	adds	r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <OS_TCBInit+0x1e4>)
 8008240:	701a      	strb	r2, [r3, #0]
        OS_TRACE_TASK_READY(ptcb);
        OS_EXIT_CRITICAL();
 8008242:	69b8      	ldr	r0, [r7, #24]
 8008244:	f7f7 ffba 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8008248:	2300      	movs	r3, #0
 800824a:	e003      	b.n	8008254 <OS_TCBInit+0x1c4>
    }
    OS_EXIT_CRITICAL();
 800824c:	69b8      	ldr	r0, [r7, #24]
 800824e:	f7f7 ffb5 	bl	80001bc <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8008252:	2342      	movs	r3, #66	; 0x42
}
 8008254:	4618      	mov	r0, r3
 8008256:	3720      	adds	r7, #32
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}
 800825c:	20002114 	.word	0x20002114
 8008260:	0800b5c8 	.word	0x0800b5c8
 8008264:	20002e34 	.word	0x20002e34
 8008268:	20001e88 	.word	0x20001e88
 800826c:	20002188 	.word	0x20002188
 8008270:	2000218c 	.word	0x2000218c
 8008274:	20002119 	.word	0x20002119

08008278 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 800827e:	2150      	movs	r1, #80	; 0x50
 8008280:	481b      	ldr	r0, [pc, #108]	; (80082f0 <OS_FlagInit+0x78>)
 8008282:	f7ff fdc3 	bl	8007e0c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8008286:	2300      	movs	r3, #0
 8008288:	81fb      	strh	r3, [r7, #14]
 800828a:	e018      	b.n	80082be <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 800828c:	89fb      	ldrh	r3, [r7, #14]
 800828e:	3301      	adds	r3, #1
 8008290:	80fb      	strh	r3, [r7, #6]
        pgrp1 = &OSFlagTbl[ix];
 8008292:	89fb      	ldrh	r3, [r7, #14]
 8008294:	011b      	lsls	r3, r3, #4
 8008296:	4a16      	ldr	r2, [pc, #88]	; (80082f0 <OS_FlagInit+0x78>)
 8008298:	4413      	add	r3, r2
 800829a:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 800829c:	88fb      	ldrh	r3, [r7, #6]
 800829e:	011b      	lsls	r3, r3, #4
 80082a0:	4a13      	ldr	r2, [pc, #76]	; (80082f0 <OS_FlagInit+0x78>)
 80082a2:	4413      	add	r3, r2
 80082a4:	603b      	str	r3, [r7, #0]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	4a0f      	ldr	r2, [pc, #60]	; (80082f4 <OS_FlagInit+0x7c>)
 80082b6:	60da      	str	r2, [r3, #12]
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	3301      	adds	r3, #1
 80082bc:	81fb      	strh	r3, [r7, #14]
 80082be:	89fb      	ldrh	r3, [r7, #14]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d9e3      	bls.n	800828c <OS_FlagInit+0x14>
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 80082c4:	89fb      	ldrh	r3, [r7, #14]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	4a09      	ldr	r2, [pc, #36]	; (80082f0 <OS_FlagInit+0x78>)
 80082ca:	4413      	add	r3, r2
 80082cc:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	2200      	movs	r2, #0
 80082d8:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	4a05      	ldr	r2, [pc, #20]	; (80082f4 <OS_FlagInit+0x7c>)
 80082de:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80082e0:	4b05      	ldr	r3, [pc, #20]	; (80082f8 <OS_FlagInit+0x80>)
 80082e2:	4a03      	ldr	r2, [pc, #12]	; (80082f0 <OS_FlagInit+0x78>)
 80082e4:	601a      	str	r2, [r3, #0]
#endif
}
 80082e6:	bf00      	nop
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20001bb4 	.word	0x20001bb4
 80082f4:	0800b5ec 	.word	0x0800b5ec
 80082f8:	20002e2c 	.word	0x20002e2c

080082fc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d10c      	bne.n	8008330 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00c      	beq.n	8008342 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]
 800832e:	e008      	b.n	8008342 <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	bc80      	pop	{r7}
 8008356:	4770      	bx	lr

08008358 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
 8008364:	4b17      	ldr	r3, [pc, #92]	; (80083c4 <OSMboxCreate+0x6c>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <OSMboxCreate+0x18>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 800836c:	2300      	movs	r3, #0
 800836e:	e025      	b.n	80083bc <OSMboxCreate+0x64>
    }
    OS_ENTER_CRITICAL();
 8008370:	2040      	movs	r0, #64	; 0x40
 8008372:	f7f7 ff15 	bl	80001a0 <OS_CPU_SR_Save>
 8008376:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 8008378:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <OSMboxCreate+0x70>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 800837e:	4b12      	ldr	r3, [pc, #72]	; (80083c8 <OSMboxCreate+0x70>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d004      	beq.n	8008390 <OSMboxCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <OSMboxCreate+0x70>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	4a0e      	ldr	r2, [pc, #56]	; (80083c8 <OSMboxCreate+0x70>)
 800838e:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7f7 ff13 	bl	80001bc <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00e      	beq.n	80083ba <OSMboxCreate+0x62>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2201      	movs	r2, #1
 80083a0:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = 0u;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2200      	movs	r2, #0
 80083a6:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4a06      	ldr	r2, [pc, #24]	; (80083cc <OSMboxCreate+0x74>)
 80083b2:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);
 80083b4:	68b8      	ldr	r0, [r7, #8]
 80083b6:	f7ff fbbc 	bl	8007b32 <OS_EventWaitListInit>

        OS_TRACE_MBOX_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);                             /* Return pointer to event control block              */
 80083ba:	68bb      	ldr	r3, [r7, #8]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	20002398 	.word	0x20002398
 80083c8:	20002394 	.word	0x20002394
 80083cc:	0800b5f0 	.word	0x0800b5f0

080083d0 <OSMboxPend>:
*/

void  *OSMboxPend (OS_EVENT  *pevent,
                   INT32U     timeout,
                   INT8U     *perr)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	60b9      	str	r1, [r7, #8]
 80083da:	607a      	str	r2, [r7, #4]
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]
        return ((void *)0);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d104      	bne.n	80083f0 <OSMboxPend+0x20>
        *perr = OS_ERR_PEVENT_NULL;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2204      	movs	r2, #4
 80083ea:	701a      	strb	r2, [r3, #0]
        return ((void *)0);
 80083ec:	2300      	movs	r3, #0
 80083ee:	e08c      	b.n	800850a <OSMboxPend+0x13a>
    }
#endif

    OS_TRACE_MBOX_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d004      	beq.n	8008402 <OSMboxPend+0x32>
        *perr = OS_ERR_EVENT_TYPE;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	701a      	strb	r2, [r3, #0]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
 80083fe:	2300      	movs	r3, #0
 8008400:	e083      	b.n	800850a <OSMboxPend+0x13a>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8008402:	4b44      	ldr	r3, [pc, #272]	; (8008514 <OSMboxPend+0x144>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d004      	beq.n	8008414 <OSMboxPend+0x44>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2202      	movs	r2, #2
 800840e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
 8008410:	2300      	movs	r3, #0
 8008412:	e07a      	b.n	800850a <OSMboxPend+0x13a>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8008414:	4b40      	ldr	r3, [pc, #256]	; (8008518 <OSMboxPend+0x148>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <OSMboxPend+0x56>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	220d      	movs	r2, #13
 8008420:	701a      	strb	r2, [r3, #0]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return ((void *)0);
 8008422:	2300      	movs	r3, #0
 8008424:	e071      	b.n	800850a <OSMboxPend+0x13a>
    }
    OS_ENTER_CRITICAL();
 8008426:	2040      	movs	r0, #64	; 0x40
 8008428:	f7f7 feba 	bl	80001a0 <OS_CPU_SR_Save>
 800842c:	6138      	str	r0, [r7, #16]
    pmsg = pevent->OSEventPtr;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	617b      	str	r3, [r7, #20]
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00a      	beq.n	8008450 <OSMboxPend+0x80>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	605a      	str	r2, [r3, #4]
        OS_EXIT_CRITICAL();
 8008440:	6938      	ldr	r0, [r7, #16]
 8008442:	f7f7 febb 	bl	80001bc <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]
        OS_TRACE_MBOX_PEND_EXIT(*perr);
        return (pmsg);                                /* Return the message received (or NULL)         */
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	e05c      	b.n	800850a <OSMboxPend+0x13a>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 8008450:	4b32      	ldr	r3, [pc, #200]	; (800851c <OSMboxPend+0x14c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008458:	4b30      	ldr	r3, [pc, #192]	; (800851c <OSMboxPend+0x14c>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0202 	orr.w	r2, r2, #2
 8008460:	b2d2      	uxtb	r2, r2
 8008462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8008466:	4b2d      	ldr	r3, [pc, #180]	; (800851c <OSMboxPend+0x14c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 8008470:	4b2a      	ldr	r3, [pc, #168]	; (800851c <OSMboxPend+0x14c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff fa8f 	bl	800799c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 800847e:	6938      	ldr	r0, [r7, #16]
 8008480:	f7f7 fe9c 	bl	80001bc <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 8008484:	f7ff fcda 	bl	8007e3c <OS_Sched>
    OS_ENTER_CRITICAL();
 8008488:	2040      	movs	r0, #64	; 0x40
 800848a:	f7f7 fe89 	bl	80001a0 <OS_CPU_SR_Save>
 800848e:	6138      	str	r0, [r7, #16]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8008490:	4b22      	ldr	r3, [pc, #136]	; (800851c <OSMboxPend+0x14c>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <OSMboxPend+0xd2>
 800849c:	2b02      	cmp	r3, #2
 800849e:	d008      	beq.n	80084b2 <OSMboxPend+0xe2>
 80084a0:	e00d      	b.n	80084be <OSMboxPend+0xee>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 80084a2:	4b1e      	ldr	r3, [pc, #120]	; (800851c <OSMboxPend+0x14c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a8:	617b      	str	r3, [r7, #20]
            *perr =  OS_ERR_NONE;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
             break;
 80084b0:	e011      	b.n	80084d6 <OSMboxPend+0x106>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	220e      	movs	r2, #14
 80084ba:	701a      	strb	r2, [r3, #0]
             break;
 80084bc:	e00b      	b.n	80084d6 <OSMboxPend+0x106>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 80084be:	4b17      	ldr	r3, [pc, #92]	; (800851c <OSMboxPend+0x14c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68f9      	ldr	r1, [r7, #12]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff fabf 	bl	8007a48 <OS_EventTaskRemove>
             pmsg = (void *)0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	220a      	movs	r2, #10
 80084d2:	701a      	strb	r2, [r3, #0]
             break;
 80084d4:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80084d6:	4b11      	ldr	r3, [pc, #68]	; (800851c <OSMboxPend+0x14c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80084e0:	4b0e      	ldr	r3, [pc, #56]	; (800851c <OSMboxPend+0x14c>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80084ea:	4b0c      	ldr	r3, [pc, #48]	; (800851c <OSMboxPend+0x14c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2200      	movs	r2, #0
 80084f0:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80084f2:	4b0a      	ldr	r3, [pc, #40]	; (800851c <OSMboxPend+0x14c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2200      	movs	r2, #0
 80084f8:	621a      	str	r2, [r3, #32]
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 80084fa:	4b08      	ldr	r3, [pc, #32]	; (800851c <OSMboxPend+0x14c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	625a      	str	r2, [r3, #36]	; 0x24
    OS_EXIT_CRITICAL();
 8008502:	6938      	ldr	r0, [r7, #16]
 8008504:	f7f7 fe5a 	bl	80001bc <OS_CPU_SR_Restore>
    OS_TRACE_MBOX_PEND_EXIT(*perr);

    return (pmsg);                                    /* Return received message                       */
 8008508:	697b      	ldr	r3, [r7, #20]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20002398 	.word	0x20002398
 8008518:	20001ba0 	.word	0x20001ba0
 800851c:	2000239c 	.word	0x2000239c

08008520 <OSMboxPostOpt>:

#if OS_MBOX_POST_OPT_EN > 0u
INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
                      void      *pmsg,
                      INT8U      opt)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	4613      	mov	r3, r2
 800852c:	71fb      	strb	r3, [r7, #7]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <OSMboxPostOpt+0x1c>
        return (OS_ERR_PEVENT_NULL);
 8008538:	2304      	movs	r3, #4
 800853a:	e045      	b.n	80085c8 <OSMboxPostOpt+0xa8>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <OSMboxPostOpt+0x26>
        return (OS_ERR_POST_NULL_PTR);
 8008542:	2303      	movs	r3, #3
 8008544:	e040      	b.n	80085c8 <OSMboxPostOpt+0xa8>
    }
#endif

    OS_TRACE_MBOX_POST_OPT_ENTER(pevent, opt);

    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d001      	beq.n	8008552 <OSMboxPostOpt+0x32>
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 800854e:	2301      	movs	r3, #1
 8008550:	e03a      	b.n	80085c8 <OSMboxPostOpt+0xa8>
    }
    OS_ENTER_CRITICAL();
 8008552:	2040      	movs	r0, #64	; 0x40
 8008554:	f7f7 fe24 	bl	80001a0 <OS_CPU_SR_Save>
 8008558:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	7a9b      	ldrb	r3, [r3, #10]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d022      	beq.n	80085a8 <OSMboxPostOpt+0x88>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d00b      	beq.n	8008584 <OSMboxPostOpt+0x64>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
 800856c:	e005      	b.n	800857a <OSMboxPostOpt+0x5a>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 800856e:	2300      	movs	r3, #0
 8008570:	2202      	movs	r2, #2
 8008572:	68b9      	ldr	r1, [r7, #8]
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f7ff f99f 	bl	80078b8 <OS_EventTaskRdy>
            while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7a9b      	ldrb	r3, [r3, #10]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1f5      	bne.n	800856e <OSMboxPostOpt+0x4e>
 8008582:	e005      	b.n	8008590 <OSMboxPostOpt+0x70>
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 8008584:	2300      	movs	r3, #0
 8008586:	2202      	movs	r2, #2
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f7ff f994 	bl	80078b8 <OS_EventTaskRdy>
        }
        OS_EXIT_CRITICAL();
 8008590:	6978      	ldr	r0, [r7, #20]
 8008592:	f7f7 fe13 	bl	80001bc <OS_CPU_SR_Restore>
        if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <OSMboxPostOpt+0x84>
            OS_Sched();                               /* Find HPT ready to run                         */
 80085a0:	f7ff fc4c 	bl	8007e3c <OS_Sched>
        }
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80085a4:	2300      	movs	r3, #0
 80085a6:	e00f      	b.n	80085c8 <OSMboxPostOpt+0xa8>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d004      	beq.n	80085ba <OSMboxPostOpt+0x9a>
        OS_EXIT_CRITICAL();
 80085b0:	6978      	ldr	r0, [r7, #20]
 80085b2:	f7f7 fe03 	bl	80001bc <OS_CPU_SR_Restore>
        OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_MBOX_FULL);
        return (OS_ERR_MBOX_FULL);
 80085b6:	2314      	movs	r3, #20
 80085b8:	e006      	b.n	80085c8 <OSMboxPostOpt+0xa8>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
    OS_EXIT_CRITICAL();
 80085c0:	6978      	ldr	r0, [r7, #20]
 80085c2:	f7f7 fdfb 	bl	80001bc <OS_CPU_SR_Restore>
    OS_TRACE_MBOX_POST_OPT_EXIT(OS_ERR_NONE);
    return (OS_ERR_NONE);
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 80085d6:	2178      	movs	r1, #120	; 0x78
 80085d8:	481a      	ldr	r0, [pc, #104]	; (8008644 <OS_MemInit+0x74>)
 80085da:	f7ff fc17 	bl	8007e0c <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 80085de:	2300      	movs	r3, #0
 80085e0:	80fb      	strh	r3, [r7, #6]
 80085e2:	e017      	b.n	8008614 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 80085e4:	88fa      	ldrh	r2, [r7, #6]
 80085e6:	4613      	mov	r3, r2
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	4413      	add	r3, r2
 80085ec:	00db      	lsls	r3, r3, #3
 80085ee:	4a15      	ldr	r2, [pc, #84]	; (8008644 <OS_MemInit+0x74>)
 80085f0:	4413      	add	r3, r2
 80085f2:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 80085f4:	88fb      	ldrh	r3, [r7, #6]
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	4613      	mov	r3, r2
 80085fa:	005b      	lsls	r3, r3, #1
 80085fc:	4413      	add	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4a10      	ldr	r2, [pc, #64]	; (8008644 <OS_MemInit+0x74>)
 8008602:	441a      	add	r2, r3
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	4a0f      	ldr	r2, [pc, #60]	; (8008648 <OS_MemInit+0x78>)
 800860c:	615a      	str	r2, [r3, #20]
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	3301      	adds	r3, #1
 8008612:	80fb      	strh	r3, [r7, #6]
 8008614:	88fb      	ldrh	r3, [r7, #6]
 8008616:	2b03      	cmp	r3, #3
 8008618:	d9e4      	bls.n	80085e4 <OS_MemInit+0x14>
#endif
    }
    pmem                = &OSMemTbl[i];
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	4a07      	ldr	r2, [pc, #28]	; (8008644 <OS_MemInit+0x74>)
 8008626:	4413      	add	r3, r2
 8008628:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	4a05      	ldr	r2, [pc, #20]	; (8008648 <OS_MemInit+0x78>)
 8008634:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <OS_MemInit+0x7c>)
 8008638:	4a02      	ldr	r2, [pc, #8]	; (8008644 <OS_MemInit+0x74>)
 800863a:	601a      	str	r2, [r3, #0]
#endif
}
 800863c:	bf00      	nop
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20001e8c 	.word	0x20001e8c
 8008648:	0800b5f4 	.word	0x0800b5f4
 800864c:	2000211c 	.word	0x2000211c

08008650 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8008656:	2160      	movs	r1, #96	; 0x60
 8008658:	4819      	ldr	r0, [pc, #100]	; (80086c0 <OS_QInit+0x70>)
 800865a:	f7ff fbd7 	bl	8007e0c <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 800865e:	2300      	movs	r3, #0
 8008660:	81fb      	strh	r3, [r7, #14]
 8008662:	e018      	b.n	8008696 <OS_QInit+0x46>
        ix_next = ix + 1u;
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	3301      	adds	r3, #1
 8008668:	80fb      	strh	r3, [r7, #6]
        pq1 = &OSQTbl[ix];
 800866a:	89fa      	ldrh	r2, [r7, #14]
 800866c:	4613      	mov	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4413      	add	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4a12      	ldr	r2, [pc, #72]	; (80086c0 <OS_QInit+0x70>)
 8008676:	4413      	add	r3, r2
 8008678:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 800867a:	88fa      	ldrh	r2, [r7, #6]
 800867c:	4613      	mov	r3, r2
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	4413      	add	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4a0e      	ldr	r2, [pc, #56]	; (80086c0 <OS_QInit+0x70>)
 8008686:	4413      	add	r3, r2
 8008688:	603b      	str	r3, [r7, #0]
        pq1->OSQPtr = pq2;
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	601a      	str	r2, [r3, #0]
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8008690:	89fb      	ldrh	r3, [r7, #14]
 8008692:	3301      	adds	r3, #1
 8008694:	81fb      	strh	r3, [r7, #14]
 8008696:	89fb      	ldrh	r3, [r7, #14]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d9e3      	bls.n	8008664 <OS_QInit+0x14>
    }
    pq1         = &OSQTbl[ix];
 800869c:	89fa      	ldrh	r2, [r7, #14]
 800869e:	4613      	mov	r3, r2
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	4413      	add	r3, r2
 80086a4:	00db      	lsls	r3, r3, #3
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <OS_QInit+0x70>)
 80086a8:	4413      	add	r3, r2
 80086aa:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 80086b2:	4b04      	ldr	r3, [pc, #16]	; (80086c4 <OS_QInit+0x74>)
 80086b4:	4a02      	ldr	r2, [pc, #8]	; (80086c0 <OS_QInit+0x70>)
 80086b6:	601a      	str	r2, [r3, #0]
#endif
}
 80086b8:	bf00      	nop
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20002120 	.word	0x20002120
 80086c4:	20002184 	.word	0x20002184

080086c8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 80086d6:	4b18      	ldr	r3, [pc, #96]	; (8008738 <OSSemCreate+0x70>)
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 80086de:	2300      	movs	r3, #0
 80086e0:	e025      	b.n	800872e <OSSemCreate+0x66>
    }
    OS_ENTER_CRITICAL();
 80086e2:	2040      	movs	r0, #64	; 0x40
 80086e4:	f7f7 fd5c 	bl	80001a0 <OS_CPU_SR_Save>
 80086e8:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 80086ea:	4b14      	ldr	r3, [pc, #80]	; (800873c <OSSemCreate+0x74>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 80086f0:	4b12      	ldr	r3, [pc, #72]	; (800873c <OSSemCreate+0x74>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d004      	beq.n	8008702 <OSSemCreate+0x3a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80086f8:	4b10      	ldr	r3, [pc, #64]	; (800873c <OSSemCreate+0x74>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	4a0f      	ldr	r2, [pc, #60]	; (800873c <OSSemCreate+0x74>)
 8008700:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7f7 fd5a 	bl	80001bc <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00e      	beq.n	800872c <OSSemCreate+0x64>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2203      	movs	r2, #3
 8008712:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	88fa      	ldrh	r2, [r7, #6]
 8008718:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2200      	movs	r2, #0
 800871e:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4a07      	ldr	r2, [pc, #28]	; (8008740 <OSSemCreate+0x78>)
 8008724:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 8008726:	68b8      	ldr	r0, [r7, #8]
 8008728:	f7ff fa03 	bl	8007b32 <OS_EventWaitListInit>
        
        OS_TRACE_SEM_CREATE(pevent, pevent->OSEventName);
    }
    return (pevent);
 800872c:	68bb      	ldr	r3, [r7, #8]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20002398 	.word	0x20002398
 800873c:	20002394 	.word	0x20002394
 8008740:	0800b5f8 	.word	0x0800b5f8

08008744 <OSSemPend>:
*/

void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8008750:	2300      	movs	r3, #0
 8008752:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d103      	bne.n	8008762 <OSSemPend+0x1e>
        *perr = OS_ERR_PEVENT_NULL;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2204      	movs	r2, #4
 800875e:	701a      	strb	r2, [r3, #0]
        return;
 8008760:	e07c      	b.n	800885c <OSSemPend+0x118>
    }
#endif

    OS_TRACE_SEM_PEND_ENTER(pevent, timeout);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	2b03      	cmp	r3, #3
 8008768:	d003      	beq.n	8008772 <OSSemPend+0x2e>
        *perr = OS_ERR_EVENT_TYPE;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008770:	e074      	b.n	800885c <OSSemPend+0x118>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 8008772:	4b3c      	ldr	r3, [pc, #240]	; (8008864 <OSSemPend+0x120>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <OSSemPend+0x3e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2202      	movs	r2, #2
 800877e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008780:	e06c      	b.n	800885c <OSSemPend+0x118>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8008782:	4b39      	ldr	r3, [pc, #228]	; (8008868 <OSSemPend+0x124>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	220d      	movs	r2, #13
 800878e:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 8008790:	e064      	b.n	800885c <OSSemPend+0x118>
    }
    OS_ENTER_CRITICAL();
 8008792:	2040      	movs	r0, #64	; 0x40
 8008794:	f7f7 fd04 	bl	80001a0 <OS_CPU_SR_Save>
 8008798:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	891b      	ldrh	r3, [r3, #8]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00c      	beq.n	80087bc <OSSemPend+0x78>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	891b      	ldrh	r3, [r3, #8]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	b29a      	uxth	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80087ae:	6978      	ldr	r0, [r7, #20]
 80087b0:	f7f7 fd04 	bl	80001bc <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	701a      	strb	r2, [r3, #0]
        OS_TRACE_SEM_PEND_EXIT(*perr);
        return;
 80087ba:	e04f      	b.n	800885c <OSSemPend+0x118>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 80087bc:	4b2b      	ldr	r3, [pc, #172]	; (800886c <OSSemPend+0x128>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80087c4:	4b29      	ldr	r3, [pc, #164]	; (800886c <OSSemPend+0x128>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0201 	orr.w	r2, r2, #1
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 80087d2:	4b26      	ldr	r3, [pc, #152]	; (800886c <OSSemPend+0x128>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80087dc:	4b23      	ldr	r3, [pc, #140]	; (800886c <OSSemPend+0x128>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80087e4:	68f8      	ldr	r0, [r7, #12]
 80087e6:	f7ff f8d9 	bl	800799c <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	f7f7 fce6 	bl	80001bc <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 80087f0:	f7ff fb24 	bl	8007e3c <OS_Sched>
    OS_ENTER_CRITICAL();
 80087f4:	2040      	movs	r0, #64	; 0x40
 80087f6:	f7f7 fcd3 	bl	80001a0 <OS_CPU_SR_Save>
 80087fa:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80087fc:	4b1b      	ldr	r3, [pc, #108]	; (800886c <OSSemPend+0x128>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <OSSemPend+0xca>
 8008808:	2b02      	cmp	r3, #2
 800880a:	d004      	beq.n	8008816 <OSSemPend+0xd2>
 800880c:	e007      	b.n	800881e <OSSemPend+0xda>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
             break;
 8008814:	e00d      	b.n	8008832 <OSSemPend+0xee>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	220e      	movs	r2, #14
 800881a:	701a      	strb	r2, [r3, #0]
             break;
 800881c:	e009      	b.n	8008832 <OSSemPend+0xee>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <OSSemPend+0x128>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	4618      	mov	r0, r3
 8008826:	f7ff f90f 	bl	8007a48 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	220a      	movs	r2, #10
 800882e:	701a      	strb	r2, [r3, #0]
             break;
 8008830:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8008832:	4b0e      	ldr	r3, [pc, #56]	; (800886c <OSSemPend+0x128>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <OSSemPend+0x128>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <OSSemPend+0x128>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 800884e:	4b07      	ldr	r3, [pc, #28]	; (800886c <OSSemPend+0x128>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 8008856:	6978      	ldr	r0, [r7, #20]
 8008858:	f7f7 fcb0 	bl	80001bc <OS_CPU_SR_Restore>

    OS_TRACE_SEM_PEND_EXIT(*perr);
}
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20002398 	.word	0x20002398
 8008868:	20001ba0 	.word	0x20001ba0
 800886c:	2000239c 	.word	0x2000239c

08008870 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
#endif


#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <OSSemPost+0x16>
        return (OS_ERR_PEVENT_NULL);
 8008882:	2304      	movs	r3, #4
 8008884:	e02f      	b.n	80088e6 <OSSemPost+0x76>
    }
#endif

    OS_TRACE_SEM_POST_ENTER(pevent);

    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b03      	cmp	r3, #3
 800888c:	d001      	beq.n	8008892 <OSSemPost+0x22>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_EVENT_TYPE);
        return (OS_ERR_EVENT_TYPE);
 800888e:	2301      	movs	r3, #1
 8008890:	e029      	b.n	80088e6 <OSSemPost+0x76>
    }
    OS_ENTER_CRITICAL();
 8008892:	2040      	movs	r0, #64	; 0x40
 8008894:	f7f7 fc84 	bl	80001a0 <OS_CPU_SR_Save>
 8008898:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	7a9b      	ldrb	r3, [r3, #10]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00c      	beq.n	80088bc <OSSemPost+0x4c>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 80088a2:	2300      	movs	r3, #0
 80088a4:	2201      	movs	r2, #1
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7ff f805 	bl	80078b8 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f7f7 fc84 	bl	80001bc <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 80088b4:	f7ff fac2 	bl	8007e3c <OS_Sched>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80088b8:	2300      	movs	r3, #0
 80088ba:	e014      	b.n	80088e6 <OSSemPost+0x76>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	891b      	ldrh	r3, [r3, #8]
 80088c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d00a      	beq.n	80088de <OSSemPost+0x6e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	891b      	ldrh	r3, [r3, #8]
 80088cc:	3301      	adds	r3, #1
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f7f7 fc71 	bl	80001bc <OS_CPU_SR_Restore>
        OS_TRACE_SEM_POST_EXIT(OS_ERR_NONE);
        return (OS_ERR_NONE);
 80088da:	2300      	movs	r3, #0
 80088dc:	e003      	b.n	80088e6 <OSSemPost+0x76>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7f7 fc6c 	bl	80001bc <OS_CPU_SR_Restore>
    OS_TRACE_SEM_POST_EXIT(OS_ERR_SEM_OVF);

    return (OS_ERR_SEM_OVF);
 80088e4:	2333      	movs	r3, #51	; 0x33
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b08c      	sub	sp, #48	; 0x30
 80088f4:	af04      	add	r7, sp, #16
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
        return (OS_ERR_ILLEGAL_CREATE_RUN_TIME);
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	2b3f      	cmp	r3, #63	; 0x3f
 8008906:	d901      	bls.n	800890c <OSTaskCreateExt+0x1c>
        return (OS_ERR_PRIO_INVALID);
 8008908:	232a      	movs	r3, #42	; 0x2a
 800890a:	e052      	b.n	80089b2 <OSTaskCreateExt+0xc2>
    }
#endif
    OS_ENTER_CRITICAL();
 800890c:	2040      	movs	r0, #64	; 0x40
 800890e:	f7f7 fc47 	bl	80001a0 <OS_CPU_SR_Save>
 8008912:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8008914:	4b29      	ldr	r3, [pc, #164]	; (80089bc <OSTaskCreateExt+0xcc>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <OSTaskCreateExt+0x36>
        OS_EXIT_CRITICAL();
 800891c:	69f8      	ldr	r0, [r7, #28]
 800891e:	f7f7 fc4d 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8008922:	233c      	movs	r3, #60	; 0x3c
 8008924:	e045      	b.n	80089b2 <OSTaskCreateExt+0xc2>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <OSTaskCreateExt+0xd0>)
 800892a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d13b      	bne.n	80089aa <OSTaskCreateExt+0xba>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8008932:	78fb      	ldrb	r3, [r7, #3]
 8008934:	4a22      	ldr	r2, [pc, #136]	; (80089c0 <OSTaskCreateExt+0xd0>)
 8008936:	2101      	movs	r1, #1
 8008938:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 800893c:	69f8      	ldr	r0, [r7, #28]
 800893e:	f7f7 fc3d 	bl	80001bc <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8008942:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008944:	461a      	mov	r2, r3
 8008946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008948:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800894a:	f000 fb0b 	bl	8008f64 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 800894e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f7fe fc81 	bl	800725c <OSTaskStkInit>
 800895a:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 800895c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800895e:	78f8      	ldrb	r0, [r7, #3]
 8008960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008962:	9302      	str	r3, [sp, #8]
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	9301      	str	r3, [sp, #4]
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	4613      	mov	r3, r2
 800896e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008970:	69b9      	ldr	r1, [r7, #24]
 8008972:	f7ff fb8d 	bl	8008090 <OS_TCBInit>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 800897a:	7dfb      	ldrb	r3, [r7, #23]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <OSTaskCreateExt+0x9e>
            OS_TRACE_TASK_CREATE(OSTCBPrioTbl[prio]);
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8008980:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <OSTaskCreateExt+0xd4>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10e      	bne.n	80089a6 <OSTaskCreateExt+0xb6>
                OS_Sched();
 8008988:	f7ff fa58 	bl	8007e3c <OS_Sched>
 800898c:	e00b      	b.n	80089a6 <OSTaskCreateExt+0xb6>
            }
        } else {
            OS_ENTER_CRITICAL();
 800898e:	2040      	movs	r0, #64	; 0x40
 8008990:	f7f7 fc06 	bl	80001a0 <OS_CPU_SR_Save>
 8008994:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	4a09      	ldr	r2, [pc, #36]	; (80089c0 <OSTaskCreateExt+0xd0>)
 800899a:	2100      	movs	r1, #0
 800899c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80089a0:	69f8      	ldr	r0, [r7, #28]
 80089a2:	f7f7 fc0b 	bl	80001bc <OS_CPU_SR_Restore>
        }
        return (err);
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	e003      	b.n	80089b2 <OSTaskCreateExt+0xc2>
    }
    OS_EXIT_CRITICAL();
 80089aa:	69f8      	ldr	r0, [r7, #28]
 80089ac:	f7f7 fc06 	bl	80001bc <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 80089b0:	2328      	movs	r3, #40	; 0x28
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3720      	adds	r7, #32
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20002398 	.word	0x20002398
 80089c0:	20002e34 	.word	0x20002e34
 80089c4:	20001ba9 	.word	0x20001ba9

080089c8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	4603      	mov	r3, r0
 80089d0:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 80089d2:	2300      	movs	r3, #0
 80089d4:	617b      	str	r3, [r7, #20]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return (OS_ERR_ILLEGAL_DEL_RUN_TIME);
    }
#endif

    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 80089d6:	4b6d      	ldr	r3, [pc, #436]	; (8008b8c <OSTaskDel+0x1c4>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	e0d0      	b.n	8008b84 <OSTaskDel+0x1bc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	2b3f      	cmp	r3, #63	; 0x3f
 80089e6:	d101      	bne.n	80089ec <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 80089e8:	233e      	movs	r3, #62	; 0x3e
 80089ea:	e0cb      	b.n	8008b84 <OSTaskDel+0x1bc>
    }
#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	2b3e      	cmp	r3, #62	; 0x3e
 80089f0:	d904      	bls.n	80089fc <OSTaskDel+0x34>
        if (prio != OS_PRIO_SELF) {
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	2bff      	cmp	r3, #255	; 0xff
 80089f6:	d001      	beq.n	80089fc <OSTaskDel+0x34>
            return (OS_ERR_PRIO_INVALID);
 80089f8:	232a      	movs	r3, #42	; 0x2a
 80089fa:	e0c3      	b.n	8008b84 <OSTaskDel+0x1bc>
        }
    }
#endif

    OS_ENTER_CRITICAL();
 80089fc:	2040      	movs	r0, #64	; 0x40
 80089fe:	f7f7 fbcf 	bl	80001a0 <OS_CPU_SR_Save>
 8008a02:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2bff      	cmp	r3, #255	; 0xff
 8008a08:	d104      	bne.n	8008a14 <OSTaskDel+0x4c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8008a0a:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <OSTaskDel+0x1c8>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a12:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008a14:	79fb      	ldrb	r3, [r7, #7]
 8008a16:	4a5f      	ldr	r2, [pc, #380]	; (8008b94 <OSTaskDel+0x1cc>)
 8008a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1c:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d104      	bne.n	8008a2e <OSTaskDel+0x66>
        OS_EXIT_CRITICAL();
 8008a24:	6978      	ldr	r0, [r7, #20]
 8008a26:	f7f7 fbc9 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008a2a:	2343      	movs	r3, #67	; 0x43
 8008a2c:	e0aa      	b.n	8008b84 <OSTaskDel+0x1bc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d104      	bne.n	8008a3e <OSTaskDel+0x76>
        OS_EXIT_CRITICAL();
 8008a34:	6978      	ldr	r0, [r7, #20]
 8008a36:	f7f7 fbc1 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8008a3a:	233d      	movs	r3, #61	; 0x3d
 8008a3c:	e0a2      	b.n	8008b84 <OSTaskDel+0x1bc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b54      	ldr	r3, [pc, #336]	; (8008b98 <OSTaskDel+0x1d0>)
 8008a48:	5c9a      	ldrb	r2, [r3, r2]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a50:	43db      	mvns	r3, r3
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	6939      	ldr	r1, [r7, #16]
 8008a56:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	4b4e      	ldr	r3, [pc, #312]	; (8008b98 <OSTaskDel+0x1d0>)
 8008a60:	545a      	strb	r2, [r3, r1]
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b4b      	ldr	r3, [pc, #300]	; (8008b98 <OSTaskDel+0x1d0>)
 8008a6c:	5c9b      	ldrb	r3, [r3, r2]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <OSTaskDel+0xc0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	4b47      	ldr	r3, [pc, #284]	; (8008b9c <OSTaskDel+0x1d4>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	4013      	ands	r3, r2
 8008a82:	b2da      	uxtb	r2, r3
 8008a84:	4b45      	ldr	r3, [pc, #276]	; (8008b9c <OSTaskDel+0x1d4>)
 8008a86:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d005      	beq.n	8008a9c <OSTaskDel+0xd4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6938      	ldr	r0, [r7, #16]
 8008a98:	f7fe ffd6 	bl	8007a48 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <OSTaskDel+0xe8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6938      	ldr	r0, [r7, #16]
 8008aac:	f7fe fffe 	bl	8007aac <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d002      	beq.n	8008ac2 <OSTaskDel+0xfa>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8008abc:	68f8      	ldr	r0, [r7, #12]
 8008abe:	f7ff fc1d 	bl	80082fc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8008ad8:	4b31      	ldr	r3, [pc, #196]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2bff      	cmp	r3, #255	; 0xff
 8008ade:	d005      	beq.n	8008aec <OSTaskDel+0x124>
        OSLockNesting++;
 8008ae0:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	4b2d      	ldr	r3, [pc, #180]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008aea:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8008aec:	6978      	ldr	r0, [r7, #20]
 8008aee:	f7f7 fb65 	bl	80001bc <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 8008af2:	f7fe fedb 	bl	80078ac <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8008af6:	2040      	movs	r0, #64	; 0x40
 8008af8:	f7f7 fb52 	bl	80001a0 <OS_CPU_SR_Save>
 8008afc:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8008afe:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d005      	beq.n	8008b12 <OSTaskDel+0x14a>
        OSLockNesting--;
 8008b06:	4b26      	ldr	r3, [pc, #152]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	b2da      	uxtb	r2, r3
 8008b0e:	4b24      	ldr	r3, [pc, #144]	; (8008ba0 <OSTaskDel+0x1d8>)
 8008b10:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 8008b12:	6938      	ldr	r0, [r7, #16]
 8008b14:	f7fe fb7f 	bl	8007216 <OSTaskDelHook>
#if defined(OS_TLS_TBL_SIZE) && (OS_TLS_TBL_SIZE > 0u)
    OS_TLS_TaskDel(ptcb);                               /* Call TLS hook                               */
#endif
#endif

    OSTaskCtr--;                                        /* One less task being managed                 */
 8008b18:	4b22      	ldr	r3, [pc, #136]	; (8008ba4 <OSTaskDel+0x1dc>)
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	4b20      	ldr	r3, [pc, #128]	; (8008ba4 <OSTaskDel+0x1dc>)
 8008b22:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8008b24:	79fb      	ldrb	r3, [r7, #7]
 8008b26:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <OSTaskDel+0x1cc>)
 8008b28:	2100      	movs	r1, #0
 8008b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d108      	bne.n	8008b48 <OSTaskDel+0x180>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	4a19      	ldr	r2, [pc, #100]	; (8008ba8 <OSTaskDel+0x1e0>)
 8008b44:	6013      	str	r3, [r2, #0]
 8008b46:	e009      	b.n	8008b5c <OSTaskDel+0x194>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	6952      	ldr	r2, [r2, #20]
 8008b50:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	6992      	ldr	r2, [r2, #24]
 8008b5a:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 8008b5c:	4b13      	ldr	r3, [pc, #76]	; (8008bac <OSTaskDel+0x1e4>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 8008b64:	4a11      	ldr	r2, [pc, #68]	; (8008bac <OSTaskDel+0x1e4>)
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4a10      	ldr	r2, [pc, #64]	; (8008bb0 <OSTaskDel+0x1e8>)
 8008b6e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 8008b70:	6978      	ldr	r0, [r7, #20]
 8008b72:	f7f7 fb23 	bl	80001bc <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 8008b76:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <OSTaskDel+0x1ec>)
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <OSTaskDel+0x1ba>
        OS_Sched();                                     /* Find new highest priority task              */
 8008b7e:	f7ff f95d 	bl	8007e3c <OS_Sched>
    }
    return (OS_ERR_NONE);
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3718      	adds	r7, #24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	20002398 	.word	0x20002398
 8008b90:	2000239c 	.word	0x2000239c
 8008b94:	20002e34 	.word	0x20002e34
 8008b98:	2000218c 	.word	0x2000218c
 8008b9c:	20002188 	.word	0x20002188
 8008ba0:	20001ba0 	.word	0x20001ba0
 8008ba4:	20002119 	.word	0x20002119
 8008ba8:	20001e88 	.word	0x20001e88
 8008bac:	20002114 	.word	0x20002114
 8008bb0:	0800b5fc 	.word	0x0800b5fc
 8008bb4:	20001ba9 	.word	0x20001ba9

08008bb8 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	617b      	str	r3, [r7, #20]
        return;
    }
#endif

#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	2b3f      	cmp	r3, #63	; 0x3f
 8008bce:	d906      	bls.n	8008bde <OSTaskNameSet+0x26>
        if (prio != OS_PRIO_SELF) {
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	2bff      	cmp	r3, #255	; 0xff
 8008bd4:	d003      	beq.n	8008bde <OSTaskNameSet+0x26>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	222a      	movs	r2, #42	; 0x2a
 8008bda:	701a      	strb	r2, [r3, #0]
            return;
 8008bdc:	e03c      	b.n	8008c58 <OSTaskNameSet+0xa0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d103      	bne.n	8008bec <OSTaskNameSet+0x34>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	220c      	movs	r2, #12
 8008be8:	701a      	strb	r2, [r3, #0]
        return;
 8008bea:	e035      	b.n	8008c58 <OSTaskNameSet+0xa0>
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8008bec:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <OSTaskNameSet+0xa8>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <OSTaskNameSet+0x44>
        *perr = OS_ERR_NAME_SET_ISR;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2212      	movs	r2, #18
 8008bf8:	701a      	strb	r2, [r3, #0]
        return;
 8008bfa:	e02d      	b.n	8008c58 <OSTaskNameSet+0xa0>
    }
    OS_ENTER_CRITICAL();
 8008bfc:	2040      	movs	r0, #64	; 0x40
 8008bfe:	f7f7 facf 	bl	80001a0 <OS_CPU_SR_Save>
 8008c02:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	2bff      	cmp	r3, #255	; 0xff
 8008c08:	d104      	bne.n	8008c14 <OSTaskNameSet+0x5c>
        prio = OSTCBCur->OSTCBPrio;
 8008c0a:	4b16      	ldr	r3, [pc, #88]	; (8008c64 <OSTaskNameSet+0xac>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008c12:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	4a14      	ldr	r2, [pc, #80]	; (8008c68 <OSTaskNameSet+0xb0>)
 8008c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1c:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
 8008c24:	6978      	ldr	r0, [r7, #20]
 8008c26:	f7f7 fac9 	bl	80001bc <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2243      	movs	r2, #67	; 0x43
 8008c2e:	701a      	strb	r2, [r3, #0]
        return;
 8008c30:	e012      	b.n	8008c58 <OSTaskNameSet+0xa0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d106      	bne.n	8008c46 <OSTaskNameSet+0x8e>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8008c38:	6978      	ldr	r0, [r7, #20]
 8008c3a:	f7f7 fabf 	bl	80001bc <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2243      	movs	r2, #67	; 0x43
 8008c42:	701a      	strb	r2, [r3, #0]
        return;
 8008c44:	e008      	b.n	8008c58 <OSTaskNameSet+0xa0>
    }
    ptcb->OSTCBTaskName = pname;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	651a      	str	r2, [r3, #80]	; 0x50
    OS_TRACE_TASK_NAME_SET(ptcb);
    OS_EXIT_CRITICAL();
 8008c4c:	6978      	ldr	r0, [r7, #20]
 8008c4e:	f7f7 fab5 	bl	80001bc <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]
}
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20002398 	.word	0x20002398
 8008c64:	2000239c 	.word	0x2000239c
 8008c68:	20002e34 	.word	0x20002e34

08008c6c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskResume (INT8U prio)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                                  /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60fb      	str	r3, [r7, #12]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8008c7e:	d901      	bls.n	8008c84 <OSTaskResume+0x18>
        return (OS_ERR_PRIO_INVALID);
 8008c80:	232a      	movs	r3, #42	; 0x2a
 8008c82:	e063      	b.n	8008d4c <OSTaskResume+0xe0>
    }
#endif
    OS_ENTER_CRITICAL();
 8008c84:	2040      	movs	r0, #64	; 0x40
 8008c86:	f7f7 fa8b 	bl	80001a0 <OS_CPU_SR_Save>
 8008c8a:	60f8      	str	r0, [r7, #12]
    ptcb = OSTCBPrioTbl[prio];
 8008c8c:	79fb      	ldrb	r3, [r7, #7]
 8008c8e:	4a31      	ldr	r2, [pc, #196]	; (8008d54 <OSTaskResume+0xe8>)
 8008c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c94:	60bb      	str	r3, [r7, #8]
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d104      	bne.n	8008ca6 <OSTaskResume+0x3a>
        OS_EXIT_CRITICAL();
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7f7 fa8d 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
 8008ca2:	2346      	movs	r3, #70	; 0x46
 8008ca4:	e052      	b.n	8008d4c <OSTaskResume+0xe0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d104      	bne.n	8008cb6 <OSTaskResume+0x4a>
        OS_EXIT_CRITICAL();
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f7f7 fa85 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008cb2:	2343      	movs	r3, #67	; 0x43
 8008cb4:	e04a      	b.n	8008d4c <OSTaskResume+0xe0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d03f      	beq.n	8008d44 <OSTaskResume+0xd8>
        ptcb->OSTCBStat &= (INT8U)~(INT8U)OS_STAT_SUSPEND;    /* Remove suspension                     */
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cca:	f023 0308 	bic.w	r3, r3, #8
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) == OS_STAT_RDY) { /* See if task is now ready         */
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008cdc:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d12a      	bne.n	8008d3a <OSTaskResume+0xce>
            if (ptcb->OSTCBDly == 0u) {
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d122      	bne.n	8008d32 <OSTaskResume+0xc6>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8008cf2:	4b19      	ldr	r3, [pc, #100]	; (8008d58 <OSTaskResume+0xec>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	4b17      	ldr	r3, [pc, #92]	; (8008d58 <OSTaskResume+0xec>)
 8008cfc:	701a      	strb	r2, [r3, #0]
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d04:	461a      	mov	r2, r3
 8008d06:	4b15      	ldr	r3, [pc, #84]	; (8008d5c <OSTaskResume+0xf0>)
 8008d08:	5c9a      	ldrb	r2, [r3, r2]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b2da      	uxtb	r2, r3
 8008d1a:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <OSTaskResume+0xf0>)
 8008d1c:	545a      	strb	r2, [r3, r1]
                OS_TRACE_TASK_READY(ptcb);
                OS_EXIT_CRITICAL();
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f7f7 fa4c 	bl	80001bc <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
 8008d24:	4b0e      	ldr	r3, [pc, #56]	; (8008d60 <OSTaskResume+0xf4>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d109      	bne.n	8008d40 <OSTaskResume+0xd4>
                    OS_TRACE_TASK_RESUME(ptcb);
                    OS_Sched();                               /* Find new highest priority task        */
 8008d2c:	f7ff f886 	bl	8007e3c <OS_Sched>
 8008d30:	e006      	b.n	8008d40 <OSTaskResume+0xd4>
                }
            } else {
                OS_EXIT_CRITICAL();
 8008d32:	68f8      	ldr	r0, [r7, #12]
 8008d34:	f7f7 fa42 	bl	80001bc <OS_CPU_SR_Restore>
 8008d38:	e002      	b.n	8008d40 <OSTaskResume+0xd4>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f7f7 fa3e 	bl	80001bc <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
 8008d40:	2300      	movs	r3, #0
 8008d42:	e003      	b.n	8008d4c <OSTaskResume+0xe0>
    }
    OS_EXIT_CRITICAL();
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7f7 fa39 	bl	80001bc <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
 8008d4a:	2344      	movs	r3, #68	; 0x44
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20002e34 	.word	0x20002e34
 8008d58:	20002188 	.word	0x20002188
 8008d5c:	2000218c 	.word	0x2000218c
 8008d60:	20001ba9 	.word	0x20001ba9

08008d64 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b088      	sub	sp, #32
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	6039      	str	r1, [r7, #0]
 8008d6e:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8008d70:	2300      	movs	r3, #0
 8008d72:	617b      	str	r3, [r7, #20]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 8008d74:	79fb      	ldrb	r3, [r7, #7]
 8008d76:	2b3f      	cmp	r3, #63	; 0x3f
 8008d78:	d904      	bls.n	8008d84 <OSTaskStkChk+0x20>
        if (prio != OS_PRIO_SELF) {
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	2bff      	cmp	r3, #255	; 0xff
 8008d7e:	d001      	beq.n	8008d84 <OSTaskStkChk+0x20>
            return (OS_ERR_PRIO_INVALID);
 8008d80:	232a      	movs	r3, #42	; 0x2a
 8008d82:	e054      	b.n	8008e2e <OSTaskStkChk+0xca>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d101      	bne.n	8008d8e <OSTaskStkChk+0x2a>
        return (OS_ERR_PDATA_NULL);
 8008d8a:	2309      	movs	r3, #9
 8008d8c:	e04f      	b.n	8008e2e <OSTaskStkChk+0xca>
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2200      	movs	r2, #0
 8008d98:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 8008d9a:	2040      	movs	r0, #64	; 0x40
 8008d9c:	f7f7 fa00 	bl	80001a0 <OS_CPU_SR_Save>
 8008da0:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8008da2:	79fb      	ldrb	r3, [r7, #7]
 8008da4:	2bff      	cmp	r3, #255	; 0xff
 8008da6:	d104      	bne.n	8008db2 <OSTaskStkChk+0x4e>
        prio = OSTCBCur->OSTCBPrio;
 8008da8:	4b23      	ldr	r3, [pc, #140]	; (8008e38 <OSTaskStkChk+0xd4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008db0:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <OSTaskStkChk+0xd8>)
 8008db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dba:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <OSTaskStkChk+0x68>
        OS_EXIT_CRITICAL();
 8008dc2:	6978      	ldr	r0, [r7, #20]
 8008dc4:	f7f7 f9fa 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008dc8:	2343      	movs	r3, #67	; 0x43
 8008dca:	e030      	b.n	8008e2e <OSTaskStkChk+0xca>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d104      	bne.n	8008ddc <OSTaskStkChk+0x78>
        OS_EXIT_CRITICAL();
 8008dd2:	6978      	ldr	r0, [r7, #20]
 8008dd4:	f7f7 f9f2 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008dd8:	2343      	movs	r3, #67	; 0x43
 8008dda:	e028      	b.n	8008e2e <OSTaskStkChk+0xca>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	8a1b      	ldrh	r3, [r3, #16]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <OSTaskStkChk+0x8e>
        OS_EXIT_CRITICAL();
 8008de8:	6978      	ldr	r0, [r7, #20]
 8008dea:	f7f7 f9e7 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8008dee:	2345      	movs	r3, #69	; 0x45
 8008df0:	e01d      	b.n	8008e2e <OSTaskStkChk+0xca>
    }
    nfree = 0u;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8008e02:	6978      	ldr	r0, [r7, #20]
 8008e04:	f7f7 f9da 	bl	80001bc <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008e08:	e002      	b.n	8008e10 <OSTaskStkChk+0xac>
        nfree++;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	61bb      	str	r3, [r7, #24]
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	1d1a      	adds	r2, r3, #4
 8008e14:	61fa      	str	r2, [r7, #28]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d0f6      	beq.n	8008e0a <OSTaskStkChk+0xa6>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	1ad2      	subs	r2, r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8008e2c:	2300      	movs	r3, #0
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3720      	adds	r7, #32
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	2000239c 	.word	0x2000239c
 8008e3c:	20002e34 	.word	0x20002e34

08008e40 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	613b      	str	r3, [r7, #16]
#endif



#if OS_ARG_CHK_EN > 0u
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	2b3f      	cmp	r3, #63	; 0x3f
 8008e52:	d101      	bne.n	8008e58 <OSTaskSuspend+0x18>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 8008e54:	2347      	movs	r3, #71	; 0x47
 8008e56:	e06a      	b.n	8008f2e <OSTaskSuspend+0xee>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8008e5c:	d904      	bls.n	8008e68 <OSTaskSuspend+0x28>
        if (prio != OS_PRIO_SELF) {
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	2bff      	cmp	r3, #255	; 0xff
 8008e62:	d001      	beq.n	8008e68 <OSTaskSuspend+0x28>
            return (OS_ERR_PRIO_INVALID);
 8008e64:	232a      	movs	r3, #42	; 0x2a
 8008e66:	e062      	b.n	8008f2e <OSTaskSuspend+0xee>
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8008e68:	2040      	movs	r0, #64	; 0x40
 8008e6a:	f7f7 f999 	bl	80001a0 <OS_CPU_SR_Save>
 8008e6e:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2bff      	cmp	r3, #255	; 0xff
 8008e74:	d107      	bne.n	8008e86 <OSTaskSuspend+0x46>
        prio = OSTCBCur->OSTCBPrio;
 8008e76:	4b30      	ldr	r3, [pc, #192]	; (8008f38 <OSTaskSuspend+0xf8>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008e7e:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	75fb      	strb	r3, [r7, #23]
 8008e84:	e00b      	b.n	8008e9e <OSTaskSuspend+0x5e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8008e86:	4b2c      	ldr	r3, [pc, #176]	; (8008f38 <OSTaskSuspend+0xf8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008e8e:	79fa      	ldrb	r2, [r7, #7]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d102      	bne.n	8008e9a <OSTaskSuspend+0x5a>
        self = OS_TRUE;
 8008e94:	2301      	movs	r3, #1
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	e001      	b.n	8008e9e <OSTaskSuspend+0x5e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	4a26      	ldr	r2, [pc, #152]	; (8008f3c <OSTaskSuspend+0xfc>)
 8008ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea6:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <OSTaskSuspend+0x78>
        OS_EXIT_CRITICAL();
 8008eae:	6938      	ldr	r0, [r7, #16]
 8008eb0:	f7f7 f984 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8008eb4:	2348      	movs	r3, #72	; 0x48
 8008eb6:	e03a      	b.n	8008f2e <OSTaskSuspend+0xee>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d104      	bne.n	8008ec8 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
 8008ebe:	6938      	ldr	r0, [r7, #16]
 8008ec0:	f7f7 f97c 	bl	80001bc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8008ec4:	2343      	movs	r3, #67	; 0x43
 8008ec6:	e032      	b.n	8008f2e <OSTaskSuspend+0xee>
    }
    y            = ptcb->OSTCBY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008ece:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <OSTaskSuspend+0x100>)
 8008ed4:	5cd1      	ldrb	r1, [r2, r3]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008edc:	43db      	mvns	r3, r3
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	400a      	ands	r2, r1
 8008ee4:	b2d1      	uxtb	r1, r2
 8008ee6:	4a16      	ldr	r2, [pc, #88]	; (8008f40 <OSTaskSuspend+0x100>)
 8008ee8:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 8008eea:	7afb      	ldrb	r3, [r7, #11]
 8008eec:	4a14      	ldr	r2, [pc, #80]	; (8008f40 <OSTaskSuspend+0x100>)
 8008eee:	5cd3      	ldrb	r3, [r2, r3]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10a      	bne.n	8008f0a <OSTaskSuspend+0xca>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008efa:	43db      	mvns	r3, r3
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <OSTaskSuspend+0x104>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	4013      	ands	r3, r2
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <OSTaskSuspend+0x104>)
 8008f08:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f10:	f043 0308 	orr.w	r3, r3, #8
 8008f14:	b2da      	uxtb	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8008f1c:	6938      	ldr	r0, [r7, #16]
 8008f1e:	f7f7 f94d 	bl	80001bc <OS_CPU_SR_Restore>
    OS_TRACE_TASK_SUSPEND(ptcb);
    OS_TRACE_TASK_SUSPENDED(ptcb);
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d101      	bne.n	8008f2c <OSTaskSuspend+0xec>
        OS_Sched();                                             /* Find new highest priority task      */
 8008f28:	f7fe ff88 	bl	8007e3c <OS_Sched>
    }
    return (OS_ERR_NONE);
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3718      	adds	r7, #24
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	2000239c 	.word	0x2000239c
 8008f3c:	20002e34 	.word	0x20002e34
 8008f40:	2000218c 	.word	0x2000218c
 8008f44:	20002188 	.word	0x20002188

08008f48 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8008f4c:	4b04      	ldr	r3, [pc, #16]	; (8008f60 <OS_TaskReturn+0x18>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4618      	mov	r0, r3
 8008f52:	f7fe f971 	bl	8007238 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 8008f56:	20ff      	movs	r0, #255	; 0xff
 8008f58:	f7ff fd36 	bl	80089c8 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8008f5c:	bf00      	nop
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000239c 	.word	0x2000239c

08008f64 <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	f003 0301 	and.w	r3, r3, #1
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d010      	beq.n	8008f9e <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8008f7c:	88fb      	ldrh	r3, [r7, #6]
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00b      	beq.n	8008f9e <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008f86:	e007      	b.n	8008f98 <OS_TaskStkClr+0x34>
                size--;
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	1d1a      	adds	r2, r3, #4
 8008f92:	60fa      	str	r2, [r7, #12]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f4      	bne.n	8008f88 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8008f9e:	bf00      	nop
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr

08008fa8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8008fb4:	4b21      	ldr	r3, [pc, #132]	; (800903c <OSTimeDly+0x94>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d138      	bne.n	800902e <OSTimeDly+0x86>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 8008fbc:	4b20      	ldr	r3, [pc, #128]	; (8009040 <OSTimeDly+0x98>)
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d136      	bne.n	8009032 <OSTimeDly+0x8a>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d034      	beq.n	8009034 <OSTimeDly+0x8c>
        OS_ENTER_CRITICAL();
 8008fca:	2040      	movs	r0, #64	; 0x40
 8008fcc:	f7f7 f8e8 	bl	80001a0 <OS_CPU_SR_Save>
 8008fd0:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <OSTimeDly+0x9c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008fda:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
 8008fde:	4a1a      	ldr	r2, [pc, #104]	; (8009048 <OSTimeDly+0xa0>)
 8008fe0:	5cd1      	ldrb	r1, [r2, r3]
 8008fe2:	4b18      	ldr	r3, [pc, #96]	; (8009044 <OSTimeDly+0x9c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fea:	43db      	mvns	r3, r3
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	7afb      	ldrb	r3, [r7, #11]
 8008ff0:	400a      	ands	r2, r1
 8008ff2:	b2d1      	uxtb	r1, r2
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <OSTimeDly+0xa0>)
 8008ff6:	54d1      	strb	r1, [r2, r3]
        OS_TRACE_TASK_SUSPENDED(OSTCBCur);
        if (OSRdyTbl[y] == 0u) {
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	4a13      	ldr	r2, [pc, #76]	; (8009048 <OSTimeDly+0xa0>)
 8008ffc:	5cd3      	ldrb	r3, [r2, r3]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <OSTimeDly+0x72>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8009002:	4b10      	ldr	r3, [pc, #64]	; (8009044 <OSTimeDly+0x9c>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800900a:	43db      	mvns	r3, r3
 800900c:	b2da      	uxtb	r2, r3
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <OSTimeDly+0xa4>)
 8009010:	781b      	ldrb	r3, [r3, #0]
 8009012:	4013      	ands	r3, r2
 8009014:	b2da      	uxtb	r2, r3
 8009016:	4b0d      	ldr	r3, [pc, #52]	; (800904c <OSTimeDly+0xa4>)
 8009018:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 800901a:	4b0a      	ldr	r3, [pc, #40]	; (8009044 <OSTimeDly+0x9c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	631a      	str	r2, [r3, #48]	; 0x30
        OS_TRACE_TASK_DLY(ticks);
        OS_EXIT_CRITICAL();
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7f7 f8ca 	bl	80001bc <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 8009028:	f7fe ff08 	bl	8007e3c <OS_Sched>
 800902c:	e002      	b.n	8009034 <OSTimeDly+0x8c>
        return;
 800902e:	bf00      	nop
 8009030:	e000      	b.n	8009034 <OSTimeDly+0x8c>
        return;
 8009032:	bf00      	nop
    }
}
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20002398 	.word	0x20002398
 8009040:	20001ba0 	.word	0x20001ba0
 8009044:	2000239c 	.word	0x2000239c
 8009048:	2000218c 	.word	0x2000218c
 800904c:	20002188 	.word	0x20002188

08009050 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8009050:	b590      	push	{r4, r7, lr}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	4604      	mov	r4, r0
 8009058:	4608      	mov	r0, r1
 800905a:	4611      	mov	r1, r2
 800905c:	461a      	mov	r2, r3
 800905e:	4623      	mov	r3, r4
 8009060:	71fb      	strb	r3, [r7, #7]
 8009062:	4603      	mov	r3, r0
 8009064:	71bb      	strb	r3, [r7, #6]
 8009066:	460b      	mov	r3, r1
 8009068:	717b      	strb	r3, [r7, #5]
 800906a:	4613      	mov	r3, r2
 800906c:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 800906e:	4b27      	ldr	r3, [pc, #156]	; (800910c <OSTimeDlyHMSM+0xbc>)
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 8009076:	2355      	movs	r3, #85	; 0x55
 8009078:	e043      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800907a:	4b25      	ldr	r3, [pc, #148]	; (8009110 <OSTimeDlyHMSM+0xc0>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8009082:	2332      	movs	r3, #50	; 0x32
 8009084:	e03d      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
    }
#if OS_ARG_CHK_EN > 0u
    if (hours == 0u) {
 8009086:	79fb      	ldrb	r3, [r7, #7]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <OSTimeDlyHMSM+0x52>
        if (minutes == 0u) {
 800908c:	79bb      	ldrb	r3, [r7, #6]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d107      	bne.n	80090a2 <OSTimeDlyHMSM+0x52>
            if (seconds == 0u) {
 8009092:	797b      	ldrb	r3, [r7, #5]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d104      	bne.n	80090a2 <OSTimeDlyHMSM+0x52>
                if (ms == 0u) {
 8009098:	887b      	ldrh	r3, [r7, #2]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <OSTimeDlyHMSM+0x52>
                    return (OS_ERR_TIME_ZERO_DLY);
 800909e:	2354      	movs	r3, #84	; 0x54
 80090a0:	e02f      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
                }
            }
        }
    }
    if (minutes > 59u) {
 80090a2:	79bb      	ldrb	r3, [r7, #6]
 80090a4:	2b3b      	cmp	r3, #59	; 0x3b
 80090a6:	d901      	bls.n	80090ac <OSTimeDlyHMSM+0x5c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 80090a8:	2351      	movs	r3, #81	; 0x51
 80090aa:	e02a      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
    }
    if (seconds > 59u) {
 80090ac:	797b      	ldrb	r3, [r7, #5]
 80090ae:	2b3b      	cmp	r3, #59	; 0x3b
 80090b0:	d901      	bls.n	80090b6 <OSTimeDlyHMSM+0x66>
        return (OS_ERR_TIME_INVALID_SECONDS);
 80090b2:	2352      	movs	r3, #82	; 0x52
 80090b4:	e025      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
    }
    if (ms > 999u) {
 80090b6:	887b      	ldrh	r3, [r7, #2]
 80090b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090bc:	d301      	bcc.n	80090c2 <OSTimeDlyHMSM+0x72>
        return (OS_ERR_TIME_INVALID_MS);
 80090be:	2353      	movs	r3, #83	; 0x53
 80090c0:	e01f      	b.n	8009102 <OSTimeDlyHMSM+0xb2>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80090c8:	fb02 f103 	mul.w	r1, r2, r3
 80090cc:	79ba      	ldrb	r2, [r7, #6]
 80090ce:	4613      	mov	r3, r2
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	18ca      	adds	r2, r1, r3
 80090d8:	797b      	ldrb	r3, [r7, #5]
 80090da:	4413      	add	r3, r2
 80090dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80090e0:	fb02 f203 	mul.w	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4909      	ldr	r1, [pc, #36]	; (8009114 <OSTimeDlyHMSM+0xc4>)
 80090f0:	fba1 1303 	umull	r1, r3, r1, r3
 80090f4:	099b      	lsrs	r3, r3, #6
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 80090f6:	4413      	add	r3, r2
 80090f8:	60fb      	str	r3, [r7, #12]
    OSTimeDly(ticks);
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff ff54 	bl	8008fa8 <OSTimeDly>
    return (OS_ERR_NONE);
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	bd90      	pop	{r4, r7, pc}
 800910a:	bf00      	nop
 800910c:	20002398 	.word	0x20002398
 8009110:	20001ba0 	.word	0x20001ba0
 8009114:	10624dd3 	.word	0x10624dd3

08009118 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0u
INT32U  OSTimeGet (void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800911e:	2300      	movs	r3, #0
 8009120:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8009122:	2040      	movs	r0, #64	; 0x40
 8009124:	f7f7 f83c 	bl	80001a0 <OS_CPU_SR_Save>
 8009128:	6078      	str	r0, [r7, #4]
    ticks = OSTime;
 800912a:	4b05      	ldr	r3, [pc, #20]	; (8009140 <OSTimeGet+0x28>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	603b      	str	r3, [r7, #0]
    OS_EXIT_CRITICAL();
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7f7 f843 	bl	80001bc <OS_CPU_SR_Restore>
    return (ticks);
 8009136:	683b      	ldr	r3, [r7, #0]
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	200023a4 	.word	0x200023a4

08009144 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 800914a:	4b06      	ldr	r3, [pc, #24]	; (8009164 <OSTmrSignal+0x20>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fb8e 	bl	8008870 <OSSemPost>
 8009154:	4603      	mov	r3, r0
 8009156:	71fb      	strb	r3, [r7, #7]
    return (err);
 8009158:	79fb      	ldrb	r3, [r7, #7]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20001ba4 	.word	0x20001ba4

08009168 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 800916e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009172:	4838      	ldr	r0, [pc, #224]	; (8009254 <OSTmr_Init+0xec>)
 8009174:	f7fe fe4a 	bl	8007e0c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8009178:	2138      	movs	r1, #56	; 0x38
 800917a:	4837      	ldr	r0, [pc, #220]	; (8009258 <OSTmr_Init+0xf0>)
 800917c:	f7fe fe46 	bl	8007e0c <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8009180:	2300      	movs	r3, #0
 8009182:	82fb      	strh	r3, [r7, #22]
 8009184:	e022      	b.n	80091cc <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8009186:	8afb      	ldrh	r3, [r7, #22]
 8009188:	3301      	adds	r3, #1
 800918a:	81fb      	strh	r3, [r7, #14]
        ptmr1 = &OSTmrTbl[ix];
 800918c:	8afa      	ldrh	r2, [r7, #22]
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	4a2f      	ldr	r2, [pc, #188]	; (8009254 <OSTmr_Init+0xec>)
 8009198:	4413      	add	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
        ptmr2 = &OSTmrTbl[ix_next];
 800919c:	89fa      	ldrh	r2, [r7, #14]
 800919e:	4613      	mov	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4413      	add	r3, r2
 80091a4:	00db      	lsls	r3, r3, #3
 80091a6:	4a2b      	ldr	r2, [pc, #172]	; (8009254 <OSTmr_Init+0xec>)
 80091a8:	4413      	add	r3, r2
 80091aa:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	2264      	movs	r2, #100	; 0x64
 80091b0:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	4a26      	ldr	r2, [pc, #152]	; (800925c <OSTmr_Init+0xf4>)
 80091c4:	621a      	str	r2, [r3, #32]
    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 80091c6:	8afb      	ldrh	r3, [r7, #22]
 80091c8:	3301      	adds	r3, #1
 80091ca:	82fb      	strh	r3, [r7, #22]
 80091cc:	8afb      	ldrh	r3, [r7, #22]
 80091ce:	2b0e      	cmp	r3, #14
 80091d0:	d9d9      	bls.n	8009186 <OSTmr_Init+0x1e>
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 80091d2:	8afa      	ldrh	r2, [r7, #22]
 80091d4:	4613      	mov	r3, r2
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4413      	add	r3, r2
 80091da:	00db      	lsls	r3, r3, #3
 80091dc:	4a1d      	ldr	r2, [pc, #116]	; (8009254 <OSTmr_Init+0xec>)
 80091de:	4413      	add	r3, r2
 80091e0:	613b      	str	r3, [r7, #16]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	2264      	movs	r2, #100	; 0x64
 80091e6:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	2200      	movs	r2, #0
 80091f4:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <OSTmr_Init+0xf4>)
 80091fa:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 80091fc:	4b18      	ldr	r3, [pc, #96]	; (8009260 <OSTmr_Init+0xf8>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 8009202:	4b18      	ldr	r3, [pc, #96]	; (8009264 <OSTmr_Init+0xfc>)
 8009204:	2200      	movs	r2, #0
 8009206:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8009208:	4b17      	ldr	r3, [pc, #92]	; (8009268 <OSTmr_Init+0x100>)
 800920a:	2210      	movs	r2, #16
 800920c:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800920e:	4b17      	ldr	r3, [pc, #92]	; (800926c <OSTmr_Init+0x104>)
 8009210:	4a10      	ldr	r2, [pc, #64]	; (8009254 <OSTmr_Init+0xec>)
 8009212:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 8009214:	2001      	movs	r0, #1
 8009216:	f7ff fa57 	bl	80086c8 <OSSemCreate>
 800921a:	4603      	mov	r3, r0
 800921c:	4a14      	ldr	r2, [pc, #80]	; (8009270 <OSTmr_Init+0x108>)
 800921e:	6013      	str	r3, [r2, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 8009220:	2000      	movs	r0, #0
 8009222:	f7ff fa51 	bl	80086c8 <OSSemCreate>
 8009226:	4603      	mov	r3, r0
 8009228:	4a12      	ldr	r2, [pc, #72]	; (8009274 <OSTmr_Init+0x10c>)
 800922a:	6013      	str	r3, [r2, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 800922c:	4b10      	ldr	r3, [pc, #64]	; (8009270 <OSTmr_Init+0x108>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	1dfa      	adds	r2, r7, #7
 8009232:	4911      	ldr	r1, [pc, #68]	; (8009278 <OSTmr_Init+0x110>)
 8009234:	4618      	mov	r0, r3
 8009236:	f7fe f91d 	bl	8007474 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 800923a:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <OSTmr_Init+0x10c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	1dfa      	adds	r2, r7, #7
 8009240:	490e      	ldr	r1, [pc, #56]	; (800927c <OSTmr_Init+0x114>)
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe f916 	bl	8007474 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 8009248:	f000 f81a 	bl	8009280 <OSTmr_InitTask>
}
 800924c:	bf00      	nop
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}
 8009254:	20001c04 	.word	0x20001c04
 8009258:	20001b68 	.word	0x20001b68
 800925c:	0800b600 	.word	0x0800b600
 8009260:	200023a0 	.word	0x200023a0
 8009264:	20001bb0 	.word	0x20001bb0
 8009268:	2000210c 	.word	0x2000210c
 800926c:	20001b64 	.word	0x20001b64
 8009270:	200023a8 	.word	0x200023a8
 8009274:	20001ba4 	.word	0x20001ba4
 8009278:	0800b604 	.word	0x0800b604
 800927c:	0800b618 	.word	0x0800b618

08009280 <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8009286:	2303      	movs	r3, #3
 8009288:	9304      	str	r3, [sp, #16]
 800928a:	2300      	movs	r3, #0
 800928c:	9303      	str	r3, [sp, #12]
 800928e:	2380      	movs	r3, #128	; 0x80
 8009290:	9302      	str	r3, [sp, #8]
 8009292:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <OSTmr_InitTask+0x3c>)
 8009294:	9301      	str	r3, [sp, #4]
 8009296:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	233d      	movs	r3, #61	; 0x3d
 800929e:	4a08      	ldr	r2, [pc, #32]	; (80092c0 <OSTmr_InitTask+0x40>)
 80092a0:	2100      	movs	r1, #0
 80092a2:	4808      	ldr	r0, [pc, #32]	; (80092c4 <OSTmr_InitTask+0x44>)
 80092a4:	f7ff fb24 	bl	80088f0 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 80092a8:	1dfb      	adds	r3, r7, #7
 80092aa:	461a      	mov	r2, r3
 80092ac:	4906      	ldr	r1, [pc, #24]	; (80092c8 <OSTmr_InitTask+0x48>)
 80092ae:	203d      	movs	r0, #61	; 0x3d
 80092b0:	f7ff fc82 	bl	8008bb8 <OSTaskNameSet>
#endif
}
 80092b4:	bf00      	nop
 80092b6:	3708      	adds	r7, #8
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}
 80092bc:	20002194 	.word	0x20002194
 80092c0:	20002390 	.word	0x20002390
 80092c4:	08009445 	.word	0x08009445
 80092c8:	0800b62c 	.word	0x0800b62c

080092cc <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2203      	movs	r2, #3
 80092dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d107      	bne.n	80092f6 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	69da      	ldr	r2, [r3, #28]
 80092ea:	4b2a      	ldr	r3, [pc, #168]	; (8009394 <OSTmr_Link+0xc8>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	441a      	add	r2, r3
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	615a      	str	r2, [r3, #20]
 80092f4:	e012      	b.n	800931c <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d107      	bne.n	800930e <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69da      	ldr	r2, [r3, #28]
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <OSTmr_Link+0xc8>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	441a      	add	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	615a      	str	r2, [r3, #20]
 800930c:	e006      	b.n	800931c <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	4b20      	ldr	r3, [pc, #128]	; (8009394 <OSTmr_Link+0xc8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	441a      	add	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	695a      	ldr	r2, [r3, #20]
 8009320:	4b1d      	ldr	r3, [pc, #116]	; (8009398 <OSTmr_Link+0xcc>)
 8009322:	fba3 1302 	umull	r1, r3, r3, r2
 8009326:	1ad1      	subs	r1, r2, r3
 8009328:	0849      	lsrs	r1, r1, #1
 800932a:	440b      	add	r3, r1
 800932c:	0899      	lsrs	r1, r3, #2
 800932e:	460b      	mov	r3, r1
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	1a5b      	subs	r3, r3, r1
 8009334:	1ad1      	subs	r1, r2, r3
 8009336:	460b      	mov	r3, r1
 8009338:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 800933a:	8afb      	ldrh	r3, [r7, #22]
 800933c:	00db      	lsls	r3, r3, #3
 800933e:	4a17      	ldr	r2, [pc, #92]	; (800939c <OSTmr_Link+0xd0>)
 8009340:	4413      	add	r3, r2
 8009342:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <OSTmr_Link+0x94>
        pspoke->OSTmrFirst   = ptmr;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2201      	movs	r2, #1
 800935c:	809a      	strh	r2, [r3, #4]
 800935e:	e011      	b.n	8009384 <OSTmr_Link+0xb8>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	889b      	ldrh	r3, [r3, #4]
 800937c:	3301      	adds	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	611a      	str	r2, [r3, #16]
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	bc80      	pop	{r7}
 8009392:	4770      	bx	lr
 8009394:	200023a0 	.word	0x200023a0
 8009398:	24924925 	.word	0x24924925
 800939c:	20001b68 	.word	0x20001b68

080093a0 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	695a      	ldr	r2, [r3, #20]
 80093ac:	4b23      	ldr	r3, [pc, #140]	; (800943c <OSTmr_Unlink+0x9c>)
 80093ae:	fba3 1302 	umull	r1, r3, r3, r2
 80093b2:	1ad1      	subs	r1, r2, r3
 80093b4:	0849      	lsrs	r1, r1, #1
 80093b6:	440b      	add	r3, r1
 80093b8:	0899      	lsrs	r1, r3, #2
 80093ba:	460b      	mov	r3, r1
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	1a5b      	subs	r3, r3, r1
 80093c0:	1ad1      	subs	r1, r2, r3
 80093c2:	460b      	mov	r3, r1
 80093c4:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 80093c6:	8afb      	ldrh	r3, [r7, #22]
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	4a1d      	ldr	r2, [pc, #116]	; (8009440 <OSTmr_Unlink+0xa0>)
 80093cc:	4413      	add	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d10c      	bne.n	80093f4 <OSTmr_Unlink+0x54>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d012      	beq.n	8009412 <OSTmr_Unlink+0x72>
            ptmr1->OSTmrPrev = (void *)0;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	611a      	str	r2, [r3, #16]
 80093f2:	e00e      	b.n	8009412 <OSTmr_Unlink+0x72>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68db      	ldr	r3, [r3, #12]
 80093fe:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <OSTmr_Unlink+0x72>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	889b      	ldrh	r3, [r3, #4]
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	809a      	strh	r2, [r3, #4]
}
 8009432:	bf00      	nop
 8009434:	371c      	adds	r7, #28
 8009436:	46bd      	mov	sp, r7
 8009438:	bc80      	pop	{r7}
 800943a:	4770      	bx	lr
 800943c:	24924925 	.word	0x24924925
 8009440:	20001b68 	.word	0x20001b68

08009444 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 800944c:	4b2a      	ldr	r3, [pc, #168]	; (80094f8 <OSTmr_Task+0xb4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f107 020b 	add.w	r2, r7, #11
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f7ff f974 	bl	8008744 <OSSemPend>
        OSSchedLock();
 800945c:	f7fe f8cc 	bl	80075f8 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8009460:	4b26      	ldr	r3, [pc, #152]	; (80094fc <OSTmr_Task+0xb8>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	4a25      	ldr	r2, [pc, #148]	; (80094fc <OSTmr_Task+0xb8>)
 8009468:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 800946a:	4b24      	ldr	r3, [pc, #144]	; (80094fc <OSTmr_Task+0xb8>)
 800946c:	681a      	ldr	r2, [r3, #0]
 800946e:	4b24      	ldr	r3, [pc, #144]	; (8009500 <OSTmr_Task+0xbc>)
 8009470:	fba3 1302 	umull	r1, r3, r3, r2
 8009474:	1ad1      	subs	r1, r2, r3
 8009476:	0849      	lsrs	r1, r1, #1
 8009478:	440b      	add	r3, r1
 800947a:	0899      	lsrs	r1, r3, #2
 800947c:	460b      	mov	r3, r1
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	1a5b      	subs	r3, r3, r1
 8009482:	1ad1      	subs	r1, r2, r3
 8009484:	460b      	mov	r3, r1
 8009486:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8009488:	8b7b      	ldrh	r3, [r7, #26]
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4a1d      	ldr	r2, [pc, #116]	; (8009504 <OSTmr_Task+0xc0>)
 800948e:	4413      	add	r3, r2
 8009490:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8009498:	e027      	b.n	80094ea <OSTmr_Task+0xa6>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 80094a0:	69fb      	ldr	r3, [r7, #28]
 80094a2:	695a      	ldr	r2, [r3, #20]
 80094a4:	4b15      	ldr	r3, [pc, #84]	; (80094fc <OSTmr_Task+0xb8>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d11c      	bne.n	80094e6 <OSTmr_Task+0xa2>
                OS_TRACE_TMR_EXPIRED(ptmr);
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 80094ac:	69f8      	ldr	r0, [r7, #28]
 80094ae:	f7ff ff77 	bl	80093a0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d104      	bne.n	80094c6 <OSTmr_Task+0x82>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 80094bc:	2101      	movs	r1, #1
 80094be:	69f8      	ldr	r0, [r7, #28]
 80094c0:	f7ff ff04 	bl	80092cc <OSTmr_Link>
 80094c4:	e003      	b.n	80094ce <OSTmr_Task+0x8a>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 80094c6:	69fb      	ldr	r3, [r7, #28]
 80094c8:	2202      	movs	r2, #2
 80094ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d005      	beq.n	80094e6 <OSTmr_Task+0xa2>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4611      	mov	r1, r2
 80094e2:	69f8      	ldr	r0, [r7, #28]
 80094e4:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1d4      	bne.n	800949a <OSTmr_Task+0x56>
        }
        OSSchedUnlock();
 80094f0:	f7fe f8aa 	bl	8007648 <OSSchedUnlock>
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 80094f4:	e7aa      	b.n	800944c <OSTmr_Task+0x8>
 80094f6:	bf00      	nop
 80094f8:	20001ba4 	.word	0x20001ba4
 80094fc:	200023a0 	.word	0x200023a0
 8009500:	24924925 	.word	0x24924925
 8009504:	20001b68 	.word	0x20001b68

08009508 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	bc80      	pop	{r7}
 8009518:	4770      	bx	lr

0800951a <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr

0800952c <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0
}
 8009530:	bf00      	nop
 8009532:	46bd      	mov	sp, r7
 8009534:	bc80      	pop	{r7}
 8009536:	4770      	bx	lr

08009538 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8009538:	b480      	push	{r7}
 800953a:	af00      	add	r7, sp, #0
}
 800953c:	bf00      	nop
 800953e:	46bd      	mov	sp, r7
 8009540:	bc80      	pop	{r7}
 8009542:	4770      	bx	lr

08009544 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr

08009556 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8009556:	b480      	push	{r7}
 8009558:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 800955a:	bf00      	nop
 800955c:	46bd      	mov	sp, r7
 800955e:	bc80      	pop	{r7}
 8009560:	4770      	bx	lr

08009562 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 8009562:	b480      	push	{r7}
 8009564:	b083      	sub	sp, #12
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	bc80      	pop	{r7}
 8009572:	4770      	bx	lr

08009574 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 8009578:	bf00      	nop
 800957a:	46bd      	mov	sp, r7
 800957c:	bc80      	pop	{r7}
 800957e:	4770      	bx	lr

08009580 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	460b      	mov	r3, r1
 800958a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	7c1b      	ldrb	r3, [r3, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d115      	bne.n	80095c4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009598:	f44f 7300 	mov.w	r3, #512	; 0x200
 800959c:	2202      	movs	r2, #2
 800959e:	2181      	movs	r1, #129	; 0x81
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f001 fe30 	bl	800b206 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80095ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095b0:	2202      	movs	r2, #2
 80095b2:	2101      	movs	r1, #1
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f001 fe26 	bl	800b206 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80095c2:	e012      	b.n	80095ea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80095c4:	2340      	movs	r3, #64	; 0x40
 80095c6:	2202      	movs	r2, #2
 80095c8:	2181      	movs	r1, #129	; 0x81
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 fe1b 	bl	800b206 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80095d6:	2340      	movs	r3, #64	; 0x40
 80095d8:	2202      	movs	r2, #2
 80095da:	2101      	movs	r1, #1
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 fe12 	bl	800b206 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095ea:	2308      	movs	r3, #8
 80095ec:	2203      	movs	r2, #3
 80095ee:	2182      	movs	r1, #130	; 0x82
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 fe08 	bl	800b206 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095fc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009600:	f001 ff28 	bl	800b454 <USBD_static_malloc>
 8009604:	4602      	mov	r2, r0
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009616:	2301      	movs	r3, #1
 8009618:	73fb      	strb	r3, [r7, #15]
 800961a:	e026      	b.n	800966a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009622:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2200      	movs	r2, #0
 8009632:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	2200      	movs	r2, #0
 800963a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7c1b      	ldrb	r3, [r3, #16]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800964c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009650:	2101      	movs	r1, #1
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fec8 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009658:	e007      	b.n	800966a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009660:	2340      	movs	r3, #64	; 0x40
 8009662:	2101      	movs	r1, #1
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 febf 	bl	800b3e8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009684:	2181      	movs	r1, #129	; 0x81
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 fde3 	bl	800b252 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009692:	2101      	movs	r1, #1
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 fddc 	bl	800b252 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80096a2:	2182      	movs	r1, #130	; 0x82
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 fdd4 	bl	800b252 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fece 	bl	800b46c <USBD_static_free>
    pdev->pClassData = NULL;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009708:	2b00      	cmp	r3, #0
 800970a:	d039      	beq.n	8009780 <USBD_CDC_Setup+0x9e>
 800970c:	2b20      	cmp	r3, #32
 800970e:	d17f      	bne.n	8009810 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	88db      	ldrh	r3, [r3, #6]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d029      	beq.n	800976c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	b25b      	sxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	da11      	bge.n	8009746 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800972e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009730:	683a      	ldr	r2, [r7, #0]
 8009732:	88d2      	ldrh	r2, [r2, #6]
 8009734:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009736:	6939      	ldr	r1, [r7, #16]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	88db      	ldrh	r3, [r3, #6]
 800973c:	461a      	mov	r2, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f001 f9d9 	bl	800aaf6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009744:	e06b      	b.n	800981e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	785a      	ldrb	r2, [r3, #1]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	88db      	ldrh	r3, [r3, #6]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800975c:	6939      	ldr	r1, [r7, #16]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88db      	ldrh	r3, [r3, #6]
 8009762:	461a      	mov	r2, r3
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f001 f9f4 	bl	800ab52 <USBD_CtlPrepareRx>
      break;
 800976a:	e058      	b.n	800981e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	7850      	ldrb	r0, [r2, #1]
 8009778:	2200      	movs	r2, #0
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	4798      	blx	r3
      break;
 800977e:	e04e      	b.n	800981e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	785b      	ldrb	r3, [r3, #1]
 8009784:	2b0b      	cmp	r3, #11
 8009786:	d02e      	beq.n	80097e6 <USBD_CDC_Setup+0x104>
 8009788:	2b0b      	cmp	r3, #11
 800978a:	dc38      	bgt.n	80097fe <USBD_CDC_Setup+0x11c>
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <USBD_CDC_Setup+0xb4>
 8009790:	2b0a      	cmp	r3, #10
 8009792:	d014      	beq.n	80097be <USBD_CDC_Setup+0xdc>
 8009794:	e033      	b.n	80097fe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800979c:	2b03      	cmp	r3, #3
 800979e:	d107      	bne.n	80097b0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80097a0:	f107 030c 	add.w	r3, r7, #12
 80097a4:	2202      	movs	r2, #2
 80097a6:	4619      	mov	r1, r3
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 f9a4 	bl	800aaf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097ae:	e02e      	b.n	800980e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f935 	bl	800aa22 <USBD_CtlError>
            ret = USBD_FAIL;
 80097b8:	2302      	movs	r3, #2
 80097ba:	75fb      	strb	r3, [r7, #23]
          break;
 80097bc:	e027      	b.n	800980e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d107      	bne.n	80097d8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80097c8:	f107 030f 	add.w	r3, r7, #15
 80097cc:	2201      	movs	r2, #1
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f001 f990 	bl	800aaf6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097d6:	e01a      	b.n	800980e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 f921 	bl	800aa22 <USBD_CtlError>
            ret = USBD_FAIL;
 80097e0:	2302      	movs	r3, #2
 80097e2:	75fb      	strb	r3, [r7, #23]
          break;
 80097e4:	e013      	b.n	800980e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d00d      	beq.n	800980c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f915 	bl	800aa22 <USBD_CtlError>
            ret = USBD_FAIL;
 80097f8:	2302      	movs	r3, #2
 80097fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097fc:	e006      	b.n	800980c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f001 f90e 	bl	800aa22 <USBD_CtlError>
          ret = USBD_FAIL;
 8009806:	2302      	movs	r3, #2
 8009808:	75fb      	strb	r3, [r7, #23]
          break;
 800980a:	e000      	b.n	800980e <USBD_CDC_Setup+0x12c>
          break;
 800980c:	bf00      	nop
      }
      break;
 800980e:	e006      	b.n	800981e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009810:	6839      	ldr	r1, [r7, #0]
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f001 f905 	bl	800aa22 <USBD_CtlError>
      ret = USBD_FAIL;
 8009818:	2302      	movs	r3, #2
 800981a:	75fb      	strb	r3, [r7, #23]
      break;
 800981c:	bf00      	nop
  }

  return ret;
 800981e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3718      	adds	r7, #24
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800983a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009842:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984a:	2b00      	cmp	r3, #0
 800984c:	d03a      	beq.n	80098c4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800984e:	78fa      	ldrb	r2, [r7, #3]
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	440b      	add	r3, r1
 800985c:	331c      	adds	r3, #28
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d029      	beq.n	80098b8 <USBD_CDC_DataIn+0x90>
 8009864:	78fa      	ldrb	r2, [r7, #3]
 8009866:	6879      	ldr	r1, [r7, #4]
 8009868:	4613      	mov	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	440b      	add	r3, r1
 8009872:	331c      	adds	r3, #28
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	78f9      	ldrb	r1, [r7, #3]
 8009878:	68b8      	ldr	r0, [r7, #8]
 800987a:	460b      	mov	r3, r1
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	00db      	lsls	r3, r3, #3
 8009882:	4403      	add	r3, r0
 8009884:	3338      	adds	r3, #56	; 0x38
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	fbb2 f1f3 	udiv	r1, r2, r3
 800988c:	fb03 f301 	mul.w	r3, r3, r1
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d110      	bne.n	80098b8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009896:	78fa      	ldrb	r2, [r7, #3]
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	331c      	adds	r3, #28
 80098a6:	2200      	movs	r2, #0
 80098a8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098aa:	78f9      	ldrb	r1, [r7, #3]
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fd76 	bl	800b3a2 <USBD_LL_Transmit>
 80098b6:	e003      	b.n	80098c0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80098c0:	2300      	movs	r3, #0
 80098c2:	e000      	b.n	80098c6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80098c4:	2302      	movs	r3, #2
  }
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b084      	sub	sp, #16
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	460b      	mov	r3, r1
 80098d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 fda1 	bl	800b42e <USBD_LL_GetRxDataSize>
 80098ec:	4602      	mov	r2, r0
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00d      	beq.n	800991a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009912:	4611      	mov	r1, r2
 8009914:	4798      	blx	r3

    return USBD_OK;
 8009916:	2300      	movs	r3, #0
 8009918:	e000      	b.n	800991c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800991a:	2302      	movs	r3, #2
  }
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009932:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800993a:	2b00      	cmp	r3, #0
 800993c:	d015      	beq.n	800996a <USBD_CDC_EP0_RxReady+0x46>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009944:	2bff      	cmp	r3, #255	; 0xff
 8009946:	d010      	beq.n	800996a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009956:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800995e:	b292      	uxth	r2, r2
 8009960:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800996a:	2300      	movs	r3, #0
}
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2243      	movs	r2, #67	; 0x43
 8009980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009982:	4b03      	ldr	r3, [pc, #12]	; (8009990 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009984:	4618      	mov	r0, r3
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	bc80      	pop	{r7}
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	20000190 	.word	0x20000190

08009994 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2243      	movs	r2, #67	; 0x43
 80099a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80099a2:	4b03      	ldr	r3, [pc, #12]	; (80099b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bc80      	pop	{r7}
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	2000014c 	.word	0x2000014c

080099b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2243      	movs	r2, #67	; 0x43
 80099c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80099c2:	4b03      	ldr	r3, [pc, #12]	; (80099d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	200001d4 	.word	0x200001d4

080099d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	220a      	movs	r2, #10
 80099e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80099e2:	4b03      	ldr	r3, [pc, #12]	; (80099f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bc80      	pop	{r7}
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	20000108 	.word	0x20000108

080099f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80099fe:	2302      	movs	r3, #2
 8009a00:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	683a      	ldr	r2, [r7, #0]
 8009a0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr

08009a20 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b087      	sub	sp, #28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a34:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a3e:	88fa      	ldrh	r2, [r7, #6]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bc80      	pop	{r7}
 8009a50:	4770      	bx	lr

08009a52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009a52:	b480      	push	{r7}
 8009a54:	b085      	sub	sp, #20
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a62:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	683a      	ldr	r2, [r7, #0]
 8009a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr

08009a78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d017      	beq.n	8009ac2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7c1b      	ldrb	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d109      	bne.n	8009aae <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f001 fc9e 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009aac:	e007      	b.n	8009abe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ab4:	2340      	movs	r3, #64	; 0x40
 8009ab6:	2101      	movs	r1, #1
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f001 fc95 	bl	800b3e8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e000      	b.n	8009ac4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009ac2:	2302      	movs	r3, #2
  }
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e01a      	b.n	8009b1a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	79fa      	ldrb	r2, [r7, #7]
 8009b10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f001 fb02 	bl	800b11c <USBD_LL_Init>

  return USBD_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b22:	b480      	push	{r7}
 8009b24:	b085      	sub	sp, #20
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d006      	beq.n	8009b44 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	683a      	ldr	r2, [r7, #0]
 8009b3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
 8009b42:	e001      	b.n	8009b48 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009b44:	2302      	movs	r3, #2
 8009b46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bc80      	pop	{r7}
 8009b52:	4770      	bx	lr

08009b54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 fb37 	bl	800b1d0 <USBD_LL_Start>

  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bc80      	pop	{r7}
 8009b7e:	4770      	bx	lr

08009b80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00c      	beq.n	8009bb4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	78fa      	ldrb	r2, [r7, #3]
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	78fa      	ldrb	r2, [r7, #3]
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	4798      	blx	r3

  return USBD_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009bf4:	6839      	ldr	r1, [r7, #0]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fed7 	bl	800a9aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c18:	f003 031f 	and.w	r3, r3, #31
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d016      	beq.n	8009c4e <USBD_LL_SetupStage+0x6a>
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d81c      	bhi.n	8009c5e <USBD_LL_SetupStage+0x7a>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <USBD_LL_SetupStage+0x4a>
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d008      	beq.n	8009c3e <USBD_LL_SetupStage+0x5a>
 8009c2c:	e017      	b.n	8009c5e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c34:	4619      	mov	r1, r3
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 f9ca 	bl	8009fd0 <USBD_StdDevReq>
      break;
 8009c3c:	e01a      	b.n	8009c74 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 fa2c 	bl	800a0a4 <USBD_StdItfReq>
      break;
 8009c4c:	e012      	b.n	8009c74 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 fa6c 	bl	800a134 <USBD_StdEPReq>
      break;
 8009c5c:	e00a      	b.n	8009c74 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009c64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f001 fb0f 	bl	800b290 <USBD_LL_StallEP>
      break;
 8009c72:	bf00      	nop
  }

  return USBD_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b086      	sub	sp, #24
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	460b      	mov	r3, r1
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c8c:	7afb      	ldrb	r3, [r7, #11]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d14b      	bne.n	8009d2a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009c98:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ca0:	2b03      	cmp	r3, #3
 8009ca2:	d134      	bne.n	8009d0e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d919      	bls.n	8009ce4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	691b      	ldr	r3, [r3, #16]
 8009cb8:	1ad2      	subs	r2, r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d203      	bcs.n	8009cd2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	e002      	b.n	8009cd8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 ff56 	bl	800ab8e <USBD_CtlContinueRx>
 8009ce2:	e038      	b.n	8009d56 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00a      	beq.n	8009d06 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009cf6:	2b03      	cmp	r3, #3
 8009cf8:	d105      	bne.n	8009d06 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009d06:	68f8      	ldr	r0, [r7, #12]
 8009d08:	f000 ff53 	bl	800abb2 <USBD_CtlSendStatus>
 8009d0c:	e023      	b.n	8009d56 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d14:	2b05      	cmp	r3, #5
 8009d16:	d11e      	bne.n	8009d56 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009d20:	2100      	movs	r1, #0
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f001 fab4 	bl	800b290 <USBD_LL_StallEP>
 8009d28:	e015      	b.n	8009d56 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00d      	beq.n	8009d52 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d3c:	2b03      	cmp	r3, #3
 8009d3e:	d108      	bne.n	8009d52 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	7afa      	ldrb	r2, [r7, #11]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	4798      	blx	r3
 8009d50:	e001      	b.n	8009d56 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d52:	2302      	movs	r3, #2
 8009d54:	e000      	b.n	8009d58 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3718      	adds	r7, #24
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	460b      	mov	r3, r1
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d6e:	7afb      	ldrb	r3, [r7, #11]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d17f      	bne.n	8009e74 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3314      	adds	r3, #20
 8009d78:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d15c      	bne.n	8009e3e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	68da      	ldr	r2, [r3, #12]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d915      	bls.n	8009dbc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	691b      	ldr	r3, [r3, #16]
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	68db      	ldr	r3, [r3, #12]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fec0 	bl	800ab2e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dae:	2300      	movs	r3, #0
 8009db0:	2200      	movs	r2, #0
 8009db2:	2100      	movs	r1, #0
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f001 fb17 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009dba:	e04e      	b.n	8009e5a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	6912      	ldr	r2, [r2, #16]
 8009dc4:	fbb3 f1f2 	udiv	r1, r3, r2
 8009dc8:	fb02 f201 	mul.w	r2, r2, r1
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d11c      	bne.n	8009e0c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	689a      	ldr	r2, [r3, #8]
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d316      	bcc.n	8009e0c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	689a      	ldr	r2, [r3, #8]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d20f      	bcs.n	8009e0c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009dec:	2200      	movs	r2, #0
 8009dee:	2100      	movs	r1, #0
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f000 fe9c 	bl	800ab2e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dfe:	2300      	movs	r3, #0
 8009e00:	2200      	movs	r2, #0
 8009e02:	2100      	movs	r1, #0
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f001 faef 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009e0a:	e026      	b.n	8009e5a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00a      	beq.n	8009e2e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d105      	bne.n	8009e2e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009e2e:	2180      	movs	r1, #128	; 0x80
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f001 fa2d 	bl	800b290 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 fece 	bl	800abd8 <USBD_CtlReceiveStatus>
 8009e3c:	e00d      	b.n	8009e5a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e44:	2b04      	cmp	r3, #4
 8009e46:	d004      	beq.n	8009e52 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d103      	bne.n	8009e5a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009e52:	2180      	movs	r1, #128	; 0x80
 8009e54:	68f8      	ldr	r0, [r7, #12]
 8009e56:	f001 fa1b 	bl	800b290 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d11d      	bne.n	8009ea0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009e64:	68f8      	ldr	r0, [r7, #12]
 8009e66:	f7ff fe81 	bl	8009b6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e72:	e015      	b.n	8009ea0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e7a:	695b      	ldr	r3, [r3, #20]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00d      	beq.n	8009e9c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d108      	bne.n	8009e9c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e90:	695b      	ldr	r3, [r3, #20]
 8009e92:	7afa      	ldrb	r2, [r7, #11]
 8009e94:	4611      	mov	r1, r2
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	4798      	blx	r3
 8009e9a:	e001      	b.n	8009ea0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e000      	b.n	8009ea2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3718      	adds	r7, #24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009eb2:	2340      	movs	r3, #64	; 0x40
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f001 f9a4 	bl	800b206 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2240      	movs	r2, #64	; 0x40
 8009eca:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ece:	2340      	movs	r3, #64	; 0x40
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	2180      	movs	r1, #128	; 0x80
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f001 f996 	bl	800b206 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2240      	movs	r2, #64	; 0x40
 8009ee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2200      	movs	r2, #0
 8009efa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d009      	beq.n	8009f22 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	6852      	ldr	r2, [r2, #4]
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	4611      	mov	r1, r2
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	4798      	blx	r3
  }

  return USBD_OK;
 8009f22:	2300      	movs	r3, #0
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}

08009f2c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	460b      	mov	r3, r1
 8009f36:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	78fa      	ldrb	r2, [r7, #3]
 8009f3c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bc80      	pop	{r7}
 8009f48:	4770      	bx	lr

08009f4a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b083      	sub	sp, #12
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2204      	movs	r2, #4
 8009f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr

08009f72 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f72:	b480      	push	{r7}
 8009f74:	b083      	sub	sp, #12
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f80:	2b04      	cmp	r3, #4
 8009f82:	d105      	bne.n	8009f90 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bc80      	pop	{r7}
 8009f9a:	4770      	bx	lr

08009f9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	d10b      	bne.n	8009fc6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb4:	69db      	ldr	r3, [r3, #28]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b084      	sub	sp, #16
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fe6:	2b40      	cmp	r3, #64	; 0x40
 8009fe8:	d005      	beq.n	8009ff6 <USBD_StdDevReq+0x26>
 8009fea:	2b40      	cmp	r3, #64	; 0x40
 8009fec:	d84f      	bhi.n	800a08e <USBD_StdDevReq+0xbe>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d009      	beq.n	800a006 <USBD_StdDevReq+0x36>
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d14b      	bne.n	800a08e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
      break;
 800a004:	e048      	b.n	800a098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	785b      	ldrb	r3, [r3, #1]
 800a00a:	2b09      	cmp	r3, #9
 800a00c:	d839      	bhi.n	800a082 <USBD_StdDevReq+0xb2>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <USBD_StdDevReq+0x44>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a065 	.word	0x0800a065
 800a018:	0800a079 	.word	0x0800a079
 800a01c:	0800a083 	.word	0x0800a083
 800a020:	0800a06f 	.word	0x0800a06f
 800a024:	0800a083 	.word	0x0800a083
 800a028:	0800a047 	.word	0x0800a047
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a083 	.word	0x0800a083
 800a034:	0800a05b 	.word	0x0800a05b
 800a038:	0800a051 	.word	0x0800a051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f9dc 	bl	800a3fc <USBD_GetDescriptor>
          break;
 800a044:	e022      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a046:	6839      	ldr	r1, [r7, #0]
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 fb3f 	bl	800a6cc <USBD_SetAddress>
          break;
 800a04e:	e01d      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fb7e 	bl	800a754 <USBD_SetConfig>
          break;
 800a058:	e018      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc07 	bl	800a870 <USBD_GetConfig>
          break;
 800a062:	e013      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fc37 	bl	800a8da <USBD_GetStatus>
          break;
 800a06c:	e00e      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fc65 	bl	800a940 <USBD_SetFeature>
          break;
 800a076:	e009      	b.n	800a08c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a078:	6839      	ldr	r1, [r7, #0]
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 fc74 	bl	800a968 <USBD_ClrFeature>
          break;
 800a080:	e004      	b.n	800a08c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a082:	6839      	ldr	r1, [r7, #0]
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f000 fccc 	bl	800aa22 <USBD_CtlError>
          break;
 800a08a:	bf00      	nop
      }
      break;
 800a08c:	e004      	b.n	800a098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a08e:	6839      	ldr	r1, [r7, #0]
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	f000 fcc6 	bl	800aa22 <USBD_CtlError>
      break;
 800a096:	bf00      	nop
  }

  return ret;
 800a098:	7bfb      	ldrb	r3, [r7, #15]
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3710      	adds	r7, #16
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop

0800a0a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b084      	sub	sp, #16
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0ba:	2b40      	cmp	r3, #64	; 0x40
 800a0bc:	d005      	beq.n	800a0ca <USBD_StdItfReq+0x26>
 800a0be:	2b40      	cmp	r3, #64	; 0x40
 800a0c0:	d82e      	bhi.n	800a120 <USBD_StdItfReq+0x7c>
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <USBD_StdItfReq+0x26>
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d12a      	bne.n	800a120 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d81d      	bhi.n	800a112 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	889b      	ldrh	r3, [r3, #4]
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d813      	bhi.n	800a108 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	88db      	ldrh	r3, [r3, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d110      	bne.n	800a11c <USBD_StdItfReq+0x78>
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10d      	bne.n	800a11c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fd56 	bl	800abb2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a106:	e009      	b.n	800a11c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 fc89 	bl	800aa22 <USBD_CtlError>
          break;
 800a110:	e004      	b.n	800a11c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fc84 	bl	800aa22 <USBD_CtlError>
          break;
 800a11a:	e000      	b.n	800a11e <USBD_StdItfReq+0x7a>
          break;
 800a11c:	bf00      	nop
      }
      break;
 800a11e:	e004      	b.n	800a12a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fc7d 	bl	800aa22 <USBD_CtlError>
      break;
 800a128:	bf00      	nop
  }

  return USBD_OK;
 800a12a:	2300      	movs	r3, #0
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	889b      	ldrh	r3, [r3, #4]
 800a146:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a150:	2b40      	cmp	r3, #64	; 0x40
 800a152:	d007      	beq.n	800a164 <USBD_StdEPReq+0x30>
 800a154:	2b40      	cmp	r3, #64	; 0x40
 800a156:	f200 8146 	bhi.w	800a3e6 <USBD_StdEPReq+0x2b2>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <USBD_StdEPReq+0x40>
 800a15e:	2b20      	cmp	r3, #32
 800a160:	f040 8141 	bne.w	800a3e6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
      break;
 800a172:	e13d      	b.n	800a3f0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	d10a      	bne.n	800a196 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	6839      	ldr	r1, [r7, #0]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	4798      	blx	r3
 800a18e:	4603      	mov	r3, r0
 800a190:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a192:	7bfb      	ldrb	r3, [r7, #15]
 800a194:	e12d      	b.n	800a3f2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	785b      	ldrb	r3, [r3, #1]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d007      	beq.n	800a1ae <USBD_StdEPReq+0x7a>
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	f300 811b 	bgt.w	800a3da <USBD_StdEPReq+0x2a6>
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d072      	beq.n	800a28e <USBD_StdEPReq+0x15a>
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d03a      	beq.n	800a222 <USBD_StdEPReq+0xee>
 800a1ac:	e115      	b.n	800a3da <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b4:	2b02      	cmp	r3, #2
 800a1b6:	d002      	beq.n	800a1be <USBD_StdEPReq+0x8a>
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d015      	beq.n	800a1e8 <USBD_StdEPReq+0xb4>
 800a1bc:	e02b      	b.n	800a216 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00c      	beq.n	800a1de <USBD_StdEPReq+0xaa>
 800a1c4:	7bbb      	ldrb	r3, [r7, #14]
 800a1c6:	2b80      	cmp	r3, #128	; 0x80
 800a1c8:	d009      	beq.n	800a1de <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 f85e 	bl	800b290 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a1d4:	2180      	movs	r1, #128	; 0x80
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f001 f85a 	bl	800b290 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a1dc:	e020      	b.n	800a220 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fc1e 	bl	800aa22 <USBD_CtlError>
              break;
 800a1e6:	e01b      	b.n	800a220 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	885b      	ldrh	r3, [r3, #2]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10e      	bne.n	800a20e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00b      	beq.n	800a20e <USBD_StdEPReq+0xda>
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	2b80      	cmp	r3, #128	; 0x80
 800a1fa:	d008      	beq.n	800a20e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	88db      	ldrh	r3, [r3, #6]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d104      	bne.n	800a20e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 f841 	bl	800b290 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fccf 	bl	800abb2 <USBD_CtlSendStatus>

              break;
 800a214:	e004      	b.n	800a220 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a216:	6839      	ldr	r1, [r7, #0]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f000 fc02 	bl	800aa22 <USBD_CtlError>
              break;
 800a21e:	bf00      	nop
          }
          break;
 800a220:	e0e0      	b.n	800a3e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d002      	beq.n	800a232 <USBD_StdEPReq+0xfe>
 800a22c:	2b03      	cmp	r3, #3
 800a22e:	d015      	beq.n	800a25c <USBD_StdEPReq+0x128>
 800a230:	e026      	b.n	800a280 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00c      	beq.n	800a252 <USBD_StdEPReq+0x11e>
 800a238:	7bbb      	ldrb	r3, [r7, #14]
 800a23a:	2b80      	cmp	r3, #128	; 0x80
 800a23c:	d009      	beq.n	800a252 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a23e:	7bbb      	ldrb	r3, [r7, #14]
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f001 f824 	bl	800b290 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a248:	2180      	movs	r1, #128	; 0x80
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f001 f820 	bl	800b290 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a250:	e01c      	b.n	800a28c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fbe4 	bl	800aa22 <USBD_CtlError>
              break;
 800a25a:	e017      	b.n	800a28c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	885b      	ldrh	r3, [r3, #2]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d112      	bne.n	800a28a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a264:	7bbb      	ldrb	r3, [r7, #14]
 800a266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d004      	beq.n	800a278 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a26e:	7bbb      	ldrb	r3, [r7, #14]
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f82b 	bl	800b2ce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fc9a 	bl	800abb2 <USBD_CtlSendStatus>
              }
              break;
 800a27e:	e004      	b.n	800a28a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fbcd 	bl	800aa22 <USBD_CtlError>
              break;
 800a288:	e000      	b.n	800a28c <USBD_StdEPReq+0x158>
              break;
 800a28a:	bf00      	nop
          }
          break;
 800a28c:	e0aa      	b.n	800a3e4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a294:	2b02      	cmp	r3, #2
 800a296:	d002      	beq.n	800a29e <USBD_StdEPReq+0x16a>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d032      	beq.n	800a302 <USBD_StdEPReq+0x1ce>
 800a29c:	e097      	b.n	800a3ce <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a29e:	7bbb      	ldrb	r3, [r7, #14]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <USBD_StdEPReq+0x180>
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b80      	cmp	r3, #128	; 0x80
 800a2a8:	d004      	beq.n	800a2b4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a2aa:	6839      	ldr	r1, [r7, #0]
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 fbb8 	bl	800aa22 <USBD_CtlError>
                break;
 800a2b2:	e091      	b.n	800a3d8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da0b      	bge.n	800a2d4 <USBD_StdEPReq+0x1a0>
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	3310      	adds	r3, #16
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	e00b      	b.n	800a2ec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2da:	4613      	mov	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2202      	movs	r2, #2
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 fbfb 	bl	800aaf6 <USBD_CtlSendData>
              break;
 800a300:	e06a      	b.n	800a3d8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a306:	2b00      	cmp	r3, #0
 800a308:	da11      	bge.n	800a32e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a30a:	7bbb      	ldrb	r3, [r7, #14]
 800a30c:	f003 020f 	and.w	r2, r3, #15
 800a310:	6879      	ldr	r1, [r7, #4]
 800a312:	4613      	mov	r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	4413      	add	r3, r2
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	440b      	add	r3, r1
 800a31c:	3318      	adds	r3, #24
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d117      	bne.n	800a354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a324:	6839      	ldr	r1, [r7, #0]
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fb7b 	bl	800aa22 <USBD_CtlError>
                  break;
 800a32c:	e054      	b.n	800a3d8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	f003 020f 	and.w	r2, r3, #15
 800a334:	6879      	ldr	r1, [r7, #4]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	440b      	add	r3, r1
 800a340:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 fb68 	bl	800aa22 <USBD_CtlError>
                  break;
 800a352:	e041      	b.n	800a3d8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a354:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da0b      	bge.n	800a374 <USBD_StdEPReq+0x240>
 800a35c:	7bbb      	ldrb	r3, [r7, #14]
 800a35e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a362:	4613      	mov	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	4413      	add	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	3310      	adds	r3, #16
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	3304      	adds	r3, #4
 800a372:	e00b      	b.n	800a38c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a374:	7bbb      	ldrb	r3, [r7, #14]
 800a376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4413      	add	r3, r2
 800a38a:	3304      	adds	r3, #4
 800a38c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <USBD_StdEPReq+0x266>
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	2b80      	cmp	r3, #128	; 0x80
 800a398:	d103      	bne.n	800a3a2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	2200      	movs	r2, #0
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	e00e      	b.n	800a3c0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 ffb0 	bl	800b30c <USBD_LL_IsStallEP>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e002      	b.n	800a3c0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fb95 	bl	800aaf6 <USBD_CtlSendData>
              break;
 800a3cc:	e004      	b.n	800a3d8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fb26 	bl	800aa22 <USBD_CtlError>
              break;
 800a3d6:	bf00      	nop
          }
          break;
 800a3d8:	e004      	b.n	800a3e4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fb20 	bl	800aa22 <USBD_CtlError>
          break;
 800a3e2:	bf00      	nop
      }
      break;
 800a3e4:	e004      	b.n	800a3f0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fb1a 	bl	800aa22 <USBD_CtlError>
      break;
 800a3ee:	bf00      	nop
  }

  return ret;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	885b      	ldrh	r3, [r3, #2]
 800a416:	0a1b      	lsrs	r3, r3, #8
 800a418:	b29b      	uxth	r3, r3
 800a41a:	3b01      	subs	r3, #1
 800a41c:	2b06      	cmp	r3, #6
 800a41e:	f200 8128 	bhi.w	800a672 <USBD_GetDescriptor+0x276>
 800a422:	a201      	add	r2, pc, #4	; (adr r2, 800a428 <USBD_GetDescriptor+0x2c>)
 800a424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a428:	0800a445 	.word	0x0800a445
 800a42c:	0800a45d 	.word	0x0800a45d
 800a430:	0800a49d 	.word	0x0800a49d
 800a434:	0800a673 	.word	0x0800a673
 800a438:	0800a673 	.word	0x0800a673
 800a43c:	0800a613 	.word	0x0800a613
 800a440:	0800a63f 	.word	0x0800a63f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	7c12      	ldrb	r2, [r2, #16]
 800a450:	f107 0108 	add.w	r1, r7, #8
 800a454:	4610      	mov	r0, r2
 800a456:	4798      	blx	r3
 800a458:	60f8      	str	r0, [r7, #12]
      break;
 800a45a:	e112      	b.n	800a682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7c1b      	ldrb	r3, [r3, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10d      	bne.n	800a480 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46c:	f107 0208 	add.w	r2, r7, #8
 800a470:	4610      	mov	r0, r2
 800a472:	4798      	blx	r3
 800a474:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	2202      	movs	r2, #2
 800a47c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a47e:	e100      	b.n	800a682 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a488:	f107 0208 	add.w	r2, r7, #8
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
 800a490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	3301      	adds	r3, #1
 800a496:	2202      	movs	r2, #2
 800a498:	701a      	strb	r2, [r3, #0]
      break;
 800a49a:	e0f2      	b.n	800a682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	885b      	ldrh	r3, [r3, #2]
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	f200 80ac 	bhi.w	800a600 <USBD_GetDescriptor+0x204>
 800a4a8:	a201      	add	r2, pc, #4	; (adr r2, 800a4b0 <USBD_GetDescriptor+0xb4>)
 800a4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ae:	bf00      	nop
 800a4b0:	0800a4c9 	.word	0x0800a4c9
 800a4b4:	0800a4fd 	.word	0x0800a4fd
 800a4b8:	0800a531 	.word	0x0800a531
 800a4bc:	0800a565 	.word	0x0800a565
 800a4c0:	0800a599 	.word	0x0800a599
 800a4c4:	0800a5cd 	.word	0x0800a5cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	687a      	ldr	r2, [r7, #4]
 800a4de:	7c12      	ldrb	r2, [r2, #16]
 800a4e0:	f107 0108 	add.w	r1, r7, #8
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ea:	e091      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4ec:	6839      	ldr	r1, [r7, #0]
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa97 	bl	800aa22 <USBD_CtlError>
            err++;
 800a4f4:	7afb      	ldrb	r3, [r7, #11]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800a4fa:	e089      	b.n	800a610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d00b      	beq.n	800a520 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	7c12      	ldrb	r2, [r2, #16]
 800a514:	f107 0108 	add.w	r1, r7, #8
 800a518:	4610      	mov	r0, r2
 800a51a:	4798      	blx	r3
 800a51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a51e:	e077      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fa7d 	bl	800aa22 <USBD_CtlError>
            err++;
 800a528:	7afb      	ldrb	r3, [r7, #11]
 800a52a:	3301      	adds	r3, #1
 800a52c:	72fb      	strb	r3, [r7, #11]
          break;
 800a52e:	e06f      	b.n	800a610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	7c12      	ldrb	r2, [r2, #16]
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a552:	e05d      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fa63 	bl	800aa22 <USBD_CtlError>
            err++;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	3301      	adds	r3, #1
 800a560:	72fb      	strb	r3, [r7, #11]
          break;
 800a562:	e055      	b.n	800a610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	7c12      	ldrb	r2, [r2, #16]
 800a57c:	f107 0108 	add.w	r1, r7, #8
 800a580:	4610      	mov	r0, r2
 800a582:	4798      	blx	r3
 800a584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a586:	e043      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a588:	6839      	ldr	r1, [r7, #0]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fa49 	bl	800aa22 <USBD_CtlError>
            err++;
 800a590:	7afb      	ldrb	r3, [r7, #11]
 800a592:	3301      	adds	r3, #1
 800a594:	72fb      	strb	r3, [r7, #11]
          break;
 800a596:	e03b      	b.n	800a610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00b      	beq.n	800a5bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5aa:	695b      	ldr	r3, [r3, #20]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	7c12      	ldrb	r2, [r2, #16]
 800a5b0:	f107 0108 	add.w	r1, r7, #8
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4798      	blx	r3
 800a5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ba:	e029      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5bc:	6839      	ldr	r1, [r7, #0]
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 fa2f 	bl	800aa22 <USBD_CtlError>
            err++;
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a5ca:	e021      	b.n	800a610 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5d2:	699b      	ldr	r3, [r3, #24]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a5de:	699b      	ldr	r3, [r3, #24]
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	7c12      	ldrb	r2, [r2, #16]
 800a5e4:	f107 0108 	add.w	r1, r7, #8
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	4798      	blx	r3
 800a5ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a5ee:	e00f      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a5f0:	6839      	ldr	r1, [r7, #0]
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f000 fa15 	bl	800aa22 <USBD_CtlError>
            err++;
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a5fe:	e007      	b.n	800a610 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fa0d 	bl	800aa22 <USBD_CtlError>
          err++;
 800a608:	7afb      	ldrb	r3, [r7, #11]
 800a60a:	3301      	adds	r3, #1
 800a60c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a60e:	e038      	b.n	800a682 <USBD_GetDescriptor+0x286>
 800a610:	e037      	b.n	800a682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	7c1b      	ldrb	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d109      	bne.n	800a62e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a622:	f107 0208 	add.w	r2, r7, #8
 800a626:	4610      	mov	r0, r2
 800a628:	4798      	blx	r3
 800a62a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a62c:	e029      	b.n	800a682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f9f6 	bl	800aa22 <USBD_CtlError>
        err++;
 800a636:	7afb      	ldrb	r3, [r7, #11]
 800a638:	3301      	adds	r3, #1
 800a63a:	72fb      	strb	r3, [r7, #11]
      break;
 800a63c:	e021      	b.n	800a682 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	7c1b      	ldrb	r3, [r3, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d10d      	bne.n	800a662 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a64e:	f107 0208 	add.w	r2, r7, #8
 800a652:	4610      	mov	r0, r2
 800a654:	4798      	blx	r3
 800a656:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3301      	adds	r3, #1
 800a65c:	2207      	movs	r2, #7
 800a65e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a660:	e00f      	b.n	800a682 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f9dc 	bl	800aa22 <USBD_CtlError>
        err++;
 800a66a:	7afb      	ldrb	r3, [r7, #11]
 800a66c:	3301      	adds	r3, #1
 800a66e:	72fb      	strb	r3, [r7, #11]
      break;
 800a670:	e007      	b.n	800a682 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f9d4 	bl	800aa22 <USBD_CtlError>
      err++;
 800a67a:	7afb      	ldrb	r3, [r7, #11]
 800a67c:	3301      	adds	r3, #1
 800a67e:	72fb      	strb	r3, [r7, #11]
      break;
 800a680:	bf00      	nop
  }

  if (err != 0U)
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d11c      	bne.n	800a6c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a688:	893b      	ldrh	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d011      	beq.n	800a6b2 <USBD_GetDescriptor+0x2b6>
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	88db      	ldrh	r3, [r3, #6]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00d      	beq.n	800a6b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	88da      	ldrh	r2, [r3, #6]
 800a69a:	893b      	ldrh	r3, [r7, #8]
 800a69c:	4293      	cmp	r3, r2
 800a69e:	bf28      	it	cs
 800a6a0:	4613      	movcs	r3, r2
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a6a6:	893b      	ldrh	r3, [r7, #8]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68f9      	ldr	r1, [r7, #12]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa22 	bl	800aaf6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	88db      	ldrh	r3, [r3, #6]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d104      	bne.n	800a6c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fa79 	bl	800abb2 <USBD_CtlSendStatus>
 800a6c0:	e000      	b.n	800a6c4 <USBD_GetDescriptor+0x2c8>
    return;
 800a6c2:	bf00      	nop
    }
  }
}
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop

0800a6cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	889b      	ldrh	r3, [r3, #4]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d130      	bne.n	800a740 <USBD_SetAddress+0x74>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	88db      	ldrh	r3, [r3, #6]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d12c      	bne.n	800a740 <USBD_SetAddress+0x74>
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	885b      	ldrh	r3, [r3, #2]
 800a6ea:	2b7f      	cmp	r3, #127	; 0x7f
 800a6ec:	d828      	bhi.n	800a740 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	885b      	ldrh	r3, [r3, #2]
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a700:	2b03      	cmp	r3, #3
 800a702:	d104      	bne.n	800a70e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f000 f98b 	bl	800aa22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70c:	e01d      	b.n	800a74a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7bfa      	ldrb	r2, [r7, #15]
 800a712:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a716:	7bfb      	ldrb	r3, [r7, #15]
 800a718:	4619      	mov	r1, r3
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fe22 	bl	800b364 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fa46 	bl	800abb2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a726:	7bfb      	ldrb	r3, [r7, #15]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d004      	beq.n	800a736 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2202      	movs	r2, #2
 800a730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a734:	e009      	b.n	800a74a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a73e:	e004      	b.n	800a74a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a740:	6839      	ldr	r1, [r7, #0]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 f96d 	bl	800aa22 <USBD_CtlError>
  }
}
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
 800a75c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	885b      	ldrh	r3, [r3, #2]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	4b41      	ldr	r3, [pc, #260]	; (800a86c <USBD_SetConfig+0x118>)
 800a766:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a768:	4b40      	ldr	r3, [pc, #256]	; (800a86c <USBD_SetConfig+0x118>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d904      	bls.n	800a77a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f955 	bl	800aa22 <USBD_CtlError>
 800a778:	e075      	b.n	800a866 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a780:	2b02      	cmp	r3, #2
 800a782:	d002      	beq.n	800a78a <USBD_SetConfig+0x36>
 800a784:	2b03      	cmp	r3, #3
 800a786:	d023      	beq.n	800a7d0 <USBD_SetConfig+0x7c>
 800a788:	e062      	b.n	800a850 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a78a:	4b38      	ldr	r3, [pc, #224]	; (800a86c <USBD_SetConfig+0x118>)
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d01a      	beq.n	800a7c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a792:	4b36      	ldr	r3, [pc, #216]	; (800a86c <USBD_SetConfig+0x118>)
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2203      	movs	r2, #3
 800a7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a7a4:	4b31      	ldr	r3, [pc, #196]	; (800a86c <USBD_SetConfig+0x118>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	4619      	mov	r1, r3
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f7ff f9e8 	bl	8009b80 <USBD_SetClassConfig>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d104      	bne.n	800a7c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a7b6:	6839      	ldr	r1, [r7, #0]
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f000 f932 	bl	800aa22 <USBD_CtlError>
            return;
 800a7be:	e052      	b.n	800a866 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f9f6 	bl	800abb2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7c6:	e04e      	b.n	800a866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f000 f9f2 	bl	800abb2 <USBD_CtlSendStatus>
        break;
 800a7ce:	e04a      	b.n	800a866 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a7d0:	4b26      	ldr	r3, [pc, #152]	; (800a86c <USBD_SetConfig+0x118>)
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d112      	bne.n	800a7fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a7e0:	4b22      	ldr	r3, [pc, #136]	; (800a86c <USBD_SetConfig+0x118>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a7ea:	4b20      	ldr	r3, [pc, #128]	; (800a86c <USBD_SetConfig+0x118>)
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff f9e4 	bl	8009bbe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f9db 	bl	800abb2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a7fc:	e033      	b.n	800a866 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a7fe:	4b1b      	ldr	r3, [pc, #108]	; (800a86c <USBD_SetConfig+0x118>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	461a      	mov	r2, r3
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d01d      	beq.n	800a848 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	b2db      	uxtb	r3, r3
 800a812:	4619      	mov	r1, r3
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f7ff f9d2 	bl	8009bbe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a81a:	4b14      	ldr	r3, [pc, #80]	; (800a86c <USBD_SetConfig+0x118>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a824:	4b11      	ldr	r3, [pc, #68]	; (800a86c <USBD_SetConfig+0x118>)
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f7ff f9a8 	bl	8009b80 <USBD_SetClassConfig>
 800a830:	4603      	mov	r3, r0
 800a832:	2b02      	cmp	r3, #2
 800a834:	d104      	bne.n	800a840 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f8f2 	bl	800aa22 <USBD_CtlError>
            return;
 800a83e:	e012      	b.n	800a866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f9b6 	bl	800abb2 <USBD_CtlSendStatus>
        break;
 800a846:	e00e      	b.n	800a866 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f9b2 	bl	800abb2 <USBD_CtlSendStatus>
        break;
 800a84e:	e00a      	b.n	800a866 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f8e5 	bl	800aa22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a858:	4b04      	ldr	r3, [pc, #16]	; (800a86c <USBD_SetConfig+0x118>)
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	4619      	mov	r1, r3
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7ff f9ad 	bl	8009bbe <USBD_ClrClassConfig>
        break;
 800a864:	bf00      	nop
    }
  }
}
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	200010aa 	.word	0x200010aa

0800a870 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	88db      	ldrh	r3, [r3, #6]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d004      	beq.n	800a88c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a882:	6839      	ldr	r1, [r7, #0]
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f8cc 	bl	800aa22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a88a:	e022      	b.n	800a8d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a892:	2b02      	cmp	r3, #2
 800a894:	dc02      	bgt.n	800a89c <USBD_GetConfig+0x2c>
 800a896:	2b00      	cmp	r3, #0
 800a898:	dc03      	bgt.n	800a8a2 <USBD_GetConfig+0x32>
 800a89a:	e015      	b.n	800a8c8 <USBD_GetConfig+0x58>
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d00b      	beq.n	800a8b8 <USBD_GetConfig+0x48>
 800a8a0:	e012      	b.n	800a8c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3308      	adds	r3, #8
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 f920 	bl	800aaf6 <USBD_CtlSendData>
        break;
 800a8b6:	e00c      	b.n	800a8d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3304      	adds	r3, #4
 800a8bc:	2201      	movs	r2, #1
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f918 	bl	800aaf6 <USBD_CtlSendData>
        break;
 800a8c6:	e004      	b.n	800a8d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a8c8:	6839      	ldr	r1, [r7, #0]
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f8a9 	bl	800aa22 <USBD_CtlError>
        break;
 800a8d0:	bf00      	nop
}
 800a8d2:	bf00      	nop
 800a8d4:	3708      	adds	r7, #8
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d81e      	bhi.n	800a92e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	88db      	ldrh	r3, [r3, #6]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d004      	beq.n	800a902 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a8f8:	6839      	ldr	r1, [r7, #0]
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f891 	bl	800aa22 <USBD_CtlError>
        break;
 800a900:	e01a      	b.n	800a938 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2201      	movs	r2, #1
 800a906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f043 0202 	orr.w	r2, r3, #2
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	330c      	adds	r3, #12
 800a922:	2202      	movs	r2, #2
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 f8e5 	bl	800aaf6 <USBD_CtlSendData>
      break;
 800a92c:	e004      	b.n	800a938 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 f876 	bl	800aa22 <USBD_CtlError>
      break;
 800a936:	bf00      	nop
  }
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	885b      	ldrh	r3, [r3, #2]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d106      	bne.n	800a960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f929 	bl	800abb2 <USBD_CtlSendStatus>
  }
}
 800a960:	bf00      	nop
 800a962:	3708      	adds	r7, #8
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a978:	3b01      	subs	r3, #1
 800a97a:	2b02      	cmp	r3, #2
 800a97c:	d80b      	bhi.n	800a996 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	885b      	ldrh	r3, [r3, #2]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d10c      	bne.n	800a9a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f90f 	bl	800abb2 <USBD_CtlSendStatus>
      }
      break;
 800a994:	e004      	b.n	800a9a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a996:	6839      	ldr	r1, [r7, #0]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 f842 	bl	800aa22 <USBD_CtlError>
      break;
 800a99e:	e000      	b.n	800a9a2 <USBD_ClrFeature+0x3a>
      break;
 800a9a0:	bf00      	nop
  }
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781a      	ldrb	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	785a      	ldrb	r2, [r3, #1]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	3302      	adds	r3, #2
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	3303      	adds	r3, #3
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	021b      	lsls	r3, r3, #8
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4413      	add	r3, r2
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	3305      	adds	r3, #5
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	4413      	add	r3, r2
 800a9f6:	b29a      	uxth	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	3306      	adds	r3, #6
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	3307      	adds	r3, #7
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4413      	add	r3, r2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	80da      	strh	r2, [r3, #6]

}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bc80      	pop	{r7}
 800aa20:	4770      	bx	lr

0800aa22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800aa22:	b580      	push	{r7, lr}
 800aa24:	b082      	sub	sp, #8
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
 800aa2a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800aa2c:	2180      	movs	r1, #128	; 0x80
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fc2e 	bl	800b290 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800aa34:	2100      	movs	r1, #0
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fc2a 	bl	800b290 <USBD_LL_StallEP>
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b086      	sub	sp, #24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	60f8      	str	r0, [r7, #12]
 800aa4c:	60b9      	str	r1, [r7, #8]
 800aa4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d032      	beq.n	800aac0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800aa5a:	68f8      	ldr	r0, [r7, #12]
 800aa5c:	f000 f834 	bl	800aac8 <USBD_GetLen>
 800aa60:	4603      	mov	r3, r0
 800aa62:	3301      	adds	r3, #1
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800aa6e:	7dfb      	ldrb	r3, [r7, #23]
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	75fa      	strb	r2, [r7, #23]
 800aa74:	461a      	mov	r2, r3
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	4413      	add	r3, r2
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	7812      	ldrb	r2, [r2, #0]
 800aa7e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800aa80:	7dfb      	ldrb	r3, [r7, #23]
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	75fa      	strb	r2, [r7, #23]
 800aa86:	461a      	mov	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800aa90:	e012      	b.n	800aab8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	60fa      	str	r2, [r7, #12]
 800aa98:	7dfa      	ldrb	r2, [r7, #23]
 800aa9a:	1c51      	adds	r1, r2, #1
 800aa9c:	75f9      	strb	r1, [r7, #23]
 800aa9e:	4611      	mov	r1, r2
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	440a      	add	r2, r1
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	1c5a      	adds	r2, r3, #1
 800aaac:	75fa      	strb	r2, [r7, #23]
 800aaae:	461a      	mov	r2, r3
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	4413      	add	r3, r2
 800aab4:	2200      	movs	r2, #0
 800aab6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e8      	bne.n	800aa92 <USBD_GetString+0x4e>
    }
  }
}
 800aac0:	bf00      	nop
 800aac2:	3718      	adds	r7, #24
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800aad4:	e005      	b.n	800aae2 <USBD_GetLen+0x1a>
  {
    len++;
 800aad6:	7bfb      	ldrb	r3, [r7, #15]
 800aad8:	3301      	adds	r3, #1
 800aada:	73fb      	strb	r3, [r7, #15]
    buf++;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3301      	adds	r3, #1
 800aae0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1f5      	bne.n	800aad6 <USBD_GetLen+0xe>
  }

  return len;
 800aaea:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr

0800aaf6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	60f8      	str	r0, [r7, #12]
 800aafe:	60b9      	str	r1, [r7, #8]
 800ab00:	4613      	mov	r3, r2
 800ab02:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2202      	movs	r2, #2
 800ab08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ab0c:	88fa      	ldrh	r2, [r7, #6]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ab12:	88fa      	ldrh	r2, [r7, #6]
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab18:	88fb      	ldrh	r3, [r7, #6]
 800ab1a:	68ba      	ldr	r2, [r7, #8]
 800ab1c:	2100      	movs	r1, #0
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fc3f 	bl	800b3a2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3710      	adds	r7, #16
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}

0800ab2e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ab2e:	b580      	push	{r7, lr}
 800ab30:	b084      	sub	sp, #16
 800ab32:	af00      	add	r7, sp, #0
 800ab34:	60f8      	str	r0, [r7, #12]
 800ab36:	60b9      	str	r1, [r7, #8]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ab3c:	88fb      	ldrh	r3, [r7, #6]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	2100      	movs	r1, #0
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f000 fc2d 	bl	800b3a2 <USBD_LL_Transmit>

  return USBD_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b084      	sub	sp, #16
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	60f8      	str	r0, [r7, #12]
 800ab5a:	60b9      	str	r1, [r7, #8]
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2203      	movs	r2, #3
 800ab64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ab68:	88fa      	ldrh	r2, [r7, #6]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ab70:	88fa      	ldrh	r2, [r7, #6]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab78:	88fb      	ldrh	r3, [r7, #6]
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 fc32 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b084      	sub	sp, #16
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	60f8      	str	r0, [r7, #12]
 800ab96:	60b9      	str	r1, [r7, #8]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	2100      	movs	r1, #0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 fc20 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aba8:	2300      	movs	r3, #0
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2204      	movs	r2, #4
 800abbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800abc2:	2300      	movs	r3, #0
 800abc4:	2200      	movs	r2, #0
 800abc6:	2100      	movs	r1, #0
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 fbea 	bl	800b3a2 <USBD_LL_Transmit>

  return USBD_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2205      	movs	r2, #5
 800abe4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abe8:	2300      	movs	r3, #0
 800abea:	2200      	movs	r2, #0
 800abec:	2100      	movs	r1, #0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fbfa 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
	...

0800ac00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ac04:	2200      	movs	r2, #0
 800ac06:	4912      	ldr	r1, [pc, #72]	; (800ac50 <MX_USB_DEVICE_Init+0x50>)
 800ac08:	4812      	ldr	r0, [pc, #72]	; (800ac54 <MX_USB_DEVICE_Init+0x54>)
 800ac0a:	f7fe ff5f 	bl	8009acc <USBD_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ac14:	f7f6 fb83 	bl	800131e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ac18:	490f      	ldr	r1, [pc, #60]	; (800ac58 <MX_USB_DEVICE_Init+0x58>)
 800ac1a:	480e      	ldr	r0, [pc, #56]	; (800ac54 <MX_USB_DEVICE_Init+0x54>)
 800ac1c:	f7fe ff81 	bl	8009b22 <USBD_RegisterClass>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ac26:	f7f6 fb7a 	bl	800131e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ac2a:	490c      	ldr	r1, [pc, #48]	; (800ac5c <MX_USB_DEVICE_Init+0x5c>)
 800ac2c:	4809      	ldr	r0, [pc, #36]	; (800ac54 <MX_USB_DEVICE_Init+0x54>)
 800ac2e:	f7fe fee1 	bl	80099f4 <USBD_CDC_RegisterInterface>
 800ac32:	4603      	mov	r3, r0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d001      	beq.n	800ac3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ac38:	f7f6 fb71 	bl	800131e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <MX_USB_DEVICE_Init+0x54>)
 800ac3e:	f7fe ff89 	bl	8009b54 <USBD_Start>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ac48:	f7f6 fb69 	bl	800131e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ac4c:	bf00      	nop
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	20000228 	.word	0x20000228
 800ac54:	20002f38 	.word	0x20002f38
 800ac58:	20000114 	.word	0x20000114
 800ac5c:	20000218 	.word	0x20000218

0800ac60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ac64:	2200      	movs	r2, #0
 800ac66:	4905      	ldr	r1, [pc, #20]	; (800ac7c <CDC_Init_FS+0x1c>)
 800ac68:	4805      	ldr	r0, [pc, #20]	; (800ac80 <CDC_Init_FS+0x20>)
 800ac6a:	f7fe fed9 	bl	8009a20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ac6e:	4905      	ldr	r1, [pc, #20]	; (800ac84 <CDC_Init_FS+0x24>)
 800ac70:	4803      	ldr	r0, [pc, #12]	; (800ac80 <CDC_Init_FS+0x20>)
 800ac72:	f7fe feee 	bl	8009a52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ac76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	200035e4 	.word	0x200035e4
 800ac80:	20002f38 	.word	0x20002f38
 800ac84:	200031fc 	.word	0x200031fc

0800ac88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ac8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bc80      	pop	{r7}
 800ac94:	4770      	bx	lr
	...

0800ac98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
 800aca4:	4613      	mov	r3, r2
 800aca6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aca8:	79fb      	ldrb	r3, [r7, #7]
 800acaa:	2b23      	cmp	r3, #35	; 0x23
 800acac:	d84a      	bhi.n	800ad44 <CDC_Control_FS+0xac>
 800acae:	a201      	add	r2, pc, #4	; (adr r2, 800acb4 <CDC_Control_FS+0x1c>)
 800acb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb4:	0800ad45 	.word	0x0800ad45
 800acb8:	0800ad45 	.word	0x0800ad45
 800acbc:	0800ad45 	.word	0x0800ad45
 800acc0:	0800ad45 	.word	0x0800ad45
 800acc4:	0800ad45 	.word	0x0800ad45
 800acc8:	0800ad45 	.word	0x0800ad45
 800accc:	0800ad45 	.word	0x0800ad45
 800acd0:	0800ad45 	.word	0x0800ad45
 800acd4:	0800ad45 	.word	0x0800ad45
 800acd8:	0800ad45 	.word	0x0800ad45
 800acdc:	0800ad45 	.word	0x0800ad45
 800ace0:	0800ad45 	.word	0x0800ad45
 800ace4:	0800ad45 	.word	0x0800ad45
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ad45 	.word	0x0800ad45
 800acf0:	0800ad45 	.word	0x0800ad45
 800acf4:	0800ad45 	.word	0x0800ad45
 800acf8:	0800ad45 	.word	0x0800ad45
 800acfc:	0800ad45 	.word	0x0800ad45
 800ad00:	0800ad45 	.word	0x0800ad45
 800ad04:	0800ad45 	.word	0x0800ad45
 800ad08:	0800ad45 	.word	0x0800ad45
 800ad0c:	0800ad45 	.word	0x0800ad45
 800ad10:	0800ad45 	.word	0x0800ad45
 800ad14:	0800ad45 	.word	0x0800ad45
 800ad18:	0800ad45 	.word	0x0800ad45
 800ad1c:	0800ad45 	.word	0x0800ad45
 800ad20:	0800ad45 	.word	0x0800ad45
 800ad24:	0800ad45 	.word	0x0800ad45
 800ad28:	0800ad45 	.word	0x0800ad45
 800ad2c:	0800ad45 	.word	0x0800ad45
 800ad30:	0800ad45 	.word	0x0800ad45
 800ad34:	0800ad45 	.word	0x0800ad45
 800ad38:	0800ad45 	.word	0x0800ad45
 800ad3c:	0800ad45 	.word	0x0800ad45
 800ad40:	0800ad45 	.word	0x0800ad45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ad44:	bf00      	nop
  }

  return (USBD_OK);
 800ad46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bc80      	pop	{r7}
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop

0800ad54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	4805      	ldr	r0, [pc, #20]	; (800ad78 <CDC_Receive_FS+0x24>)
 800ad62:	f7fe fe76 	bl	8009a52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ad66:	4804      	ldr	r0, [pc, #16]	; (800ad78 <CDC_Receive_FS+0x24>)
 800ad68:	f7fe fe86 	bl	8009a78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ad6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	20002f38 	.word	0x20002f38

0800ad7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4603      	mov	r3, r0
 800ad84:	6039      	str	r1, [r7, #0]
 800ad86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2212      	movs	r2, #18
 800ad8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad8e:	4b03      	ldr	r3, [pc, #12]	; (800ad9c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bc80      	pop	{r7}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	20000244 	.word	0x20000244

0800ada0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2204      	movs	r2, #4
 800adb0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800adb2:	4b03      	ldr	r3, [pc, #12]	; (800adc0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	bc80      	pop	{r7}
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000258 	.word	0x20000258

0800adc4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	6039      	str	r1, [r7, #0]
 800adce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	4907      	ldr	r1, [pc, #28]	; (800adf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800adda:	4808      	ldr	r0, [pc, #32]	; (800adfc <USBD_FS_ProductStrDescriptor+0x38>)
 800addc:	f7ff fe32 	bl	800aa44 <USBD_GetString>
 800ade0:	e004      	b.n	800adec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	4904      	ldr	r1, [pc, #16]	; (800adf8 <USBD_FS_ProductStrDescriptor+0x34>)
 800ade6:	4805      	ldr	r0, [pc, #20]	; (800adfc <USBD_FS_ProductStrDescriptor+0x38>)
 800ade8:	f7ff fe2c 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	200039cc 	.word	0x200039cc
 800adfc:	0800b63c 	.word	0x0800b63c

0800ae00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	6039      	str	r1, [r7, #0]
 800ae0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	4904      	ldr	r1, [pc, #16]	; (800ae20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ae10:	4804      	ldr	r0, [pc, #16]	; (800ae24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ae12:	f7ff fe17 	bl	800aa44 <USBD_GetString>
  return USBD_StrDesc;
 800ae16:	4b02      	ldr	r3, [pc, #8]	; (800ae20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3708      	adds	r7, #8
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	200039cc 	.word	0x200039cc
 800ae24:	0800b654 	.word	0x0800b654

0800ae28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	6039      	str	r1, [r7, #0]
 800ae32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	221a      	movs	r2, #26
 800ae38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ae3a:	f000 f843 	bl	800aec4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ae3e:	4b02      	ldr	r3, [pc, #8]	; (800ae48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	2000025c 	.word	0x2000025c

0800ae4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4603      	mov	r3, r0
 800ae54:	6039      	str	r1, [r7, #0]
 800ae56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ae58:	79fb      	ldrb	r3, [r7, #7]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d105      	bne.n	800ae6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae5e:	683a      	ldr	r2, [r7, #0]
 800ae60:	4907      	ldr	r1, [pc, #28]	; (800ae80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae62:	4808      	ldr	r0, [pc, #32]	; (800ae84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae64:	f7ff fdee 	bl	800aa44 <USBD_GetString>
 800ae68:	e004      	b.n	800ae74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	4904      	ldr	r1, [pc, #16]	; (800ae80 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ae6e:	4805      	ldr	r0, [pc, #20]	; (800ae84 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ae70:	f7ff fde8 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae74:	4b02      	ldr	r3, [pc, #8]	; (800ae80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	200039cc 	.word	0x200039cc
 800ae84:	0800b668 	.word	0x0800b668

0800ae88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	4603      	mov	r3, r0
 800ae90:	6039      	str	r1, [r7, #0]
 800ae92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae94:	79fb      	ldrb	r3, [r7, #7]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d105      	bne.n	800aea6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae9a:	683a      	ldr	r2, [r7, #0]
 800ae9c:	4907      	ldr	r1, [pc, #28]	; (800aebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae9e:	4808      	ldr	r0, [pc, #32]	; (800aec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aea0:	f7ff fdd0 	bl	800aa44 <USBD_GetString>
 800aea4:	e004      	b.n	800aeb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aea6:	683a      	ldr	r2, [r7, #0]
 800aea8:	4904      	ldr	r1, [pc, #16]	; (800aebc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aeaa:	4805      	ldr	r0, [pc, #20]	; (800aec0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aeac:	f7ff fdca 	bl	800aa44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aeb0:	4b02      	ldr	r3, [pc, #8]	; (800aebc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200039cc 	.word	0x200039cc
 800aec0:	0800b674 	.word	0x0800b674

0800aec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aeca:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <Get_SerialNum+0x44>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aed0:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <Get_SerialNum+0x48>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aed6:	4b0e      	ldr	r3, [pc, #56]	; (800af10 <Get_SerialNum+0x4c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4413      	add	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d009      	beq.n	800aefe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aeea:	2208      	movs	r2, #8
 800aeec:	4909      	ldr	r1, [pc, #36]	; (800af14 <Get_SerialNum+0x50>)
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f000 f814 	bl	800af1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aef4:	2204      	movs	r2, #4
 800aef6:	4908      	ldr	r1, [pc, #32]	; (800af18 <Get_SerialNum+0x54>)
 800aef8:	68b8      	ldr	r0, [r7, #8]
 800aefa:	f000 f80f 	bl	800af1c <IntToUnicode>
  }
}
 800aefe:	bf00      	nop
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	1ffff7e8 	.word	0x1ffff7e8
 800af0c:	1ffff7ec 	.word	0x1ffff7ec
 800af10:	1ffff7f0 	.word	0x1ffff7f0
 800af14:	2000025e 	.word	0x2000025e
 800af18:	2000026e 	.word	0x2000026e

0800af1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	4613      	mov	r3, r2
 800af28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800af2e:	2300      	movs	r3, #0
 800af30:	75fb      	strb	r3, [r7, #23]
 800af32:	e027      	b.n	800af84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	0f1b      	lsrs	r3, r3, #28
 800af38:	2b09      	cmp	r3, #9
 800af3a:	d80b      	bhi.n	800af54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	0f1b      	lsrs	r3, r3, #28
 800af40:	b2da      	uxtb	r2, r3
 800af42:	7dfb      	ldrb	r3, [r7, #23]
 800af44:	005b      	lsls	r3, r3, #1
 800af46:	4619      	mov	r1, r3
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	440b      	add	r3, r1
 800af4c:	3230      	adds	r2, #48	; 0x30
 800af4e:	b2d2      	uxtb	r2, r2
 800af50:	701a      	strb	r2, [r3, #0]
 800af52:	e00a      	b.n	800af6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	0f1b      	lsrs	r3, r3, #28
 800af58:	b2da      	uxtb	r2, r3
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	005b      	lsls	r3, r3, #1
 800af5e:	4619      	mov	r1, r3
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	440b      	add	r3, r1
 800af64:	3237      	adds	r2, #55	; 0x37
 800af66:	b2d2      	uxtb	r2, r2
 800af68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	3301      	adds	r3, #1
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	4413      	add	r3, r2
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	3301      	adds	r3, #1
 800af82:	75fb      	strb	r3, [r7, #23]
 800af84:	7dfa      	ldrb	r2, [r7, #23]
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d3d3      	bcc.n	800af34 <IntToUnicode+0x18>
  }
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	371c      	adds	r7, #28
 800af92:	46bd      	mov	sp, r7
 800af94:	bc80      	pop	{r7}
 800af96:	4770      	bx	lr

0800af98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a0d      	ldr	r2, [pc, #52]	; (800afdc <HAL_PCD_MspInit+0x44>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d113      	bne.n	800afd2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800afaa:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <HAL_PCD_MspInit+0x48>)
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	4a0c      	ldr	r2, [pc, #48]	; (800afe0 <HAL_PCD_MspInit+0x48>)
 800afb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800afb4:	61d3      	str	r3, [r2, #28]
 800afb6:	4b0a      	ldr	r3, [pc, #40]	; (800afe0 <HAL_PCD_MspInit+0x48>)
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800afc2:	2200      	movs	r2, #0
 800afc4:	2100      	movs	r1, #0
 800afc6:	2014      	movs	r0, #20
 800afc8:	f7f6 fbc3 	bl	8001752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800afcc:	2014      	movs	r0, #20
 800afce:	f7f6 fbdc 	bl	800178a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	40005c00 	.word	0x40005c00
 800afe0:	40021000 	.word	0x40021000

0800afe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aff8:	4619      	mov	r1, r3
 800affa:	4610      	mov	r0, r2
 800affc:	f7fe fdf2 	bl	8009be4 <USBD_LL_SetupStage>
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b01a:	78fa      	ldrb	r2, [r7, #3]
 800b01c:	6879      	ldr	r1, [r7, #4]
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	440b      	add	r3, r1
 800b028:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b02c:	681a      	ldr	r2, [r3, #0]
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	4619      	mov	r1, r3
 800b032:	f7fe fe24 	bl	8009c7e <USBD_LL_DataOutStage>
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	460b      	mov	r3, r1
 800b048:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b050:	78fa      	ldrb	r2, [r7, #3]
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	440b      	add	r3, r1
 800b05e:	333c      	adds	r3, #60	; 0x3c
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	78fb      	ldrb	r3, [r7, #3]
 800b064:	4619      	mov	r1, r3
 800b066:	f7fe fe7b 	bl	8009d60 <USBD_LL_DataInStage>
}
 800b06a:	bf00      	nop
 800b06c:	3708      	adds	r7, #8
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b082      	sub	sp, #8
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe ff8b 	bl	8009f9c <USBD_LL_SOF>
}
 800b086:	bf00      	nop
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b084      	sub	sp, #16
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b096:	2301      	movs	r3, #1
 800b098:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d001      	beq.n	800b0a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b0a2:	f7f6 f93c 	bl	800131e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b0ac:	7bfa      	ldrb	r2, [r7, #15]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7fe ff3b 	bl	8009f2c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7fe fef4 	bl	8009eaa <USBD_LL_Reset>
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fe ff35 	bl	8009f4a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b0e8:	4b04      	ldr	r3, [pc, #16]	; (800b0fc <HAL_PCD_SuspendCallback+0x30>)
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	4a03      	ldr	r2, [pc, #12]	; (800b0fc <HAL_PCD_SuspendCallback+0x30>)
 800b0ee:	f043 0306 	orr.w	r3, r3, #6
 800b0f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b0f4:	bf00      	nop
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	e000ed00 	.word	0xe000ed00

0800b100 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe ff2f 	bl	8009f72 <USBD_LL_Resume>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b124:	4a28      	ldr	r2, [pc, #160]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a26      	ldr	r2, [pc, #152]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b130:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b134:	4b24      	ldr	r3, [pc, #144]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b136:	4a25      	ldr	r2, [pc, #148]	; (800b1cc <USBD_LL_Init+0xb0>)
 800b138:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b13a:	4b23      	ldr	r3, [pc, #140]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b13c:	2208      	movs	r2, #8
 800b13e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b140:	4b21      	ldr	r3, [pc, #132]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b142:	2202      	movs	r2, #2
 800b144:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b146:	4b20      	ldr	r3, [pc, #128]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b148:	2200      	movs	r2, #0
 800b14a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b14c:	4b1e      	ldr	r3, [pc, #120]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b14e:	2200      	movs	r2, #0
 800b150:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b152:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b154:	2200      	movs	r2, #0
 800b156:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b158:	481b      	ldr	r0, [pc, #108]	; (800b1c8 <USBD_LL_Init+0xac>)
 800b15a:	f7f6 fcc1 	bl	8001ae0 <HAL_PCD_Init>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b164:	f7f6 f8db 	bl	800131e <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b16e:	2318      	movs	r3, #24
 800b170:	2200      	movs	r2, #0
 800b172:	2100      	movs	r1, #0
 800b174:	f7f8 f803 	bl	800317e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b17e:	2358      	movs	r3, #88	; 0x58
 800b180:	2200      	movs	r2, #0
 800b182:	2180      	movs	r1, #128	; 0x80
 800b184:	f7f7 fffb 	bl	800317e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b18e:	23c0      	movs	r3, #192	; 0xc0
 800b190:	2200      	movs	r2, #0
 800b192:	2181      	movs	r1, #129	; 0x81
 800b194:	f7f7 fff3 	bl	800317e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b19e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	f7f7 ffea 	bl	800317e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b1b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	2182      	movs	r1, #130	; 0x82
 800b1b8:	f7f7 ffe1 	bl	800317e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3708      	adds	r7, #8
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	20003bcc 	.word	0x20003bcc
 800b1cc:	40005c00 	.word	0x40005c00

0800b1d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7f6 fd85 	bl	8001cf6 <HAL_PCD_Start>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 f94e 	bl	800b494 <USBD_Get_USB_Status>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b206:	b580      	push	{r7, lr}
 800b208:	b084      	sub	sp, #16
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	4608      	mov	r0, r1
 800b210:	4611      	mov	r1, r2
 800b212:	461a      	mov	r2, r3
 800b214:	4603      	mov	r3, r0
 800b216:	70fb      	strb	r3, [r7, #3]
 800b218:	460b      	mov	r3, r1
 800b21a:	70bb      	strb	r3, [r7, #2]
 800b21c:	4613      	mov	r3, r2
 800b21e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b220:	2300      	movs	r3, #0
 800b222:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b22e:	78bb      	ldrb	r3, [r7, #2]
 800b230:	883a      	ldrh	r2, [r7, #0]
 800b232:	78f9      	ldrb	r1, [r7, #3]
 800b234:	f7f6 feff 	bl	8002036 <HAL_PCD_EP_Open>
 800b238:	4603      	mov	r3, r0
 800b23a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 f928 	bl	800b494 <USBD_Get_USB_Status>
 800b244:	4603      	mov	r3, r0
 800b246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b248:	7bbb      	ldrb	r3, [r7, #14]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b084      	sub	sp, #16
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b26c:	78fa      	ldrb	r2, [r7, #3]
 800b26e:	4611      	mov	r1, r2
 800b270:	4618      	mov	r0, r3
 800b272:	f7f6 ff46 	bl	8002102 <HAL_PCD_EP_Close>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 f909 	bl	800b494 <USBD_Get_USB_Status>
 800b282:	4603      	mov	r3, r0
 800b284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b286:	7bbb      	ldrb	r3, [r7, #14]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b29c:	2300      	movs	r3, #0
 800b29e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2aa:	78fa      	ldrb	r2, [r7, #3]
 800b2ac:	4611      	mov	r1, r2
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f7 f806 	bl	80022c0 <HAL_PCD_EP_SetStall>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f8ea 	bl	800b494 <USBD_Get_USB_Status>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b084      	sub	sp, #16
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2e8:	78fa      	ldrb	r2, [r7, #3]
 800b2ea:	4611      	mov	r1, r2
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7f7 f847 	bl	8002380 <HAL_PCD_EP_ClrStall>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2f6:	7bfb      	ldrb	r3, [r7, #15]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f8cb 	bl	800b494 <USBD_Get_USB_Status>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b302:	7bbb      	ldrb	r3, [r7, #14]
}
 800b304:	4618      	mov	r0, r3
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}

0800b30c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b31e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b324:	2b00      	cmp	r3, #0
 800b326:	da0c      	bge.n	800b342 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b328:	78fb      	ldrb	r3, [r7, #3]
 800b32a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32e:	68f9      	ldr	r1, [r7, #12]
 800b330:	1c5a      	adds	r2, r3, #1
 800b332:	4613      	mov	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4413      	add	r3, r2
 800b338:	00db      	lsls	r3, r3, #3
 800b33a:	440b      	add	r3, r1
 800b33c:	3302      	adds	r3, #2
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	e00b      	b.n	800b35a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b342:	78fb      	ldrb	r3, [r7, #3]
 800b344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b348:	68f9      	ldr	r1, [r7, #12]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	00db      	lsls	r3, r3, #3
 800b352:	440b      	add	r3, r1
 800b354:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b358:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b37e:	78fa      	ldrb	r2, [r7, #3]
 800b380:	4611      	mov	r1, r2
 800b382:	4618      	mov	r0, r3
 800b384:	f7f6 fe32 	bl	8001fec <HAL_PCD_SetAddress>
 800b388:	4603      	mov	r3, r0
 800b38a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	4618      	mov	r0, r3
 800b390:	f000 f880 	bl	800b494 <USBD_Get_USB_Status>
 800b394:	4603      	mov	r3, r0
 800b396:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b398:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b086      	sub	sp, #24
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	60f8      	str	r0, [r7, #12]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	72fb      	strb	r3, [r7, #11]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b3c4:	893b      	ldrh	r3, [r7, #8]
 800b3c6:	7af9      	ldrb	r1, [r7, #11]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	f7f6 ff36 	bl	800223a <HAL_PCD_EP_Transmit>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f85d 	bl	800b494 <USBD_Get_USB_Status>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	72fb      	strb	r3, [r7, #11]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b40a:	893b      	ldrh	r3, [r7, #8]
 800b40c:	7af9      	ldrb	r1, [r7, #11]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	f7f6 febf 	bl	8002192 <HAL_PCD_EP_Receive>
 800b414:	4603      	mov	r3, r0
 800b416:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 f83a 	bl	800b494 <USBD_Get_USB_Status>
 800b420:	4603      	mov	r3, r0
 800b422:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b424:	7dbb      	ldrb	r3, [r7, #22]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3718      	adds	r7, #24
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	460b      	mov	r3, r1
 800b438:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b440:	78fa      	ldrb	r2, [r7, #3]
 800b442:	4611      	mov	r1, r2
 800b444:	4618      	mov	r0, r3
 800b446:	f7f6 fee1 	bl	800220c <HAL_PCD_EP_GetRxCount>
 800b44a:	4603      	mov	r3, r0
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3708      	adds	r7, #8
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <USBD_static_malloc+0x14>)
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	bc80      	pop	{r7}
 800b466:	4770      	bx	lr
 800b468:	200010ac 	.word	0x200010ac

0800b46c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	bc80      	pop	{r7}
 800b47c:	4770      	bx	lr

0800b47e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b47e:	b480      	push	{r7}
 800b480:	b083      	sub	sp, #12
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	bc80      	pop	{r7}
 800b492:	4770      	bx	lr

0800b494 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d817      	bhi.n	800b4d8 <USBD_Get_USB_Status+0x44>
 800b4a8:	a201      	add	r2, pc, #4	; (adr r2, 800b4b0 <USBD_Get_USB_Status+0x1c>)
 800b4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ae:	bf00      	nop
 800b4b0:	0800b4c1 	.word	0x0800b4c1
 800b4b4:	0800b4c7 	.word	0x0800b4c7
 800b4b8:	0800b4cd 	.word	0x0800b4cd
 800b4bc:	0800b4d3 	.word	0x0800b4d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c4:	e00b      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4c6:	2302      	movs	r3, #2
 800b4c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4ca:	e008      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e005      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	e002      	b.n	800b4de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b4d8:	2302      	movs	r3, #2
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	bf00      	nop
  }
  return usb_status;
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3714      	adds	r7, #20
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bc80      	pop	{r7}
 800b4e8:	4770      	bx	lr
 800b4ea:	bf00      	nop

0800b4ec <__libc_init_array>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	2600      	movs	r6, #0
 800b4f0:	4d0c      	ldr	r5, [pc, #48]	; (800b524 <__libc_init_array+0x38>)
 800b4f2:	4c0d      	ldr	r4, [pc, #52]	; (800b528 <__libc_init_array+0x3c>)
 800b4f4:	1b64      	subs	r4, r4, r5
 800b4f6:	10a4      	asrs	r4, r4, #2
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	d109      	bne.n	800b510 <__libc_init_array+0x24>
 800b4fc:	f000 f822 	bl	800b544 <_init>
 800b500:	2600      	movs	r6, #0
 800b502:	4d0a      	ldr	r5, [pc, #40]	; (800b52c <__libc_init_array+0x40>)
 800b504:	4c0a      	ldr	r4, [pc, #40]	; (800b530 <__libc_init_array+0x44>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	d105      	bne.n	800b51a <__libc_init_array+0x2e>
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	f855 3b04 	ldr.w	r3, [r5], #4
 800b514:	4798      	blx	r3
 800b516:	3601      	adds	r6, #1
 800b518:	e7ee      	b.n	800b4f8 <__libc_init_array+0xc>
 800b51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51e:	4798      	blx	r3
 800b520:	3601      	adds	r6, #1
 800b522:	e7f2      	b.n	800b50a <__libc_init_array+0x1e>
 800b524:	0800b810 	.word	0x0800b810
 800b528:	0800b810 	.word	0x0800b810
 800b52c:	0800b810 	.word	0x0800b810
 800b530:	0800b814 	.word	0x0800b814

0800b534 <memset>:
 800b534:	4603      	mov	r3, r0
 800b536:	4402      	add	r2, r0
 800b538:	4293      	cmp	r3, r2
 800b53a:	d100      	bne.n	800b53e <memset+0xa>
 800b53c:	4770      	bx	lr
 800b53e:	f803 1b01 	strb.w	r1, [r3], #1
 800b542:	e7f9      	b.n	800b538 <memset+0x4>

0800b544 <_init>:
 800b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b546:	bf00      	nop
 800b548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b54a:	bc08      	pop	{r3}
 800b54c:	469e      	mov	lr, r3
 800b54e:	4770      	bx	lr

0800b550 <_fini>:
 800b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b552:	bf00      	nop
 800b554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b556:	bc08      	pop	{r3}
 800b558:	469e      	mov	lr, r3
 800b55a:	4770      	bx	lr
